/**
* DevExpress Dashboard (dx-dashboard.d.ts)
* Version:  23.1.4
* Build date: Jul 18, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
declare module DevExpress.Dashboard.Internal.Data {
    export const DashboardDataIdField = "__DX_DASHBOARD_DATA_ID";
    export type ClearMasterFilterButtonState = "Enabled" | "Disabled" | "Hidden";
    export let viewerActions: {
        setMasterFilter: string;
        setMultipleValuesMasterFilter: string;
        clearMasterFilter: string;
        drillDown: string;
        drillUp: string;
        setSelectedElementIndex: string;
        expandValue: string;
        dataRequest: string;
        getDrillThroughData: string;
    };
    export type ContentType = "Empty" | "ViewModel" | "ActionModel" | "CompleteDataSource" | "PartialDataSource" | "FullContent";
    export let contentType: {
        empty: ContentType;
        viewModel: ContentType;
        actionModel: ContentType;
        completeDataSource: ContentType;
        partialDataSource: ContentType;
        fullContent: ContentType;
    };
    export let parseFlagsEnumType: (typeModel: string, defaultValue: number, dic: {
        [key: string]: number;
    }) => number;
    export let serializeFlagsEnumType: (val: number, defaultValue: string, dic: {
        [key: string]: number;
    }) => string;
    export let getFlagsEnumTypeValues: (val: number, dic: {
        [key: string]: number;
    }, type: "key" | "value") => Array<any>;
}
declare module DevExpress.Dashboard.Model {
    export type CardRowDataElementType = "ActualValue" | "AbsoluteVariation" | "PercentVariation" | "PercentOfTarget" | "TargetValue" | "DimensionValue" | "CardName" | "Title" | "Subtitle";
    export type CardFormatRuleLayoutElement = "ActualValue" | "AbsoluteVariation" | "PercentVariation" | "PercentOfTarget" | "TargetValue" | "CardName" | "Title" | "Subtitle" | "Indicator" | "AllElements";
    export type FormatRuleChartElement = "Point" | "LineOrArea";
    export type CardWindowDefinitionMode = "Cards" | "SparklineArgument" | "CardsAndSparklineArgument" | "SparklineArgumentAndCards";
    export type ChartLegendInsidePosition = "TopLeftVertical" | "TopLeftHorizontal" | "TopCenterHorizontal" | "TopCenterVertical" | "TopRightVertical" | "TopRightHorizontal" | "BottomLeftVertical" | "BottomLeftHorizontal" | "BottomCenterHorizontal" | "BottomCenterVertical" | "BottomRightVertical" | "BottomRightHorizontal";
    export type ChartLegendOutsidePosition = "TopLeftVertical" | "TopLeftHorizontal" | "TopCenterHorizontal" | "TopRightVertical" | "TopRightHorizontal" | "BottomLeftVertical" | "BottomLeftHorizontal" | "BottomCenterHorizontal" | "BottomRightVertical" | "BottomRightHorizontal";
    export type ChartWindowDefinitionMode = "Arguments" | "Series" | "ArgumentsAndSeries" | "SeriesAndArguments";
    export type ColoringMode = "Default" | "None" | "Hue";
    export type ComboBoxDashboardItemType = "Standard" | "Checked";
    export type ContentArrangementMode = "Auto" | "FixedRowCount" | "FixedColumnCount";
    export type DateFilterType = "Between" | "After" | "Before" | "Exact";
    export type DateFilterArrangementMode = "AutoHeight" | "Horizontal" | "Vertical";
    export type DatePickerLocation = "Far" | "Near" | "Hidden";
    export type DashboardFormatCondition = "Greater" | "GreaterOrEqual" | "Less" | "LessOrEqual" | "Equal" | "NotEqual" | "Between" | "NotBetween" | "BetweenOrEqual" | "NotBetweenOrEqual" | "ContainsText";
    export type DashboardFormatConditionAboveBelowType = "Above" | "AboveOrEqual" | "Below" | "BelowOrEqual";
    export type DashboardFormatConditionComparisonType = "Greater" | "GreaterOrEqual";
    export type DashboardFormatConditionTopBottomType = "Top" | "Bottom";
    export type DashboardFormatConditionValueType = "Number" | "Percent" | "Automatic";
    export type DashboardLayoutGroupOrientation = "Vertical" | "Horizontal";
    export type DashboardTitleAlignment = "Left" | "Center";
    export type DashboardTreemapLayoutAlgorithm = "SliceAndDice" | "Squarified" | "Striped";
    export type DashboardTreemapLayoutDirection = "BottomLeftToTopRight" | "BottomRightToTopLeft" | "TopLeftToBottomRight" | "TopRightToBottomLeft";
    export type DataFieldType = "Text" | "DateTime" | "Bool" | "Integer" | "Float" | "Double" | "Decimal" | "Enum" | "Custom" | "Unknown";
    export type DataItemNumericFormatType = "Auto" | "General" | "Number" | "Currency" | "Scientific" | "Percent" | "Custom";
    export type DataItemNumericUnit = "Auto" | "Ones" | "Thousands" | "Millions" | "Billions";
    export type DateFormat = "Default" | "Long" | "Short";
    export type DateTimeFormat = "Default" | "Long" | "Short" | "TimeOnly";
    export type DateTimeGroupInterval = "Year" | "Quarter" | "Month" | "Day" | "Hour" | "Minute" | "Second" | "DayOfYear" | "DayOfWeek" | "WeekOfYear" | "WeekOfMonth" | "MonthYear" | "QuarterYear" | "WeekYear" | "DayMonthYear" | "DateHour" | "DateHourMinute" | "DateHourMinuteSecond" | "None";
    export type DateTimeInterval = "Year" | "Quarter" | "Month" | "Week" | "Day" | "Hour" | "Minute" | "Second";
    export type DayOfWeekFormat = "Default" | "Full" | "Abbreviated" | "Numeric";
    export type DeltaIndicationMode = "GreaterIsGood" | "LessIsGood" | "WarningIfGreater" | "WarningIfLess" | "NoIndication";
    export type DeltaIndicationThresholdType = "Absolute" | "Percent";
    export type DeltaValueType = "ActualValue" | "AbsoluteVariation" | "PercentVariation" | "PercentOfTarget" | "TargetValue";
    export type DashStyle = "Solid" | "Dash" | "Dot" | "DashDot" | "DashDotDot";
    export type IndicatorType = "RegressionLine" | "TrendLine";
    export type DifferenceTarget = "Previous" | "Next" | "First" | "Last";
    export type DifferenceType = "Absolute" | "Percentage";
    export type DimensionSortMode = "Value" | "DisplayText" | "Key" | "ID";
    export type DimensionSortOrder = "Ascending" | "Descending" | "None";
    export type DimensionTopNMode = "Top" | "Bottom";
    export type ExactDateFormat = "Year" | "Quarter" | "Month" | "Day" | "Hour" | "Minute" | "Second";
    export type DateOccurringFilterDateType = /*'None' | 'SpecificDate' |*/ "BeyondThisYear" | "LaterThisYear" | "LaterThisMonth" | "LaterThisWeek" | "NextWeek" | "Tomorrow" | "Today" | "Yesterday" | "EarlierThisWeek" | "LastWeek" | "EarlierThisMonth" | "EarlierThisYear" | "PriorThisYear" | "Empty" | /*'User' |*/ "Beyond" | "ThisWeek" | "ThisMonth" | "MonthAfter1" | "MonthAfter2" | "MonthAgo1" | "MonthAgo2" | "MonthAgo3" | "MonthAgo4" | "MonthAgo5" | "MonthAgo6" | "Earlier";
    export type FontStyle = "Regular" | "Bold" | "Italic" | "Underline" | "Strikeout";
    export type FormatConditionAppearanceType = "None" | "Custom" | "PaleRed" | "PaleYellow" | "PaleGreen" | "PaleBlue" | "PalePurple" | "PaleCyan" | "PaleOrange" | "PaleGray" | "Red" | "Yellow" | "Green" | "Blue" | "Purple" | "Cyan" | "Orange" | "Gray" | "GradientRed" | "GradientYellow" | "GradientGreen" | "GradientBlue" | "GradientPurple" | "GradientCyan" | "GradientOrange" | "GradientTransparent" | "FontBold" | "FontItalic" | "FontUnderline" | "FontGrayed" | "FontRed" | "FontYellow" | "FontGreen" | "FontBlue";
    export type FormatConditionIconType = "None" | "DirectionalGreenArrowUp" | "DirectionalYellowUpInclineArrow" | "DirectionalYellowSideArrow" | "DirectionalYellowDownInclineArrow" | "DirectionalRedDownArrow" | "DirectionalGrayArrowUp" | "DirectionalGrayUpInclineArrow" | "DirectionalGraySideArrow" | "DirectionalGrayDownInclineArrow" | "DirectionalGrayDownArrow" | "DirectionalYellowDash" | "DirectionalRedTriangleDown" | "DirectionalGreenTriangleUp" | "RatingFullGrayStar" | "RatingHalfGrayStar" | "RatingEmptyGrayStar" | "RatingFullGrayCircle" | "Rating1QuarterGrayCircle" | "Rating2QuartersGrayCircle" | "Rating3QuartersGrayCircle" | "RatingEmptyGrayCircle" | "Rating4Bars" | "Rating3Bars" | "Rating2Bars" | "Rating1Bar" | "Rating0Bars" | "Rating4FilledBoxes" | "Rating3FilledBoxes" | "Rating2FilledBoxes" | "Rating1FilledBox" | "Rating0FilledBoxes" | "ShapeGreenTrafficLight" | "ShapeYellowTrafficLight" | "ShapeRedTrafficLight" | "ShapeGreenCircle" | "ShapeYellowCircle" | "ShapeRedCircle" | "ShapeLightRedCircle" | "ShapeLightGrayCircle" | "ShapeYellowTriangle" | "ShapeRedDiamond" | "IndicatorGreenCheck" | "IndicatorYellowExclamation" | "IndicatorRedCross" | "IndicatorCircledGreenCheck" | "IndicatorCircledYellowExclamation" | "IndicatorCircledRedCross" | "IndicatorGreenFlag" | "IndicatorYellowFlag" | "IndicatorRedFlag";
    export type FormatConditionIntersectionLevelMode = "Auto" | "FirstLevel" | "LastLevel" | "AllLevels" | "SpecificLevel";
    export type GaugeViewType = "CircularFull" | "CircularHalf" | "CircularQuarterRight" | "CircularQuarterLeft" | "CircularThreeFourth" | "LinearHorizontal" | "LinearVertical";
    export type GridColumnFixedWidthType = "Weight" | "FitToContent" | "FixedWidth";
    export type GridColumnTotalType = "Auto" | "Count" | "Min" | "Max" | "Avg" | "Sum";
    export type GridColumnValueBarDisplayMode = "Value" | "Bar";
    export type GridColumnWidthMode = "Manual" | "AutoFitToContents" | "AutoFitToGrid";
    export type GridDimensionColumnDisplayMode = "Text" | "Image";
    export type GridMeasureColumnDisplayMode = "Value" | "Bar";
    export type GridWindowDefinitionMode = "Rows" | "SparklineArgument" | "RowsAndSparklineArgument" | "SparklineArgumentAndRows";
    export type HourFormat = "Default" | "Short" | "Long";
    export type ImageDataBindingMode = "BinaryArray" | "Uri";
    export type ImageHorizontalAlignment = "Left" | "Center" | "Right";
    export type ImageSizeMode = "Clip" | "Stretch" | "Zoom" | "Squeeze";
    export type ImageVerticalAlignment = "Top" | "Center" | "Bottom";
    export type ListBoxDashboardItemType = "Checked" | "Radio";
    export type LogarithmicBase = "Base2" | "Base5" | "Base10";
    export type MapLegendOrientation = "Vertical" | "Horizontal";
    export type MapLegendPosition = "TopLeft" | "TopCenter" | "TopRight" | "BottomLeft" | "BottomCenter" | "BottomRight";
    export type MonthFormat = "Default" | "Full" | "Abbreviated" | "Numeric";
    export type OpenHighLowCloseSeriesType = "CandleStick" | "Stock";
    export type PieValueType = "None" | "Argument" | "Percent" | "ArgumentAndPercent" | "Value" | "ArgumentAndValue" | "ValueAndPercent" | "ArgumentValueAndPercent";
    export type PieWindowDefinitionMode = "Arguments" | "Series" | "ArgumentsAndSeries" | "SeriesAndArguments";
    export type PivotColumnTotalsPosition = "Near" | "Far";
    export type PivotLayoutType = "Compact" | "Tabular";
    export type PivotRowTotalsPosition = "Top" | "Bottom";
    export type PivotValuesPosition = "Columns" | "Rows";
    export type PivotWindowDefinitionMode = "Columns" | "Rows" | "ColumnsAndRows" | "RowsAndColumns" | "GroupsInColumns" | "GroupsInRows" | "GroupsInColumnsAndRows" | "GroupsInRowsAndColumns";
    export type PointLabelOrientation = "Default" | "RotateRight" | "RotateLeft";
    export type PointLabelOverlappingMode = "Hide" | "None" | "Reposition";
    export type PointLabelPosition = "Outside" | "Inside";
    export type QuarterFormat = "Default" | "Numeric" | "Full";
    export type RangeFilterWindowDefinitionMode = "Argument" | "Series" | "ArgumentAndSeries" | "SeriesAndArgument";
    export type RangeSeriesType = "SideBySideRangeBar" | "RangeArea";
    export type RankOrder = "Ascending" | "Descending";
    export type RankType = "Unique" | "Competition" | "Dense" | "Modified" | "Percentile";
    export type ScatterPointLabelContentType = "Argument" | "Weight" | "Values" | "ArgumentAndWeight" | "ArgumentAndValues";
    export type ShapefileArea = "Custom" | "WorldCountries" | "Europe" | "Asia" | "NorthAmerica" | "SouthAmerica" | "Africa" | "USA" | "Canada";
    export type SimpleSeriesType = "Bar" | "StackedBar" | "FullStackedBar" | "Point" | "Line" | "StackedLine" | "FullStackedLine" | "StepLine" | "Spline" | "Area" | "StackedArea" | "FullStackedArea" | "StepArea" | "SplineArea" | "StackedSplineArea" | "FullStackedSplineArea";
    export type SparklineViewType = "Line" | "Area" | "Bar" | "WinLoss";
    export type SummaryType = "Count" | "Sum" | "Min" | "Max" | "Average" | "StdDev" | "StdDevp" | "Var" | "Varp" | "CountDistinct" | "Median" | "Mode";
    export type TargetDimensions = "Arguments" | "Series" | "Points";
    export type TextGroupInterval = "None" | "Alphabetical";
    export type TreemapValueType = "None" | "Argument" | "Value" | "ArgumentAndValue";
    export type WeightedLegendType = "Linear" | "Nested";
    export type YearFormat = "Default" | "Full" | "Abbreviated";
    export type LayoutDimensionMode = "Auto" | "Fixed";
    export enum PointLabelContentType {
        None = 0,
        Argument = 1,
        SeriesName = 2,
        Value = 4,
        Percent = 8
    }
    export let parsePointLabelContentType: (typeModel: any) => PointLabelContentType;
    export let serializePointLabelContentType: (val: PointLabelContentType) => string;
    export let getPointLabelContentTypeValues: (val: PointLabelContentType) => Array<PointLabelContentType>;
    export let PointLabelContentTypeDictionary: {
        Argument: PointLabelContentType;
        SeriesName: PointLabelContentType;
        Value: PointLabelContentType;
        Percent: PointLabelContentType;
    };
    export enum FilterDateType {
        None = 0,
        BeyondThisYear = 2,
        LaterThisYear = 4,
        LaterThisMonth = 8,
        LaterThisWeek = 16,
        NextWeek = 32,
        Tomorrow = 64,
        Today = 128,
        Yesterday = 256,
        EarlierThisWeek = 512,
        LastWeek = 1024,
        EarlierThisMonth = 2048,
        EarlierThisYear = 4096,
        PriorThisYear = 8192,
        Empty = 16384,
        Beyond = 131072,
        ThisWeek = 262144,
        ThisMonth = 524288,
        MonthAfter1 = 1048576,
        MonthAfter2 = 2097152,
        MonthAgo1 = 4194304,
        MonthAgo2 = 8388608,
        MonthAgo3 = 16777216,
        MonthAgo4 = 33554432,
        MonthAgo5 = 67108864,
        MonthAgo6 = 134217728,
        Earlier = 268435456
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import DashboardFormatConditionValueType = DevExpress.Dashboard.Model.DashboardFormatConditionValueType;
    import FormatConditionAppearanceType = DevExpress.Dashboard.Model.FormatConditionAppearanceType;
    import FormatConditionIconType = DevExpress.Dashboard.Model.FormatConditionIconType;
    import FormatRuleChartElement = DevExpress.Dashboard.Model.FormatRuleChartElement;
    export interface StyleSettingsModel {
        Color: number;
        ForeColor: number;
        FontFamily: string;
        FontSize: number;
        FontStyle: string;
        RangeIndex: number;
        RuleIndex: number;
        AppearanceType: DevExpress.Dashboard.Model.FormatConditionAppearanceType;
        IconType: DevExpress.Dashboard.Model.FormatConditionIconType;
        Image: any;
        IsBarStyle: boolean;
    }
    export interface ConditionModel {
        FixedColors: Array<{
            key: number;
            style: StyleSettingsModel;
        }>;
    }
    export interface RangeConditionModel extends ConditionModel {
        ValueType: DevExpress.Dashboard.Model.DashboardFormatConditionValueType;
        Ranges: Array<RangeInfoModel>;
    }
    export interface RangeInfoModel {
        LeftValue: any;
        RightValue: any;
    }
    export interface FormatRuleModelBase {
        FormatConditionMeasureId: string;
        NormalizedValueMeasureId: string;
        ZeroPositionMeasureId: string;
        ApplyToRow: boolean;
        ConditionModel: any;
        CalcByDataId: string;
    }
    export interface PivotFormatRuleModel extends FormatRuleModelBase {
        ApplyToDataId: string;
        ApplyToColumn: boolean;
    }
    export interface CardItemFormatRuleModel extends FormatRuleModelBase {
        ApplyToLayoutElementModel: ApplyToLayoutElementModel;
        ApplyToCardId: string;
    }
    export interface ApplyToLayoutElementModel {
        ApplyToLayoutElement: string;
        DimensionId: string;
        Text: string;
    }
    export interface ChartItemFormatRuleModelBase extends FormatRuleModelBase {
        DisplayName: string;
        ShowInLegend: boolean;
    }
    export interface ChartItemFormatRuleModel extends ChartItemFormatRuleModelBase {
        ApplyToSeriesId: string;
        ApplyToChartElement: DevExpress.Dashboard.Model.FormatRuleChartElement;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export const defaultLocalization: {
        "DashboardStringId.ActionClearMasterFilter": string;
        "DashboardStringId.ActionClearSelection": string;
        "DashboardStringId.ActionOtherValues": string;
        "DashboardStringId.ActionDrillUp": string;
        "DashboardStringId.ActionExportTo": string;
        "DashboardStringId.ActionExportToPdf": string;
        "DashboardStringId.ActionExportToImage": string;
        "DashboardStringId.ActionExportToExcel": string;
        "DashboardStringId.RangeFilterCustomDateTimePeriod": string;
        "DashboardStringId.ActionExportTemplate": string;
        "DashboardStringId.ActionAllowMultiselection": string;
        "DashboardStringId.DashboardNullValue": string;
        "DashboardStringId.TopNOthersValue": string;
        "DashboardStringId.DashboardErrorValue": string;
        "DashboardStringId.DateTimeQuarterFormat": string;
        "DashboardStringId.MessageLoading": string;
        "DashboardStringId.ParametersFormCaption": string;
        "DashboardStringId.ParametersSelectorText": string;
        "DashboardStringId.ParametersFormAllowNullColumnCaption": string;
        "DashboardStringId.ParametersFormValueColumnCaption": string;
        "DashboardStringId.ParametersFormNameColumnCaption": string;
        "DashboardStringId.ButtonOK": string;
        "DashboardStringId.ButtonCancel": string;
        "DashboardStringId.SelectDate": string;
        "DashboardStringId.ButtonReset": string;
        "DashboardStringId.ButtonSubmit": string;
        "DashboardStringId.ButtonApply": string;
        "DashboardStringId.ButtonExport": string;
        "DashboardStringId.GridResetColumnWidths": string;
        "DashboardStringId.GridSortAscending": string;
        "DashboardStringId.GridSortDescending": string;
        "DashboardStringId.GridClearSorting": string;
        "DashboardStringId.PivotGridTotal": string;
        "DashboardStringId.PivotGridGrandTotal": string;
        "DashboardStringId.ChartTotalValue": string;
        "DashboardStringId.PageLayout": string;
        "DashboardStringId.PageLayoutAuto": string;
        "DashboardStringId.PageLayoutPortrait": string;
        "DashboardStringId.PageLayoutLandscape": string;
        "DashboardStringId.PaperKind": string;
        "DashboardStringId.PaperKindLetter": string;
        "DashboardStringId.PaperKindLegal": string;
        "DashboardStringId.PaperKindExecutive": string;
        "DashboardStringId.PaperKindA5": string;
        "DashboardStringId.PaperKindA4": string;
        "DashboardStringId.PaperKindA3": string;
        "DashboardStringId.ScaleMode": string;
        "DashboardStringId.ScaleModeNone": string;
        "DashboardStringId.ScaleModeUseScaleFactor": string;
        "DashboardStringId.ScaleModeAutoFitToPagesWidth": string;
        "DashboardStringId.AutoFitPageCount": string;
        "DashboardStringId.ScaleFactor": string;
        "DashboardStringId.PrintHeadersOnEveryPage": string;
        "DashboardStringId.FitToPageWidth": string;
        "DashboardStringId.SizeMode": string;
        "DashboardStringId.SizeModeNone": string;
        "DashboardStringId.SizeModeStretch": string;
        "DashboardStringId.SizeModeZoom": string;
        "DashboardStringId.AutoArrangeContent": string;
        "DashboardStringId.ImageFormat": string;
        "DashboardStringId.ExcelFormat": string;
        "DashboardStringId.CsvValueSeparator": string;
        "DashboardStringId.ExportFilters": string;
        "DashboardStringId.ExportParameters": string;
        "DashboardStringId.DashboardStatePosition": string;
        "DashboardStringId.Resolution": string;
        "DashboardStringId.ShowTitle": string;
        "DashboardStringId.Title": string;
        "DashboardStringId.FileName": string;
        "DashboardStringId.FilterStatePresentationAfter": string;
        "DashboardStringId.FilterStatePresentationAfterAndSplitPage": string;
        "DashboardStringId.FilterStatePresentationSplitSheet": string;
        "DashboardStringId.MessageCustomItemIsNotSupported": string;
        "DashboardStringId.MessageGridHasNoData": string;
        "DashboardStringId.MessagePivotHasNoData": string;
        "DashboardStringId.SparklineTooltipStartValue": string;
        "DashboardStringId.SparklineTooltipEndValue": string;
        "DashboardStringId.SparklineTooltipMinValue": string;
        "DashboardStringId.SparklineTooltipMaxValue": string;
        "DashboardStringId.OpenCaption": string;
        "DashboardStringId.HighCaption": string;
        "DashboardStringId.LowCaption": string;
        "DashboardStringId.CloseCaption": string;
        "DashboardStringId.InitialExtent": string;
        "DashboardStringId.FilterElementShowAllItem": string;
        "DashboardStringId.NumericFormatUnitSymbolThousands": string;
        "DashboardStringId.NumericFormatUnitSymbolMillions": string;
        "DashboardStringId.NumericFormatUnitSymbolBillions": string;
        "DashboardStringId.ActionSelectDateTimePeriod": string;
        "DashboardStringId.RangeFilterSelectRange": string;
        "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption": string;
        "DashboardStringId.FilterElementRadioComboBoxNoDataCaption": string;
        "DashboardStringId.FilterElementNoDataToDisplay": string;
        "DashboardWebStringId.FilterElementCheckedComboBoxSelected": string;
        "DashboardStringId.RangeFilterSelectRangeFromCaption": string;
        "DashboardStringId.RangeFilterSelectRangeToCaption": string;
        "DashboardWebStringId.DashboardParameters": string;
        "DashboardStringId.DataSourceDataMember": string;
        "DashboardStringId.DescriptionMeasures": string;
        "DashboardWebStringId.TextBoxFormatText": string;
        "DashboardStringId.NumericFormatUnitCaption": string;
        "DashboardWebStringId.SummaryType": string;
        "DashboardStringId.CalculationTypeExpression": string;
        "DevExpressWebStringId.CalculatedFieldDataType": string;
        "DashboardStringId.ValueCaption": string;
        "DashboardStringId.Value1Caption": string;
        "DashboardStringId.Value2Caption": string;
        "DashboardStringId.CommandFormatRuleTopBottom": string;
        "DashboardStringId.CommandFormatRuleAboveBelowAverage": string;
        "DashboardStringId.CommandFormatRuleBar": string;
        "DashboardStringId.CommandFormatRuleColorRangeBar": string;
        "DashboardStringId.CommandFormatRuleGradientRangeBar": string;
        "DashboardStringId.FormatRuleStyleAppearance": string;
        "DashboardStringId.FormatRuleStyleIcons": string;
        "DashboardStringId.FormatRuleNegativeStyle": string;
        "DashboardStringId.CommandFormatRuleExpression": string;
        "DashboardWebStringId.TopNMode": string;
        "DashboardStringId.CommandFormatRuleRangeSet": string;
        "DashboardStringId.CommandFormatRuleRangeSetRanges2": string;
        "DashboardStringId.CommandFormatRuleRangeSetRanges3": string;
        "DashboardStringId.CommandFormatRuleRangeSetRanges4": string;
        "DashboardStringId.CommandFormatRuleRangeSetRanges5": string;
        "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges": string;
        "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges": string;
        "DashboardStringId.CommandFormatRuleValue": string;
        "DashboardStringId.CommandFormatRuleDateOccurring": string;
        "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor": string;
        "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor": string;
        "DashboardStringId.DescriptionBoundImageAttribute": string;
        "DashboardWebStringId.ShowCaptionText": string;
        "DashboardWebStringId.DisplayItemAsPage": string;
        "DashboardStringId.DefaultNameItemGroup": string;
        "DashboardStringId.DefaultNameTabContainerItem": string;
        "DashboardStringId.DefaultDataSourceName": string;
        "DashboardWebStringId.CrossDataSourceFiltering": string;
        "DashboardStringId.RangeFilterCalculationAlongSeries": string;
        "DashboardStringId.RangeFilterCalculationAlongArgument": string;
        "DashboardStringId.DescriptionItemSeries": string;
        "DashboardStringId.DescriptionSeries": string;
        "DashboardWebStringId.Chart.SeriesType": string;
        "DashboardStringId.DescriptionDimensions": string;
        "DashboardWebStringId.TreeView.AutoExpand": string;
        "DashboardWebStringId.ConditionalFormatting.ConditionMinimum": string;
        "DashboardWebStringId.ConditionalFormatting.ConditionMaximum": string;
        "DashboardStringId.DescriptionItemDimension": string;
        "DashboardStringId.DescriptionItemMeasure": string;
        "DashboardWebStringId.Grid.MergeCells": string;
        "DashboardWebStringId.Grid.ColumnWidthMode": string;
        "DashboardWebStringId.Grid.BandedRows": string;
        "DashboardWebStringId.Grid.VerticalLines": string;
        "DashboardWebStringId.Grid.HorizontalLines": string;
        "DashboardWebStringId.Grid.ColumnHeaders": string;
        "DashboardWebStringId.Grid.WordWrap": string;
        "DashboardWebStringId.Grid.ShowFilterRow": string;
        "DashboardWebStringId.Grid.UpdateTotals": string;
        "DashboardWebStringId.Grid.GridColumnFilter": string;
        "DashboardStringId.ActualValueCaption": string;
        "DashboardStringId.TargetValueCaption": string;
        "DashboardStringId.UriPatternCaption": string;
        "DashboardStringId.UriCaption": string;
        "DashboardStringId.DisplayValueCaption": string;
        "DashboardStringId.WeightCaption": string;
        "DashboardStringId.DescriptionItemColor": string;
        "DashboardStringId.Latitude": string;
        "DashboardStringId.Longitude": string;
        "DashboardWebStringId.GeoPointMapClusterization": string;
        "DashboardWebStringId.MapLockNavigation": string;
        "DashboardWebStringId.WeightedLegendGalleryGroup": string;
        "DashboardStringId.DescriptionItemArgument": string;
        "DashboardWebStringId.PieMapIsWeighted": string;
        "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters": string;
        "DashboardWebStringId.InteractivityOptions.DrillDown": string;
        "DashboardWebStringId.Pie.ShowCaptions": string;
        "DashboardStringId.DescriptionColumns": string;
        "DashboardStringId.DescriptionRows": string;
        "DashboardStringId.DescriptionValues": string;
        "DashboardStringId.DescriptionArguments": string;
        "DashboardStringId.TextGroupIntervalAlphabetical": string;
        "DashboardStringId.ActionMaximizeDashboardItem": string;
        "DashboardStringId.ActionRestoreDashboardItem": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder": string;
        "DevExpress.DashboardCommon.DashboardParameter.Visible": string;
        "DevExpress.DashboardCommon.DashboardParameter.Description": string;
        "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect": string;
        "DevExpress.DashboardCommon.DashboardParameter.AllowNull": string;
        "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues": string;
        "DevExpress.DashboardCommon.StaticListLookUpSettings.Values": string;
        "DevExpress.DashboardCommon.DimensionSortOrder.Ascending": string;
        "DevExpress.DashboardCommon.DimensionSortOrder.Descending": string;
        "DevExpress.DashboardCommon.DimensionSortOrder.None": string;
        "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions": string;
        "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute": string;
        "DashboardStringId.CommandFormatRuleTopN": string;
        "DashboardWebStringId.Type": string;
        "DashboardWebStringId.Grid.ColumnWidth": string;
        "DashboardWebStringId.AccordionTab.ShowTotals": string;
        "DashboardWebStringId.AccordionTab.Layout": string;
        "DashboardWebStringId.AccordionTab.PivotInitialState": string;
        "DashboardWebStringId.AccordionTab.ImageOptions": string;
        "DashboardWebStringId.AccordionTab.Labels": string;
        "DashboardWebStringId.AccordionTab.MapLegend": string;
        "DashboardWebStringId.AccordionTab.WeightedLegend": string;
        "DashboardWebStringId.AccordionTab.Common": string;
        "DashboardWebStringId.AccordionTab.ChartLegend": string;
        "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode": string;
        "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode": string;
        "DashboardWebStringId.Grid.ManualGridColumnWidthMode": string;
        "DashboardStringId.DateTimeIntervalYear": string;
        "DashboardStringId.DateTimeIntervalQuarter": string;
        "DashboardStringId.DateTimeIntervalMonth": string;
        "DashboardStringId.DateTimeIntervalWeek": string;
        "DashboardStringId.DateTimeIntervalDay": string;
        "DashboardStringId.DateTimeIntervalHour": string;
        "DashboardStringId.DateTimeIntervalMinute": string;
        "DashboardStringId.DateTimeIntervalSecond": string;
        "DashboardStringId.DateTimeGroupIntervalYear": string;
        "DashboardStringId.DateTimeGroupIntervalQuarter": string;
        "DashboardStringId.DateTimeGroupIntervalMonth": string;
        "DashboardStringId.DateTimeGroupIntervalDay": string;
        "DashboardStringId.DateTimeGroupIntervalHour": string;
        "DashboardStringId.DateTimeGroupIntervalMinute": string;
        "DashboardStringId.DateTimeGroupIntervalSecond": string;
        "DashboardStringId.DateTimeGroupIntervalDayOfYear": string;
        "DashboardStringId.DateTimeGroupIntervalDayOfWeek": string;
        "DashboardStringId.DateTimeGroupIntervalWeekOfYear": string;
        "DashboardStringId.DateTimeGroupIntervalWeekOfMonth": string;
        "DashboardStringId.DateTimeGroupIntervalMonthYear": string;
        "DashboardStringId.DateTimeGroupIntervalQuarterYear": string;
        "DashboardStringId.DateTimeGroupIntervalWeekYear": string;
        "DashboardStringId.DateTimeGroupIntervalDayMonthYear": string;
        "DashboardStringId.DateTimeGroupIntervalDateHour": string;
        "DashboardStringId.DateTimeGroupIntervalDateHourMinute": string;
        "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond": string;
        "DashboardStringId.DateTimeGroupIntervalExactDate": string;
        "DashboardStringId.GroupIntervalNone": string;
        "DashboardWebStringId.Treemap.StripedLayoutAlgorithm": string;
        "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm": string;
        "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm": string;
        "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue": string;
        "DashboardWebStringId.Treemap.TileLabelsNone": string;
        "DashboardWebStringId.Treemap.TileLabelsValue": string;
        "DashboardWebStringId.Treemap.TileLabelsArgument": string;
        "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue": string;
        "DashboardWebStringId.Treemap.TileTooltipsArgument": string;
        "DashboardWebStringId.Treemap.TileTooltipsValue": string;
        "DashboardWebStringId.Treemap.TileTooltipsNone": string;
        "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection": string;
        "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection": string;
        "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection": string;
        "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection": string;
        "DashboardWebStringId.Treemap.LayoutDirection": string;
        "DashboardWebStringId.Treemap.GroupLabelsNone": string;
        "DashboardWebStringId.Treemap.GroupLabelsArgument": string;
        "DashboardWebStringId.Treemap.GroupLabelsValue": string;
        "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue": string;
        "DashboardWebStringId.Treemap.GroupTooltipsNone": string;
        "DashboardWebStringId.Treemap.GroupTooltipsArgument": string;
        "DashboardWebStringId.Treemap.GroupTooltipsValue": string;
        "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue": string;
        "DashboardStringId.RankOrderAscending": string;
        "DashboardStringId.RankOrderDescending": string;
        "DashboardStringId.DateTimeFormatYearFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatYearFormatFullCaption": string;
        "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption": string;
        "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption": string;
        "DashboardStringId.DateTimeFormatQuarterFormatFullCaption": string;
        "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatMonthFormatFullCaption": string;
        "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption": string;
        "DashboardStringId.DateTimeFormatMonthFormatNumericCaption": string;
        "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption": string;
        "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption": string;
        "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption": string;
        "DashboardStringId.DateTimeFormatDateFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatDateFormatLongCaption": string;
        "DashboardStringId.DateTimeFormatDateFormatShortCaption": string;
        "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption": string;
        "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption": string;
        "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption": string;
        "DashboardStringId.ExactDateFormatYear": string;
        "DashboardStringId.ExactDateFormatQuarter": string;
        "DashboardStringId.ExactDateFormatMonth": string;
        "DashboardStringId.ExactDateFormatDay": string;
        "DashboardStringId.ExactDateFormatHour": string;
        "DashboardStringId.ExactDateFormatMinute": string;
        "DashboardStringId.ExactDateFormatSecond": string;
        "DashboardWebStringId.FormatType": string;
        "DashboardWebStringId.TopN.Top": string;
        "DashboardWebStringId.TopN.Bottom": string;
        "DashboardWebStringId.DimensionSortBy": string;
        "DashboardStringId.NumericFormatUnitAutoCaption": string;
        "DashboardStringId.NumericFormatFormatTypeAutoCaption": string;
        "DashboardStringId.NumericFormatFormatTypeGeneralCaption": string;
        "DashboardStringId.NumericFormatFormatTypeNumberCaption": string;
        "DashboardStringId.NumericFormatFormatTypeCurrencyCaption": string;
        "DashboardStringId.NumericFormatFormatTypeScientificCaption": string;
        "DashboardStringId.NumericFormatFormatTypePercentCaption": string;
        "DashboardStringId.NumericFormatUnitOnesCaption": string;
        "DashboardStringId.NumericFormatUnitThousandsCaption": string;
        "DashboardStringId.NumericFormatUnitMillionsCaption": string;
        "DashboardStringId.NumericFormatUnitBillionsCaption": string;
        "DashboardStringId.DeltaValueTypeActualValueCaption": string;
        "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption": string;
        "DashboardStringId.DeltaValueTypePercentVariationCaption": string;
        "DashboardStringId.DeltaValueTypePercentOfTargetCaption": string;
        "DashboardStringId.DeltaValueTypeTargetValueCaption": string;
        "DashboardStringId.GaugeScaleLabelFormatCaption": string;
        "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption": string;
        "DashboardStringId.DeltaIndicationModeLessIsGoodCaption": string;
        "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption": string;
        "DashboardStringId.DeltaIndicationModeWarningIfLessCaption": string;
        "DashboardStringId.DeltaIndicationModeNoIndicationCaption": string;
        "DashboardStringId.DeltaThresholdTypeAbsolute": string;
        "DashboardStringId.DeltaThresholdTypePercent": string;
        "DashboardStringId.CommandDimensionGroupChildValues": string;
        "DashboardStringId.SeriesTypeBar": string;
        "DashboardStringId.SeriesTypeStackedBar": string;
        "DashboardStringId.SeriesTypeFullStackedBar": string;
        "DashboardStringId.SeriesTypePoint": string;
        "DashboardStringId.SeriesTypeLine": string;
        "DashboardStringId.SeriesTypeStackedLine": string;
        "DashboardStringId.SeriesTypeFullStackedLine": string;
        "DashboardStringId.SeriesTypeStepLine": string;
        "DashboardStringId.SeriesTypeSpline": string;
        "DashboardStringId.SeriesTypeArea": string;
        "DashboardStringId.SeriesTypeStackedArea": string;
        "DashboardStringId.SeriesTypeFullStackedArea": string;
        "DashboardStringId.SeriesTypeStepArea": string;
        "DashboardStringId.SeriesTypeSplineArea": string;
        "DashboardStringId.SeriesTypeStackedSplineArea": string;
        "DashboardStringId.SeriesTypeFullStackedSplineArea": string;
        "DashboardWebStringId.Chart.ShowLegend": string;
        "DashboardStringId.DefaultNameBoundImageItem": string;
        "DashboardStringId.DefaultNameImageItem": string;
        "DashboardStringId.DefaultNameTextBoxItem": string;
        "DashboardStringId.DefaultNameCardItem": string;
        "DashboardStringId.DefaultNameChartItem": string;
        "DashboardStringId.DefaultNameComboBoxItem": string;
        "DashboardStringId.DefaultNameListBoxItem": string;
        "DashboardStringId.DefaultNameTreeViewItem": string;
        "DashboardStringId.DefaultNameGaugeItem": string;
        "DashboardStringId.DefaultNameGridItem": string;
        "DashboardStringId.GridHyperlinkUriPatternErrorMessage": string;
        "DashboardWebStringId.DefaultNameBubbleMapItem": string;
        "DashboardWebStringId.DefaultNameChoroplethMapItem": string;
        "DashboardWebStringId.DefaultNameGeoPointMapItem": string;
        "DashboardWebStringId.DefaultNamePieMapItem": string;
        "DashboardStringId.DefaultNamePieItem": string;
        "DashboardStringId.DefaultNamePivotItem": string;
        "DashboardStringId.DefaultNameRangeFilterItem": string;
        "DashboardStringId.DefaultNameScatterChartItem": string;
        "DashboardStringId.DefaultNameTreemapItem": string;
        "DashboardStringId.DescriptionMaps": string;
        "DashboardStringId.EntireRangePeriodCaption": string;
        "DashboardStringId.CalculationTypePercentOfTotal": string;
        "DashboardStringId.CalculationTypeDifference": string;
        "DashboardStringId.CalculationTypePercentageDifference": string;
        "DashboardStringId.CalculationTypeRunningTotal": string;
        "DashboardStringId.CalculationTypeMovingCalculation": string;
        "DashboardStringId.CalculationTypeRank": string;
        "DashboardStringId.ColorPaletteIndex": string;
        "DashboardStringId.DifferenceCalculationTargetPrevious": string;
        "DashboardStringId.DifferenceCalculationTargetNext": string;
        "DashboardStringId.DifferenceCalculationTargetFirst": string;
        "DashboardStringId.DifferenceCalculationTargetLast": string;
        "DashboardStringId.SummaryTypeCount": string;
        "DashboardStringId.SummaryTypeSum": string;
        "DashboardStringId.SummaryTypeMin": string;
        "DashboardStringId.SummaryTypeMax": string;
        "DashboardStringId.SummaryTypeAverage": string;
        "DashboardStringId.SummaryTypeStdDev": string;
        "DashboardStringId.SummaryTypeStdDevp": string;
        "DashboardStringId.SummaryTypeVar": string;
        "DashboardStringId.SummaryTypeVarp": string;
        "DashboardStringId.SummaryTypeCountDistinct": string;
        "DashboardStringId.SummaryTypeMedian": string;
        "DashboardStringId.SummaryTypeMode": string;
        "DashboardStringId.RankTypeUnique": string;
        "DashboardStringId.RankTypeCompetition": string;
        "DashboardStringId.RankTypeDense": string;
        "DashboardStringId.RankTypeModified": string;
        "DashboardStringId.RankTypePercentile": string;
        "DashboardStringId.CardCalculationAlongCards": string;
        "DashboardStringId.CardCalculationAlongSparklineArgument": string;
        "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument": string;
        "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards": string;
        "DashboardStringId.ChartCalculationAlongArguments": string;
        "DashboardStringId.ChartCalculationAlongSeries": string;
        "DashboardStringId.ChartCalculationAlongArgumentsAndSeries": string;
        "DashboardStringId.ChartCalculationAlongSeriesAndArguments": string;
        "DashboardStringId.GridCalculationAlongRows": string;
        "DashboardStringId.GridCalculationAlongSparklineArgument": string;
        "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument": string;
        "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows": string;
        "DashboardStringId.PivotCalculationAlongColumns": string;
        "DashboardStringId.PivotCalculationAlongRows": string;
        "DashboardStringId.PivotCalculationAlongColumnsAndRows": string;
        "DashboardStringId.PivotCalculationAlongRowsAndColumns": string;
        "DashboardStringId.PivotCalculationAlongGroupsInColumns": string;
        "DashboardStringId.PivotCalculationAlongGroupsInRows": string;
        "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows": string;
        "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns": string;
        "DashboardStringId.PieCalculationAlongArguments": string;
        "DashboardStringId.PieCalculationAlongSeries": string;
        "DashboardStringId.PieCalculationAlongArgumentsAndSeries": string;
        "DashboardStringId.PieCalculationAlongSeriesAndArguments": string;
        "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries": string;
        "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument": string;
        "DashboardStringId.GaugeCalculationAlongGauges": string;
        "DashboardStringId.ScatterCalculationAlongArguments": string;
        "DashboardStringId.CalculationAlongSpecificDimensions": string;
        "DashboardStringId.CalculatedFieldTypeString": string;
        "DashboardStringId.CalculatedFieldTypeLong": string;
        "DashboardStringId.CalculatedFieldTypeDecimal": string;
        "DashboardStringId.CalculatedFieldTypeBoolean": string;
        "DashboardStringId.CalculatedFieldTypeDateTime": string;
        "DashboardStringId.CalculatedFieldTypeDouble": string;
        "DashboardStringId.CalculatedFieldTypeAuto": string;
        "DashboardStringId.CalculatedFieldTypeObject": string;
        "DashboardStringId.DefaultEFDataSourceName": string;
        "DashboardStringId.DefaultExcelDataSourceName": string;
        "DashboardStringId.DefaultFileExtractDataSourceName": string;
        "DashboardStringId.DefaultFederationDataSourceName": string;
        "DashboardStringId.DefaultObjectDataSourceName": string;
        "DashboardStringId.DefaultOlapDataSourceName": string;
        "DashboardStringId.DefaultSqlDataSourceName": string;
        "DashboardStringId.DefaultJsonDataSourceName": string;
        "DashboardStringId.DefaultMongoDBDataSourceName": string;
        "DashboardStringId.DefaultXpoDataSourceName": string;
        "DashboardStringId.OlapRaggedHierarchyNoneItemCaption": string;
        "DashboardStringId.FormatRuleApplyToColumn": string;
        "DashboardStringId.SeriesTypeSideBySideRangeBar": string;
        "DashboardStringId.SeriesTypeRangeArea": string;
        "DashboardStringId.SeriesTypeHighLowClose": string;
        "DashboardStringId.SeriesTypeCandleStick": string;
        "DashboardStringId.SeriesTypeStock": string;
        "DashboardWebStringId.StyleSettings": string;
        "DashboardStringId.ParametersFormCalendarTodayButton": string;
        "DashboardStringId.TreemapLabelArgumentTemplate": string;
        "DashboardStringId.TreemapLabelValueTemplate": string;
        "DashboardStringId.SearchNullValuePrompt": string;
        "DashboardStringId.CustomItems": string;
        "DashboardStringId.FormatRuleAllowNegativeAxis": string;
        "DashboardStringId.FormatRuleDrawAxis": string;
        "DashboardStringId.FormatRuleShowBarOnly": string;
        "DashboardStringId.CommandFormatRuleBottomN": string;
        "DashboardStringId.FormatConditionAppearanceNone": string;
        "DashboardStringId.FormatConditionAppearanceCustom": string;
        "DashboardStringId.FormatConditionAppearancePaleRed": string;
        "DashboardStringId.FormatConditionAppearancePaleYellow": string;
        "DashboardStringId.FormatConditionAppearancePaleGreen": string;
        "DashboardStringId.FormatConditionAppearancePaleBlue": string;
        "DashboardStringId.FormatConditionAppearancePalePurple": string;
        "DashboardStringId.FormatConditionAppearancePaleCyan": string;
        "DashboardStringId.FormatConditionAppearancePaleOrange": string;
        "DashboardStringId.FormatConditionAppearancePaleGray": string;
        "DashboardStringId.FormatConditionAppearanceRed": string;
        "DashboardStringId.FormatConditionAppearanceYellow": string;
        "DashboardStringId.FormatConditionAppearanceGreen": string;
        "DashboardStringId.FormatConditionAppearanceBlue": string;
        "DashboardStringId.FormatConditionAppearancePurple": string;
        "DashboardStringId.FormatConditionAppearanceCyan": string;
        "DashboardStringId.FormatConditionAppearanceOrange": string;
        "DashboardStringId.FormatConditionAppearanceGray": string;
        "DashboardStringId.FormatConditionAppearanceGradientRed": string;
        "DashboardStringId.FormatConditionAppearanceGradientYellow": string;
        "DashboardStringId.FormatConditionAppearanceGradientGreen": string;
        "DashboardStringId.FormatConditionAppearanceGradientBlue": string;
        "DashboardStringId.FormatConditionAppearanceGradientPurple": string;
        "DashboardStringId.FormatConditionAppearanceGradientCyan": string;
        "DashboardStringId.FormatConditionAppearanceGradientOrange": string;
        "DashboardStringId.FormatConditionAppearanceGradientTransparent": string;
        "DashboardStringId.FormatConditionAppearanceFontBold": string;
        "DashboardStringId.FormatConditionAppearanceFontItalic": string;
        "DashboardStringId.FormatConditionAppearanceFontUnderline": string;
        "DashboardStringId.FormatConditionAppearanceFontGrayed": string;
        "DashboardStringId.FormatConditionAppearanceFontRed": string;
        "DashboardStringId.FormatConditionAppearanceFontYellow": string;
        "DashboardStringId.FormatConditionAppearanceFontGreen": string;
        "DashboardStringId.FormatConditionAppearanceFontBlue": string;
        "DashboardStringId.IntersectionLevelModeFirst": string;
        "DashboardStringId.IntersectionLevelModeLast": string;
        "DashboardStringId.IntersectionLevelModeAuto": string;
        "DashboardStringId.IntersectionLevelModeAll": string;
        "DashboardStringId.IntersectionLevelModeSpecific": string;
        "DashboardStringId.FormatRuleApplyToRow": string;
        "DashboardStringId.FormatRuleApplyTo": string;
        "DashboardStringId.FormatRuleApplyToChartElement": string;
        "DashboardStringId.ChartElementPointCaption": string;
        "DashboardStringId.ChartElementLineOrAreaCaption": string;
        "DashboardWebStringId.FilterItem.AllowEmptyFilter": string;
        "DashboardStringId.FormatConditionAppearanceFontStrikeout": string;
        "DashboardStringId.FormatConditionAutomaticValueType": string;
        "DashboardStringId.FormatConditionNumberValueType": string;
        "DashboardStringId.FormatConditionPercentValueType": string;
        "DashboardStringId.CommandFormatRuleRangeIcons": string;
        "DashboardStringId.CommandFormatRuleGreaterThan": string;
        "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo": string;
        "DashboardStringId.CommandFormatRuleLessThan": string;
        "DashboardStringId.CommandFormatRuleLessThanOrEqualTo": string;
        "DashboardStringId.CommandFormatRuleEqualTo": string;
        "DashboardStringId.CommandFormatRuleNotEqualTo": string;
        "DashboardStringId.CommandFormatRuleBetween": string;
        "DashboardStringId.CommandFormatRuleNotBetween": string;
        "DashboardStringId.CommandFormatRuleBetweenOrEqual": string;
        "DashboardStringId.CommandFormatRuleNotBetweenOrEqual": string;
        "DashboardStringId.CommandFormatRuleContains": string;
        "DashboardStringId.ColorAutoAssigned": string;
        "DashboardStringId.CalculationTypeNone": string;
        "DashboardStringId.UndoText": string;
        "DashboardStringId.RedoText": string;
        "DashboardStringId.DashboardCurrencyUseCurrentCurrency": string;
        "DashboardStringId.CommandDimensionSortModeDisplayText": string;
        "DashboardStringId.CommandDimensionSortModeValue": string;
        "DashboardStringId.CommandDimensionSortModeID": string;
        "DashboardStringId.CommandDimensionSortModeKey": string;
        "DashboardWebStringId.Chart.AddPane": string;
        "DashboardStringId.MapShapeNoneAttribute": string;
        "DashboardStringId.DefaultPeriodName": string;
        "DashboardStringId.CardLayoutTemplateStretchedCaption": string;
        "DashboardStringId.CardLayoutTemplateCenteredCaption": string;
        "DashboardStringId.CardLayoutTemplateCompactCaption": string;
        "DashboardStringId.CardLayoutTemplateLightweightCaption": string;
        "DashboardStringId.CardLayoutTemplateCustomCaption": string;
        "DashboardStringId.CardLayoutTemplateNoneCaption": string;
        "DashboardStringId.CardRowDataElementTypeTitleCaption": string;
        "DashboardStringId.CardRowDataElementTypeSubtitleCaption": string;
        "DashboardStringId.CardRowDataElementTypeActualValueCaption": string;
        "DashboardStringId.CardRowDataElementTypeTargetValueCaption": string;
        "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption": string;
        "DashboardStringId.CardRowDataElementTypePercentVariationCaption": string;
        "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption": string;
        "DashboardStringId.CardRowDataElementTypeDimensionValueCaption": string;
        "DashboardStringId.CardRowDataElementTypeCardNameCaption": string;
        "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption": string;
        "DashboardStringId.CardRowDataElementTypeSparklineCaption": string;
        "DashboardStringId.FormatRuleApplyToAllElements": string;
        "DashboardWebStringId.FormatRuleApplyToDimensionElement": string;
        "DashboardWebStringId.FormatRuleApplyToTextElement": string;
        "DashboardStringId.FormatRuleDisplayInLegend": string;
        "DashboardStringId.FormatRuleDisplayName": string;
        "DashboardStringId.LegendItemFormatString": string;
        "DashboardWebStringId.Pie.LabelPosition": string;
        "DashboardWebStringId.Pie.LabelPositionOutside": string;
        "DashboardWebStringId.Pie.LabelPositionInside": string;
        "DashboardStringId.IncludeExportDashboardState": string;
        "DashboardStringId.PointLabelContentTypeArgument": string;
        "DashboardStringId.PointLabelContentTypeSeriesName": string;
        "DashboardStringId.PointLabelContentTypeValue": string;
        "DashboardStringId.PointLabelContentTypePercent": string;
        "DashboardWebStringId.DashboardMenu": string;
        "DashboardWebStringId.DashboardMenuNew": string;
        "DashboardWebStringId.DashboardMenuOpen": string;
        "DashboardWebStringId.DashboardMenuSave": string;
        "DashboardWebStringId.DashboardMenuCurrency": string;
        "DashboardWebStringId.DashboardMenuDataSources": string;
        "DashboardWebStringId.DashboardMenuColorScheme": string;
        "DashboardWebStringId.DashboardMenuNewDashboardCreate": string;
        "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder": string;
        "DashboardWebStringId.Binding.DefaultEmptyPlaceholder": string;
        "DashboardWebStringId.Binding.DefaultSelectedPlaceholder": string;
        "DashboardWebStringId.Binding.DataSource": string;
        "DashboardWebStringId.Binding.Argument": string;
        "DashboardWebStringId.Binding.Attribute": string;
        "DashboardWebStringId.Binding.Sparkline": string;
        "DashboardWebStringId.Binding.Columns": string;
        "DashboardWebStringId.Binding.TooltipDimensions": string;
        "DashboardWebStringId.Binding.TooltipMeasures": string;
        "DashboardWebStringId.Binding.HiddenDimensions": string;
        "DashboardWebStringId.Binding.HiddenMeasures": string;
        "DashboardWebStringId.Binding.AddDimension": string;
        "DashboardWebStringId.Binding.AddMeasure": string;
        "DashboardWebStringId.Binding.AddColumn": string;
        "DashboardWebStringId.Binding.AddRow": string;
        "DashboardWebStringId.Binding.AddValue": string;
        "DashboardWebStringId.Binding.AddSeries": string;
        "DashboardWebStringId.Binding.SetLatitude": string;
        "DashboardWebStringId.Binding.SetLongitude": string;
        "DashboardWebStringId.Binding.SetArgument": string;
        "DashboardWebStringId.Binding.AddArgument": string;
        "DashboardWebStringId.Binding.SetWeight": string;
        "DashboardWebStringId.Binding.SetColor": string;
        "DashboardWebStringId.Binding.SetAttribute": string;
        "DashboardWebStringId.Binding.SetValue": string;
        "DashboardWebStringId.Binding.XAxis": string;
        "DashboardWebStringId.Binding.YAxis": string;
        "DashboardWebStringId.Binding.ConfigureDimension": string;
        "DashboardWebStringId.Binding.ConfigureMeasure": string;
        "DashboardWebStringId.Binding.ConfigureSeries": string;
        "DashboardWebStringId.Binding.ConfigureArgument": string;
        "DashboardWebStringId.Binding.ConfigureValue": string;
        "DashboardWebStringId.Binding.ConfigureAttribute": string;
        "DashboardWebStringId.Binding.ConfigureLatitude": string;
        "DashboardWebStringId.Binding.ConfigureLongitude": string;
        "DashboardWebStringId.Binding.ConfigureColumn": string;
        "DashboardWebStringId.Binding.ConfigureRow": string;
        "DashboardWebStringId.Binding.ConfigureWeight": string;
        "DashboardWebStringId.Binding.ConfigureColor": string;
        "DashboardWebStringId.Binding.ShowAll": string;
        "DashboardWebStringId.ColorScheme.Color": string;
        "DashboardWebStringId.ColorScheme.Colors": string;
        "DashboardWebStringId.Parameters.ParameterList": string;
        "DashboardWebStringId.Parameters.AddParameter": string;
        "DashboardWebStringId.Parameters.AddParameter.Tooltip": string;
        "DashboardWebStringId.Parameters.NoSelectedParameter": string;
        "DashboardWebStringId.Parameters.Reorder": string;
        "DashboardWebStringId.Parameters.Done": string;
        "DashboardWebStringId.Currency.Currency": string;
        "DashboardWebStringId.Currency.CurrencyCulture": string;
        "DashboardWebStringId.Currency.DefaultCurrencyWarning": string;
        "DashboardWebStringId.Preview": string;
        "DashboardWebStringId.Add": string;
        "DashboardWebStringId.DataSources.UsedDataSources": string;
        "DashboardWebStringId.DataSources.DataItems": string;
        "DashboardWebStringId.DataSources.AddQuery": string;
        "DashboardWebStringId.DataSources.ManageQueries": string;
        "DashboardWebStringId.DataSources.AddCalculatedField": string;
        "DashboardWebStringId.DataSources.AddDataSource": string;
        "DashboardWebStringId.DataSources.RenameDataSource": string;
        "DashboardWebStringId.DataSources.NoUsedDataSources": string;
        "DashboardWebStringId.DataSources.NoAvailableDataSources": string;
        "DashboardWebStringId.DataSources.ChooseDataSource": string;
        "DashboardWebStringId.DataSources.CreateDataSource": string;
        "DashboardWebStringId.DataSources.CreateNewDataSource": string;
        "DashboardWebStringId.DataSources.CreateDataSource.Tooltip": string;
        "DashboardWebStringId.DataSources.EditCalculatedField": string;
        "DashboardWebStringId.DataSources.CalculatedField.Name": string;
        "DashboardWebStringId.DataSources.CalculatedField.FieldType": string;
        "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError": string;
        "DashboardWebStringId.DataSources.CalculatedField.Corrupted": string;
        "DashboardWebStringId.DataSources.Edit": string;
        "DashboardWebStringId.DataSources.Rename": string;
        "DashboardWebStringId.DataSources.NewDataSourceName": string;
        "DashboardWebStringId.DataSources.DataSourceNameExistsMessage": string;
        "DashboardStringId.MessageCollectionTypesNotSupported": string;
        "DashboardWebStringId.New.DashboardName": string;
        "DashboardWebStringId.Bindings": string;
        "DashboardWebStringId.Interactivity": string;
        "DashboardWebStringId.Filters": string;
        "DashboardWebStringId.Options": string;
        "DashboardWebStringId.Remove": string;
        "DashboardWebStringId.MasterFilterMode": string;
        "DashboardWebStringId.Title.Text": string;
        "DashboardWebStringId.Title.Visible": string;
        "DashboardWebStringId.Title.IncludeMasterFilter": string;
        "DashboardWebStringId.Title.Aligment": string;
        "DashboardWebStringId.Title.Image": string;
        "DashboardWebStringId.DataSources.Cancel": string;
        "DashboardWebStringId.DataSources.IncludeToTheDashboard": string;
        "DashboardWebStringId.DataSources.AvailableDataSourcesError": string;
        "DashboardWebStringId.DataSources.DashboardDataSourceWizard": string;
        "DashboardWebStringId.Viewer": string;
        "DashboardWebStringId.Loading": string;
        "DashboardWebStringId.ClickHereInvitation": string;
        "DashboardWebStringId.BindDataInvitation": string;
        "DashboardWebStringId.AddItemInvitation": string;
        "DashboardWebStringId.Parameters.Values": string;
        "DashboardWebStringId.Binding.Cards": string;
        "DashboardWebStringId.Binding.AddCard": string;
        "DashboardWebStringId.Binding.ConfigureCard": string;
        "DashboardWebStringId.Binding.AddValues": string;
        "DashboardWebStringId.Binding.ConfigureValues": string;
        "DashboardWebStringId.Binding.Maps": string;
        "DashboardWebStringId.Binding.AddMap": string;
        "DashboardWebStringId.Binding.ConfigureMap": string;
        "DashboardWebStringId.Binding.Gauges": string;
        "DashboardWebStringId.Binding.AddGauge": string;
        "DashboardWebStringId.Binding.ConfigureGauge": string;
        "DashboardWebStringId.InteractivityOptions": string;
        "DashboardWebStringId.Binding.Values": string;
        "DashboardWebStringId.Binding.RemovePane": string;
        "DashboardWebStringId.ClickToSetFilterCriteria": string;
        "DashboardWebStringId.DataSources.OK": string;
        "DashboardWebStringId.DataSources.Save": string;
        "DashboardWebStringId.Cards.ArrangementMode": string;
        "DashboardWebStringId.Cards.ArrangementMode.Auto": string;
        "DashboardWebStringId.Cards.ArrangementMode.FixedRows": string;
        "DashboardWebStringId.Cards.ArrangementMode.FixedColumns": string;
        "DashboardWebStringId.Cards.LineCount": string;
        "DashboardWebStringId.ConditionalFormatting": string;
        "DashboardWebStringId.CollectionEditor.NoItems": string;
        "DashboardWebStringId.CollectionEditor.Totals.NoItems": string;
        "DashboardWebStringId.CollectionEditor.Parameters.NoItems": string;
        "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups": string;
        "DashboardWebStringId.PivotGrid.AutoExpandRowGroups": string;
        "DashboardWebStringId.PivotGrid.ColumnGrandTotals": string;
        "DashboardWebStringId.PivotGrid.RowGrandTotals": string;
        "DashboardWebStringId.PivotGrid.ColumnTotals": string;
        "DashboardWebStringId.PivotGrid.RowTotals": string;
        "DashboardWebStringId.PivotGrid.ValuesPosition": string;
        "DashboardWebStringId.PivotGrid.ValuesPositionColumns": string;
        "DashboardWebStringId.PivotGrid.ValuesPositionRows": string;
        "DashboardWebStringId.PivotGrid.RowTotalsPosition": string;
        "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom": string;
        "DashboardWebStringId.PivotGrid.RowTotalsPositionTop": string;
        "DashboardWebStringId.PivotGrid.ColumnTotalsPosition": string;
        "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar": string;
        "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear": string;
        "DashboardWebStringId.PivotGrid.LayoutType": string;
        "DashboardWebStringId.PivotGrid.LayoutTypeCompact": string;
        "DashboardWebStringId.PivotGrid.LayoutTypeTabular": string;
        "DashboardWebStringId.Options.Caption": string;
        "DashboardWebStringId.InteractivityOptions.IsMasterFilter": string;
        "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None": string;
        "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single": string;
        "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple": string;
        "DashboardWebStringId.InteractivityOptions.TargetDimensions": string;
        "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments": string;
        "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series": string;
        "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points": string;
        "DashboardWebStringId.ColoringOptions": string;
        "DashboardWebStringId.DataSources.Filter": string;
        "DashboardWebStringId.Chart.Rotated": string;
        "DashboardWebStringId.Chart.Panes": string;
        "DashboardWebStringId.Chart.Legend": string;
        "DashboardWebStringId.Chart.AxisX": string;
        "DashboardWebStringId.Chart.AxisY": string;
        "DashboardWebStringId.Chart.AxisYSecondary": string;
        "DashboardWebStringId.Chart.PointLabelOptions": string;
        "DashboardWebStringId.Chart.AxisXMeasure": string;
        "DashboardWebStringId.Chart.AxisYMeasure": string;
        "DashboardWebStringId.Chart.Weight": string;
        "DashboardWebStringId.Chart.Content": string;
        "DashboardWebStringId.Chart.ArgumentAndWeight": string;
        "DashboardWebStringId.Chart.ArgumentAndValues": string;
        "DashboardWebStringId.Chart.Reverse": string;
        "DashboardWebStringId.Chart.Visible": string;
        "DashboardWebStringId.Chart.Title": string;
        "DashboardWebStringId.Chart.TitleText": string;
        "DashboardWebStringId.Chart.EnableZooming": string;
        "DashboardWebStringId.Chart.LimitVisiblePoints": string;
        "DashboardWebStringId.Chart.VisiblePointsCount": string;
        "DashboardWebStringId.Chart.AlwaysShowZeroLevel": string;
        "DashboardWebStringId.Chart.GridLines": string;
        "DashboardWebStringId.Chart.LogarithmicScale": string;
        "DashboardWebStringId.Chart.LogarithmicScaleBase": string;
        "DashboardWebStringId.Chart.LogarithmicScaleBase2": string;
        "DashboardWebStringId.Chart.LogarithmicScaleBase5": string;
        "DashboardWebStringId.Chart.LogarithmicScaleBase10": string;
        "DashboardWebStringId.Chart.Position": string;
        "DashboardWebStringId.Chart.IsInsideOfDiagram": string;
        "DashboardWebStringId.Chart.PrimaryAxisY": string;
        "DashboardWebStringId.Chart.SecondaryAxisY": string;
        "DashboardWebStringId.Chart.Name": string;
        "DashboardWebStringId.Chart.PlotOnSecondaryAxis": string;
        "DashboardWebStringId.Chart.IgnoreEmptyPoints": string;
        "DashboardWebStringId.Chart.ShowPointMarkers": string;
        "DashboardWebStringId.Chart.Value": string;
        "DashboardWebStringId.Chart.ShowZeroValues": string;
        "DashboardWebStringId.Chart.OverlappingMode": string;
        "DashboardWebStringId.Chart.Orientation": string;
        "DashboardWebStringId.Chart.ShowPointLablels": string;
        "DashboardWebStringId.Chart.TooltipContent": string;
        "DashboardWebStringId.Chart.LabelContent": string;
        "DashboardWebStringId.Card.SparklineOptions": string;
        "DashboardWebStringId.Card.SparklineVisible": string;
        "DashboardWebStringId.Chart.Position.TopLeftVertical": string;
        "DashboardWebStringId.Chart.Position.TopLeftHorizontal": string;
        "DashboardWebStringId.Chart.Position.TopCenterHorizontal": string;
        "DashboardWebStringId.Chart.Position.TopRightVertical": string;
        "DashboardWebStringId.Chart.Position.TopRightHorizontal": string;
        "DashboardWebStringId.Chart.Position.BottomLeftVertical": string;
        "DashboardWebStringId.Chart.Position.BottomLeftHorizontal": string;
        "DashboardWebStringId.Chart.Position.BottomCenterHorizontal": string;
        "DashboardWebStringId.Chart.Position.BottomRightVertical": string;
        "DashboardWebStringId.Chart.Position.BottomRightHorizontal": string;
        "DashboardWebStringId.Chart.Position.TopCenterVertical": string;
        "DashboardWebStringId.Chart.Position.BottomCenterVertical": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.Empty": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.Solid": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.Dash": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.Dot": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot": string;
        "DashboardWebStringId.Chart.Indicator.Type": string;
        "DashboardWebStringId.Chart.Indicator.Type.Regression": string;
        "DashboardWebStringId.Chart.Indicator.Type.Trend": string;
        "DashboardWebStringId.Chart.Indicator.LegendText": string;
        "DashboardWebStringId.Chart.Indicator.ShowInLegend": string;
        "DashboardWebStringId.Chart.Indicator.Thickness": string;
        "DashboardWebStringId.Chart.Indicator.ValueLevel": string;
        "DashboardWebStringId.Chart.Indicator.ValueLevel.Value": string;
        "DashboardWebStringId.Chart.Indicator.Visible": string;
        "DashboardWebStringId.Chart.Indicator.Color": string;
        "DashboardWebStringId.Chart.Indicator.Value": string;
        "DashboardWebStringId.Chart.Indicators": string;
        "DashboardWebStringId.Chart.IndicatorSettings": string;
        "DashboardWebStringId.FilterItem.Type": string;
        "DashboardWebStringId.FilterItem.Type.Standard": string;
        "DashboardWebStringId.FilterItem.Type.Checked": string;
        "DashboardWebStringId.FilterItem.Type.Radio": string;
        "DashboardWebStringId.FilterItem.ShowAllValue": string;
        "DashboardWebStringId.FilterItem.EnableSearch": string;
        "DashboardWebStringId.Gauge.Min": string;
        "DashboardWebStringId.Gauge.Max": string;
        "DashboardWebStringId.Gauge.ScaleOptions": string;
        "DashboardWebStringId.Gauge.Type": string;
        "DashboardWebStringId.Gauge.Type.FullQuarterGauge": string;
        "DashboardWebStringId.Gauge.Type.HalfCircular": string;
        "DashboardWebStringId.Gauge.Type.LeftQuarterCircular": string;
        "DashboardWebStringId.Gauge.Type.RightQuarterCircular": string;
        "DashboardWebStringId.Gauge.Type.ThreeFourthCircular": string;
        "DashboardWebStringId.Gauge.Type.LinearHorizontal": string;
        "DashboardWebStringId.Gauge.Type.LinearVertical": string;
        "DashboardWebStringId.Gauge.Captions": string;
        "DashboardWebStringId.Gauge.Scale.Custom": string;
        "DashboardWebStringId.Gauge.Scale.Auto": string;
        "DashboardWebStringId.Grid.ColumnType": string;
        "DashboardWebStringId.Grid.DisplayMode": string;
        "DashboardWebStringId.Grid.DisplayMode.Value": string;
        "DashboardWebStringId.Grid.DisplayMode.Bar": string;
        "DashboardWebStringId.Grid.DisplayMode.Text": string;
        "DashboardWebStringId.Grid.DisplayMode.Image": string;
        "DashboardWebStringId.Grid.FixedWidth": string;
        "DashboardWebStringId.Grid.WidthType": string;
        "DashboardWebStringId.Grid.WidthType.Weight": string;
        "DashboardWebStringId.Grid.WidthType.FitToContent": string;
        "DashboardWebStringId.Grid.DeltaOptions": string;
        "DashboardWebStringId.Grid.ShowStartEndValues": string;
        "DashboardWebStringId.Grid.TotalType": string;
        "DashboardWebStringId.Grid.Dimension": string;
        "DashboardWebStringId.Grid.Measure": string;
        "DashboardWebStringId.Grid.Delta": string;
        "DashboardWebStringId.Grid.Sparkline": string;
        "DashboardWebStringId.Grid.Hyperlink": string;
        "DashboardWebStringId.Grid.Options": string;
        "DashboardWebStringId.Map.ShapeFileLoaded": string;
        "DashboardWebStringId.Map.AttributeFileLoaded": string;
        "DashboardWebStringId.Map.ValueMap": string;
        "DashboardWebStringId.Map.DeltaMap": string;
        "DashboardWebStringId.Map.TooltipCaption": string;
        "DashboardWebStringId.Map.TooltipActualValueCaption": string;
        "DashboardWebStringId.Map.TooltipDeltaCaption": string;
        "DashboardWebStringId.Map.CustomMapOptions": string;
        "DashboardWebStringId.Map.CustomMapOptionsSource": string;
        "DashboardWebStringId.Map.CustomMapOptionsUrl": string;
        "DashboardWebStringId.Map.CustomMapOptionsFile": string;
        "DashboardWebStringId.Map.CustomMapUrl": string;
        "DashboardWebStringId.Map.CustomMapFile": string;
        "DashboardWebStringId.Map.CustomAttributeFile": string;
        "DashboardWebStringId.Map.AttributeDimension": string;
        "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle": string;
        "DashboardWebStringId.Map.AttributeName": string;
        "DashboardWebStringId.Map.TooltipAttribute": string;
        "DashboardWebStringId.Map.TooltipDimensions": string;
        "DashboardWebStringId.Map.Area.Custom": string;
        "DashboardWebStringId.Map.Area.WorldCountries": string;
        "DashboardWebStringId.Map.Area.Europe": string;
        "DashboardWebStringId.Map.Area.Asia": string;
        "DashboardWebStringId.Map.Area.NorthAmerica": string;
        "DashboardWebStringId.Map.Area.SouthAmerica": string;
        "DashboardWebStringId.Map.Area.Africa": string;
        "DashboardWebStringId.Map.Area.USA": string;
        "DashboardWebStringId.Map.Area.Canada": string;
        "DashboardWebStringId.Map.Viewport": string;
        "DashboardWebStringId.Map.ShapeTitleAttribute": string;
        "DashboardWebStringId.Map.UseBindingAttribute": string;
        "DashboardWebStringId.Map.WeightedLegendType": string;
        "DashboardWebStringId.Map.WeightedLegendType.Linear": string;
        "DashboardWebStringId.Map.WeightedLegendType.Nested": string;
        "DashboardWebStringId.Map.Orientation.Vertical": string;
        "DashboardWebStringId.Map.Orientation.Horizontal": string;
        "DashboardWebStringId.Map.Position.TopLeft": string;
        "DashboardWebStringId.Map.Position.TopCenter": string;
        "DashboardWebStringId.Map.Position.TopRight": string;
        "DashboardWebStringId.Map.Position.BottomLeft": string;
        "DashboardWebStringId.Map.Position.BottomCenter": string;
        "DashboardWebStringId.Map.Position.BottomRight": string;
        "DashboardWebStringId.Map.Viewport.TopLatitude": string;
        "DashboardWebStringId.Map.Viewport.LeftLongitude": string;
        "DashboardWebStringId.Map.Viewport.RightLongitude": string;
        "DashboardWebStringId.Map.Viewport.BottomLatitude": string;
        "DashboardWebStringId.Map.Viewport.CenterPointLatitude": string;
        "DashboardWebStringId.Map.Viewport.CenterPointLongitude": string;
        "DashboardWebStringId.Map.Viewport.CreateViewerPaddings": string;
        "DashboardWebStringId.Map.ShowLegend": string;
        "DashboardWebStringId.Map.ShowWeightedLegend": string;
        "DashboardWebStringId.Pie.Type": string;
        "DashboardWebStringId.Pie": string;
        "DashboardWebStringId.Pie.Donut": string;
        "DashboardWebStringId.Pie.LabelContentType.None": string;
        "DashboardWebStringId.Pie.LabelContentType.Argument": string;
        "DashboardWebStringId.Pie.LabelContentType.Percent": string;
        "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent": string;
        "DashboardWebStringId.Pie.LabelContentType.Value": string;
        "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue": string;
        "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent": string;
        "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent": string;
        "DashboardWebStringId.Image.BindingMode": string;
        "DashboardWebStringId.Image.BindingMode.BinaryArray": string;
        "DashboardWebStringId.Image.BindingMode.Uri": string;
        "DashboardWebStringId.RangeFilter.UriPattern": string;
        "DashboardWebStringId.Image.SizeMode.Clip": string;
        "DashboardWebStringId.Image.SizeMode.Stretch": string;
        "DashboardWebStringId.Image.SizeMode.Zoom": string;
        "DashboardWebStringId.Image.SizeMode.Squeeze": string;
        "DashboardWebStringId.Image.HorizontalAlignment": string;
        "DashboardWebStringId.Image.VerticalAlignment": string;
        "DashboardWebStringId.Image.Alignment.Left": string;
        "DashboardWebStringId.Image.Alignment.Center": string;
        "DashboardWebStringId.Image.Alignment.Right": string;
        "DashboardWebStringId.Image.Alignment.Top": string;
        "DashboardWebStringId.Image.Alignment.Bottom": string;
        "DashboardWebStringId.SeriesItem.SeriesDimensions": string;
        "DashboardWebStringId.TextBox.Text": string;
        "DashboardWebStringId.Chart.Orientation.Default": string;
        "DashboardWebStringId.Chart.Orientation.RotateRight": string;
        "DashboardWebStringId.Chart.Orientation.RotateLeft": string;
        "DashboardWebStringId.Chart.OverlappingMode.Hide": string;
        "DashboardWebStringId.Chart.OverlappingMode.None": string;
        "DashboardWebStringId.Chart.Position.Outside": string;
        "DashboardWebStringId.Chart.Position.Inside": string;
        "DashboardWebStringId.Chart.SeriesType.Weighted": string;
        "DashboardWebStringId.Coloring.MeasuresColoringMode": string;
        "DashboardWebStringId.Coloring.Global": string;
        "DashboardWebStringId.Coloring.Local": string;
        "DashboardWebStringId.Delta.ValueType": string;
        "DashboardWebStringId.Delta.ResultIndication": string;
        "DashboardWebStringId.Delta.ThresholdType": string;
        "DashboardWebStringId.Delta.ThresholdValue": string;
        "DashboardWebStringId.Sparkline.ViewType": string;
        "DashboardWebStringId.Sparkline.HighlightMinMaxPoints": string;
        "DashboardWebStringId.Sparkline.HighlightStartEndPoints": string;
        "DashboardWebStringId.Title.Aligment.Left": string;
        "DashboardWebStringId.Title.Aligment.Center": string;
        "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp": string;
        "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList": string;
        "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList": string;
        "DashboardWebStringId.Parameters.LookUpSettingsType": string;
        "DashboardWebStringId.Parameters.DefaultValue": string;
        "DashboardWebStringId.DataItem": string;
        "DashboardWebStringId.DataItem.Precision": string;
        "DashboardWebStringId.DataItem.IncludeGroupSeparator": string;
        "DashboardWebStringId.DataItem.ShowValues": string;
        "DashboardWebStringId.DataItem.ShowTotals": string;
        "DashboardWebStringId.DataItem.ShowGrandTotals": string;
        "DashboardWebStringId.Dialog.ConfirmSaving": string;
        "DashboardWebStringId.Dialog.Warning": string;
        "DashboardWebStringId.Dimension.GroupInterval": string;
        "DashboardWebStringId.Dimension.SortMode": string;
        "DashboardWebStringId.Dialog.ArgumentMode": string;
        "DashboardWebStringId.Calculations": string;
        "DashboardWebStringId.Calculations.Expression": string;
        "DashboardWebStringId.Calculations.DifferenceCalculation": string;
        "DashboardWebStringId.Calculations.Moving": string;
        "DashboardWebStringId.Calculations.RunningTotal": string;
        "DashboardWebStringId.Calculations.PercentOfTotal": string;
        "DashboardWebStringId.Calculations.Rank": string;
        "DashboardWebStringId.Calculations.DefinitionMode": string;
        "DashboardWebStringId.Calculations.WindowDefinition": string;
        "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific": string;
        "DashboardWebStringId.Calculations.WindowDefinitionModePredefined": string;
        "DashboardWebStringId.Calculations.DifferenceType": string;
        "DashboardWebStringId.TreemapLayoutAlgorithm": string;
        "DashboardWebStringId.TilesLabelContentType": string;
        "DashboardWebStringId.TilesTooltipContentType": string;
        "DashboardWebStringId.GroupsLabelContentType": string;
        "DashboardWebStringId.GroupsTooltipContentType": string;
        "DashboardWebStringId.ShowOthersValue": string;
        "DashboardWebStringId.TopNEnabled": string;
        "DashboardWebStringId.Parameters.StaticListLookUpSettings": string;
        "DashboardWebStringId.Parameters.DynamicListLookUpSettings": string;
        "DashboardWebStringId.ConvertTo": string;
        "DashboardWebStringId.Duplicate": string;
        "DashboardWebStringId.DataSourceWizard": string;
        "DashboardWebStringId.RangeFilter.CustomPeriods": string;
        "DashboardWebStringId.RangeFilter.StartMode": string;
        "DashboardWebStringId.RangeFilter.EndMode": string;
        "DashboardWebStringId.RangeFilter.StartIntervalAndOffset": string;
        "DashboardWebStringId.RangeFilter.EndIntervalAndOffset": string;
        "DashboardWebStringId.RangeFilter.StartDate": string;
        "DashboardWebStringId.RangeFilter.EndDate": string;
        "DashboardWebStringId.RangeFilter.None": string;
        "DashboardWebStringId.RangeFilter.Fixed": string;
        "DashboardWebStringId.RangeFilter.Flow": string;
        "DashboardWebStringId.Tabs.Binding": string;
        "DashboardWebStringId.Tabs.DataShaping": string;
        "DashboardWebStringId.Tabs.Format": string;
        "DashboardWebStringId.Calculations.Types.Moving": string;
        "DashboardWebStringId.Parameters.SortByMember": string;
        "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption": string;
        "DashboardWebStringId.Dashboard.Items": string;
        "DashboardWebStringId.Dashboard.Groups": string;
        "DashboardWebStringId.Dashboard.LayoutItems": string;
        "DashboardWebStringId.Dashboard.ComponentName": string;
        "DashboardWebStringId.ButtonConfirm": string;
        "DashboardWebStringId.Colorization.GroupInterval": string;
        "DashboardWebStringId.ButtonOn": string;
        "DashboardWebStringId.ButtonOff": string;
        "DashboardWebStringId.ButtonYes": string;
        "DashboardWebStringId.ButtonNo": string;
        "DashboardWebStringId.ButtonDiscrete": string;
        "DashboardWebStringId.ButtonContinuous": string;
        "DashboardWebStringId.ButtonVisible": string;
        "DashboardWebStringId.ButtonHidden": string;
        "DashboardWebStringId.Calculations.PreviousValuesCount": string;
        "DashboardWebStringId.Calculations.NextValuesCount": string;
        "DashboardWebStringId.Calculations.RankType": string;
        "DashboardWebStringId.Calculations.RankOrder": string;
        "DashboardWebStringId.TileOptions": string;
        "DashboardWebStringId.MapLockNavigationLocked": string;
        "DashboardWebStringId.MapLockNavigationUnlocked": string;
        "DashboardWebStringId.ConditionalFormatting.BarOptions": string;
        "DashboardWebStringId.ConditionalFormatting.CalculatedBy": string;
        "DashboardWebStringId.ConditionalFormatting.IconType": string;
        "DashboardStringId.FormatRulePredefinedColor": string;
        "DashboardStringId.FormatRuleCustomColor": string;
        "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption": string;
        "DashboardWebStringId.FormatConditionCustomAppearanceCaption": string;
        "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption": string;
        "DashboardWebStringId.EditorAutomaticValue": string;
        "DashboardWebStringId.ConditionalFormatting.Save": string;
        "DashboardWebStringId.ConditionalFormatting.AppearanceType": string;
        "DashboardWebStringId.ConditionalFormatting.FontStyle": string;
        "DashboardWebStringId.ConditionalFormatting.FontFamily": string;
        "DashboardWebStringId.ConditionalFormatting.FontRegular": string;
        "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.None": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag": string;
        "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension": string;
        "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension": string;
        "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode": string;
        "DashboardWebStringId.ConditionalFormatting.GradientRangeBar": string;
        "DashboardWebStringId.ConditionalFormatting.RangeGradient": string;
        "DashboardWebStringId.ConditionalFormatting.SegmentNumber": string;
        "DashboardWebStringId.ConditionalFormatting.ValueComparison": string;
        "DashboardWebStringId.ConditionalFormatting.Ranges": string;
        "DashboardWebStringId.ConditionalFormatting.AverageType": string;
        "DashboardWebStringId.ConditionalFormatting.Above": string;
        "DashboardWebStringId.ConditionalFormatting.AboveOrEqual": string;
        "DashboardWebStringId.ConditionalFormatting.Below": string;
        "DashboardWebStringId.ConditionalFormatting.BelowOrEqual": string;
        "DashboardWebStringId.ConditionalFormatting.StyleSettingsType": string;
        "DashboardWebStringId.ConditionalFormatting.Positive": string;
        "DashboardWebStringId.ConditionalFormatting.Negative": string;
        "DashboardWebStringId.ConditionalFormatting.MinimumType": string;
        "DashboardWebStringId.ConditionalFormatting.MaximumType": string;
        "DashboardWebStringId.ConditionalFormatting.DateType": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear": string;
        "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem": string;
        "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard": string;
        "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue": string;
        "DashboardWebStringId.Colorization.NoSelectedSchema": string;
        "DashboardWebStringId.Colorization.ColorSchemes": string;
        "DashboardWebStringId.LayoutHasBeenChangedDialogMessage": string;
        "DashboardWebStringId.SaveConfirmationDialogMessage": string;
        "DashboardWebStringId.SaveChangesDialogMessage": string;
        "DashboardWebStringId.Dialog.Save": string;
        "DashboardWebStringId.Dialog.DoNotSave": string;
        "DashboardWebStringId.Dialog.UnsupportedCalculatedField": string;
        "DashboardWebStringId.Colorization.ColorSchemeType": string;
        "DashboardWebStringId.Colorization.MeasureNames": string;
        "DashboardWebStringId.Colorization.AddColor": string;
        "DashboardWebStringId.Colorization.ValidationSelectMeasure": string;
        "DashboardWebStringId.ColoringModeAuto": string;
        "DashboardWebStringId.ColoringModeOff": string;
        "DashboardWebStringId.ColoringModeOn": string;
        "DashboardWebStringId.ColorScheme.Empty": string;
        "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton": string;
        "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip": string;
        "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage": string;
        "DashboardWebStringId.ConditionalFormatting.Miscellaneous": string;
        "DashboardWebStringId.Dashboards": string;
        "DashboardWebStringId.EditInDesigner": string;
        "DashboardWebStringId.NoDashboards": string;
        "DashboardWebStringId.AddNewDashboard": string;
        "DashboardWebStringId.NewDashboard": string;
        "DashboardWebStringId.Binding.Searching": string;
        "DashboardWebStringId.Binding.EmptySearchResult": string;
        "DashboardWebStringId.Errors.AttemptToLoadData": string;
        "DashboardWebStringId.ConditionType": string;
        "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType": string;
        "DashboardWebStringId.FormatRule": string;
        "DashboardWebStringId.Notification.DashboardSaving": string;
        "DashboardWebStringId.Notification.DashboardSaved": string;
        "DashboardWebStringId.Notification.DashboardCanNotBeSaved": string;
        "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable": string;
        "DashboardWebStringId.Notification.AttemptToLoadDashboards": string;
        "DashboardWebStringId.Notification.DashboardLoading": string;
        "DashboardWebStringId.Notification.AttemptToLoadDashboard": string;
        "DashboardWebStringId.Notification.AttemptToConnectionStrings": string;
        "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode": string;
        "DashboardWebStringId.Notification.AttemptToLoadParameterValues": string;
        "DashboardWebStringId.Notification.AttemptToGetUnderlyingData": string;
        "DashboardWebStringId.Notification.AttemptToConvertItemToType": string;
        "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues": string;
        "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource": string;
        "DashboardWebStringId.Notification.AttemptToGetColorScheme": string;
        "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies": string;
        "DashboardWebStringId.Notification.AttemptToPerformExport": string;
        "DashboardWebStringId.Notification.NewDashboardCannotBeCreated": string;
        "DashboardWebStringId.Notification.ErrorHasOccuredOn": string;
        "DashboardWebStringId.Notification.UnsupportedDataSourceType": string;
        "DashboardWebStringId.Notification.QueryDoesNotExist": string;
        "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded": string;
        "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip": string;
        "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip": string;
        "DashboardWebStringId.ConditionalFormatting.Condition": string;
        "DashboardWebStringId.CardLayout.MinWidth": string;
        "DashboardWebStringId.CardLayout.MaxWidth": string;
        "DashboardWebStringId.CardLayout.Editor.CardLayout": string;
        "DashboardWebStringId.CardLayout.Editor.FormatOptions": string;
        "DashboardWebStringId.CardLayout.LayoutOptions": string;
        "DashboardWebStringId.CardLayout.ResetTemplate": string;
        "DashboardWebStringId.CardLayout.ApplyToAllCards": string;
        "DashboardWebStringId.Binding.ValuesPattern": string;
        "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique": string;
        "DashboardWebStringId.Title.ImageEmbedded": string;
        "DashboardWebStringId.Title.ImageLinked": string;
        "DashboardWebStringId.Title.ImageNone": string;
        "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod": string;
        "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod": string;
        "DashboardWebStringId.MobileLayout.Back": string;
        "DashboardWebStringId.MobileLayout.SwitchToViewer": string;
        "DashboardWebStringId.Search": string;
        "DashboardWebStringId.SearchFontFamilies": string;
        "DashboardStringId.DefaultNameTabPage": string;
        "DashboardStringId.DefaultNameChartPane": string;
        "DashboardStringId.DefaultNameChartIndicator": string;
        "DashboardStringId.NewCalculatedFieldNamePrefix": string;
        "DashboardStringId.NewParameterNamePrefix": string;
        "AnalyticsCoreStringId.Parameter_Type_String": string;
        "AnalyticsCoreStringId.Parameter_Type_DateTime": string;
        "AnalyticsCoreStringId.Parameter_Type_Int16": string;
        "AnalyticsCoreStringId.Parameter_Type_Int32": string;
        "AnalyticsCoreStringId.Parameter_Type_Int64": string;
        "AnalyticsCoreStringId.Parameter_Type_Float": string;
        "AnalyticsCoreStringId.Parameter_Type_Double": string;
        "AnalyticsCoreStringId.Parameter_Type_Decimal": string;
        "AnalyticsCoreStringId.Parameter_Type_Boolean": string;
        "AnalyticsCoreStringId.Parameter_Type_Guid": string;
        "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption": string;
        "DataAccessUIStringId.FiltersView": string;
        "DashboardStringId.SeriesTypeGroupArea": string;
        "DashboardStringId.SeriesTypeGroupBar": string;
        "DashboardStringId.SeriesTypeGroupBubble": string;
        "DashboardStringId.SeriesTypeGroupFinancial": string;
        "DashboardStringId.SeriesTypeGroupPointLine": string;
        "DashboardStringId.SeriesTypeGroupRange": string;
        "DashboardStringId.FunctionCategoryWindow": string;
        "DashboardStringId.FunctionCategoryAggregate": string;
        "DashboardStringId.FunctionCategoryAdvanced": string;
        "DashboardStringId.FunctionDescriptionRunningCustomAggregate": string;
        "DashboardStringId.FunctionDescriptionWindowCustomAggregate": string;
        "DashboardStringId.FunctionDescriptionWindowAvg": string;
        "DashboardStringId.FunctionDescriptionRunningMin": string;
        "DashboardStringId.FunctionDescriptionTotal": string;
        "DashboardStringId.FunctionDescriptionRankCompetition": string;
        "DashboardStringId.FunctionDescriptionLookup": string;
        "DashboardStringId.FunctionDescriptionRunningCount": string;
        "DashboardStringId.FunctionDescriptionWindowMax": string;
        "DashboardStringId.FunctionDescriptionVarp": string;
        "DashboardStringId.FunctionDescriptionRunningAvg": string;
        "DashboardStringId.FunctionDescriptionFirst": string;
        "DashboardStringId.FunctionDescriptionWindowMin": string;
        "DashboardStringId.FunctionDescriptionWindowStdDev": string;
        "DashboardStringId.FunctionDescriptionLast": string;
        "DashboardStringId.FunctionDescriptionWindowCount": string;
        "DashboardStringId.FunctionDescriptionCountDistinct": string;
        "DashboardStringId.FunctionDescriptionIndex": string;
        "DashboardStringId.FunctionDescriptionWindowStdDevp": string;
        "DashboardStringId.FunctionDescriptionWindowMode": string;
        "DashboardStringId.FunctionDescriptionRunningMax": string;
        "DashboardStringId.FunctionDescriptionRankPercentile": string;
        "DashboardStringId.FunctionDescriptionRankDense": string;
        "DashboardStringId.FunctionDescriptionWindowSum": string;
        "DashboardStringId.FunctionDescriptionWindowCountDistinct": string;
        "DashboardStringId.FunctionDescriptionStdDevp": string;
        "DashboardStringId.FunctionDescriptionSize": string;
        "DashboardStringId.FunctionDescriptionMedian": string;
        "DashboardStringId.FunctionDescriptionRankModified": string;
        "DashboardStringId.FunctionDescriptionWindowMedian": string;
        "DashboardStringId.FunctionDescriptionRunningSum": string;
        "DashboardStringId.FunctionDescriptionWindowVarp": string;
        "DashboardStringId.FunctionDescriptionWindowVar": string;
        "DashboardStringId.FunctionDescriptionStdDev": string;
        "DashboardStringId.FunctionDescriptionRankUnique": string;
        "DashboardStringId.FunctionDescriptionVar": string;
        "DashboardStringId.FunctionDescriptionAggr": string;
        "DashboardStringId.FunctionDescriptionAggrJoinRule": string;
        "DashboardStringId.FunctionDescriptionWindowDefinition": string;
        "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy": string;
        "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy": string;
        "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc": string;
        "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc": string;
        "DashboardStringId.AggregateExFunctionDescriptionCountNotNull": string;
        "DashboardStringId.AggregateExFunctionDescriptionMode": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear": string;
        "DashboardStringId.FunctionDescriptionGetDateWeekYear": string;
        "DashboardStringId.FunctionDescriptionGetDateWeekYear2": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime": string;
        "DashboardStringId.SparklineIndicationModeLine": string;
        "DashboardStringId.SparklineIndicationModeArea": string;
        "DashboardStringId.SparklineIndicationModeBar": string;
        "DashboardStringId.SparklineIndicationModeWinLoss": string;
        "DashboardStringId.DefaultNameDateFilterItem": string;
        "DashboardWebStringId.DateFilter.FilterType": string;
        "DashboardWebStringId.DateFilter.FilterTypeExact": string;
        "DashboardWebStringId.DateFilter.FilterTypeAfter": string;
        "DashboardWebStringId.DateFilter.FilterTypeBefore": string;
        "DashboardWebStringId.DateFilter.FilterTypeBetween": string;
        "DashboardWebStringId.DateFilter.ArrangementMode": string;
        "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight": string;
        "DashboardWebStringId.DateFilter.ArrangementModeHorizontal": string;
        "DashboardWebStringId.DateFilter.ArrangementModeVertical": string;
        "DashboardWebStringId.DateFilter.DatePickerLocation": string;
        "DashboardWebStringId.DateFilter.DatePickerLocationFar": string;
        "DashboardWebStringId.DateFilter.DatePickerLocationNear": string;
        "DashboardWebStringId.DateFilter.DatePickerLocationHidden": string;
        "DashboardStringId.DateFilterDisplayTextPattern": string;
        "DashboardStringId.DateFilterDatePickerButtonDefaultText": string;
        "DashboardStringId.FromDatePeriodCaption": string;
        "DashboardStringId.ToDatePeriodCaption": string;
        "DashboardStringId.FromToDatePeriodCaption": string;
        "DashboardStringId.UniqueNameValidationMessage": string;
        "DashboardStringId.NumberRangeValidationMessage": string;
        "DashboardStringId.GridTotalAutoTemplate": string;
        "DashboardStringId.GridTotalValueTemplate": string;
        "DashboardStringId.GridTotalTemplate": string;
        "DashboardStringId.GridTotalTypeCount": string;
        "DashboardStringId.GridTotalTypeMin": string;
        "DashboardStringId.GridTotalTypeMax": string;
        "DashboardStringId.GridTotalTypeAvg": string;
        "DashboardStringId.GridTotalTypeSum": string;
        "DashboardStringId.ActionShowDataInspector": string;
        "DashboardStringId.InspectedData": string;
        "DashboardStringId.InspectedTypeFormatString": string;
        "DashboardStringId.AggregatedDataType": string;
        "DashboardStringId.RawDataType": string;
        "DashboardStringId.OLAPUnavailableRawData": string;
        "DashboardStringId.SparklineValuesSeparator": string;
        "DashboardStringId.SparklineArgumentValueSeparator": string;
        "DashboardStringId.DataInspectorButtonClose": string;
        "DashboardWebStringId.Grid.FilterClause.ApplyFilter": string;
        "DashboardWebStringId.Grid.FilterClause.ResetOperation": string;
        "DashboardWebStringId.Grid.FilterClause.Contains": string;
        "DashboardWebStringId.Grid.FilterClause.DoesNotContain": string;
        "DashboardWebStringId.Grid.FilterClause.StartsWith": string;
        "DashboardWebStringId.Grid.FilterClause.EndsWith": string;
        "DashboardWebStringId.Grid.FilterClause.Equals": string;
        "DashboardWebStringId.Grid.FilterClause.DoesNotEqual": string;
        "DashboardWebStringId.Grid.FilterClause.Less": string;
        "DashboardWebStringId.Grid.FilterClause.Greater": string;
        "DashboardWebStringId.Grid.FilterClause.LessOrEqual": string;
        "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual": string;
        "DashboardWebStringId.Grid.FilterClause.Between": string;
        "DashboardWebStringId.Grid.FilterClause.BetweenStart": string;
        "DashboardWebStringId.Grid.FilterClause.BetweenEnd": string;
        "DashboardWebStringId.AccordionTab.Content": string;
        "DashboardWebStringId.TextBoxItemEditor.NoFields": string;
        "DashboardWebStringId.TextBoxItemEditor.InsertField": string;
        "DashboardWebStringId.TextBoxItemEditor.EditTextButton": string;
        "DashboardWebStringId.TextBoxItemEditor.DialogCaption": string;
        "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose": string;
        "DashboardWebStringId.TextBoxItemEditor.DialogClose": string;
        "DashboardStringId.StartDate": string;
        "DashboardStringId.EndDate": string;
        "DashboardWebStringId.AccordionTab.MeasureFilter": string;
        "DashboardStringId.FunctionDescriptionAggregateFilter": string;
        "DashboardWebStringId.TabPages": string;
        "DashboardWebStringId.More": string;
        "DashboardStringId.MeasureFilterCaptionFormatString": string;
        "DashboardWebStringId.AccordionTab.ItemFilter": string;
        "DashboardWebStringId.AccordionTab.VisibleDataFilter": string;
        "DashboardStringId.LayoutDimensionModeAuto": string;
        "DashboardStringId.LayoutDimensionModeFixed": string;
        "DashboardWebStringId.DesignerToolbar.Width": string;
        "DashboardWebStringId.DesignerToolbar.Height": string;
        "DashboardWebStringId.DesignerToolbar.Pixels": string;
        "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError": string;
        "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage": string;
    };
    export type DashboardLocalizationId = keyof typeof defaultLocalization;
    export function tryLocalize(key: DashboardLocalizationId | string): any;
    export function getLocalizationById(key: DashboardLocalizationId): any;
    export function formatLocalizable(localizationId: DashboardLocalizationId, arg1: any): any;
    export function getDefaultLocalization(): {
        "DashboardStringId.ActionClearMasterFilter": string;
        "DashboardStringId.ActionClearSelection": string;
        "DashboardStringId.ActionOtherValues": string;
        "DashboardStringId.ActionDrillUp": string;
        "DashboardStringId.ActionExportTo": string;
        "DashboardStringId.ActionExportToPdf": string;
        "DashboardStringId.ActionExportToImage": string;
        "DashboardStringId.ActionExportToExcel": string;
        "DashboardStringId.RangeFilterCustomDateTimePeriod": string;
        "DashboardStringId.ActionExportTemplate": string;
        "DashboardStringId.ActionAllowMultiselection": string;
        "DashboardStringId.DashboardNullValue": string;
        "DashboardStringId.TopNOthersValue": string;
        "DashboardStringId.DashboardErrorValue": string;
        "DashboardStringId.DateTimeQuarterFormat": string;
        "DashboardStringId.MessageLoading": string;
        "DashboardStringId.ParametersFormCaption": string;
        "DashboardStringId.ParametersSelectorText": string;
        "DashboardStringId.ParametersFormAllowNullColumnCaption": string;
        "DashboardStringId.ParametersFormValueColumnCaption": string;
        "DashboardStringId.ParametersFormNameColumnCaption": string;
        "DashboardStringId.ButtonOK": string;
        "DashboardStringId.ButtonCancel": string;
        "DashboardStringId.SelectDate": string;
        "DashboardStringId.ButtonReset": string;
        "DashboardStringId.ButtonSubmit": string;
        "DashboardStringId.ButtonApply": string;
        "DashboardStringId.ButtonExport": string;
        "DashboardStringId.GridResetColumnWidths": string;
        "DashboardStringId.GridSortAscending": string;
        "DashboardStringId.GridSortDescending": string;
        "DashboardStringId.GridClearSorting": string;
        "DashboardStringId.PivotGridTotal": string;
        "DashboardStringId.PivotGridGrandTotal": string;
        "DashboardStringId.ChartTotalValue": string;
        "DashboardStringId.PageLayout": string;
        "DashboardStringId.PageLayoutAuto": string;
        "DashboardStringId.PageLayoutPortrait": string;
        "DashboardStringId.PageLayoutLandscape": string;
        "DashboardStringId.PaperKind": string;
        "DashboardStringId.PaperKindLetter": string;
        "DashboardStringId.PaperKindLegal": string;
        "DashboardStringId.PaperKindExecutive": string;
        "DashboardStringId.PaperKindA5": string;
        "DashboardStringId.PaperKindA4": string;
        "DashboardStringId.PaperKindA3": string;
        "DashboardStringId.ScaleMode": string;
        "DashboardStringId.ScaleModeNone": string;
        "DashboardStringId.ScaleModeUseScaleFactor": string;
        "DashboardStringId.ScaleModeAutoFitToPagesWidth": string;
        "DashboardStringId.AutoFitPageCount": string;
        "DashboardStringId.ScaleFactor": string;
        "DashboardStringId.PrintHeadersOnEveryPage": string;
        "DashboardStringId.FitToPageWidth": string;
        "DashboardStringId.SizeMode": string;
        "DashboardStringId.SizeModeNone": string;
        "DashboardStringId.SizeModeStretch": string;
        "DashboardStringId.SizeModeZoom": string;
        "DashboardStringId.AutoArrangeContent": string;
        "DashboardStringId.ImageFormat": string;
        "DashboardStringId.ExcelFormat": string;
        "DashboardStringId.CsvValueSeparator": string;
        "DashboardStringId.ExportFilters": string;
        "DashboardStringId.ExportParameters": string;
        "DashboardStringId.DashboardStatePosition": string;
        "DashboardStringId.Resolution": string;
        "DashboardStringId.ShowTitle": string;
        "DashboardStringId.Title": string;
        "DashboardStringId.FileName": string;
        "DashboardStringId.FilterStatePresentationAfter": string;
        "DashboardStringId.FilterStatePresentationAfterAndSplitPage": string;
        "DashboardStringId.FilterStatePresentationSplitSheet": string;
        "DashboardStringId.MessageCustomItemIsNotSupported": string;
        "DashboardStringId.MessageGridHasNoData": string;
        "DashboardStringId.MessagePivotHasNoData": string;
        "DashboardStringId.SparklineTooltipStartValue": string;
        "DashboardStringId.SparklineTooltipEndValue": string;
        "DashboardStringId.SparklineTooltipMinValue": string;
        "DashboardStringId.SparklineTooltipMaxValue": string;
        "DashboardStringId.OpenCaption": string;
        "DashboardStringId.HighCaption": string;
        "DashboardStringId.LowCaption": string;
        "DashboardStringId.CloseCaption": string;
        "DashboardStringId.InitialExtent": string;
        "DashboardStringId.FilterElementShowAllItem": string;
        "DashboardStringId.NumericFormatUnitSymbolThousands": string;
        "DashboardStringId.NumericFormatUnitSymbolMillions": string;
        "DashboardStringId.NumericFormatUnitSymbolBillions": string;
        "DashboardStringId.ActionSelectDateTimePeriod": string;
        "DashboardStringId.RangeFilterSelectRange": string;
        "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption": string;
        "DashboardStringId.FilterElementRadioComboBoxNoDataCaption": string;
        "DashboardStringId.FilterElementNoDataToDisplay": string;
        "DashboardWebStringId.FilterElementCheckedComboBoxSelected": string;
        "DashboardStringId.RangeFilterSelectRangeFromCaption": string;
        "DashboardStringId.RangeFilterSelectRangeToCaption": string;
        "DashboardWebStringId.DashboardParameters": string;
        "DashboardStringId.DataSourceDataMember": string;
        "DashboardStringId.DescriptionMeasures": string;
        "DashboardWebStringId.TextBoxFormatText": string;
        "DashboardStringId.NumericFormatUnitCaption": string;
        "DashboardWebStringId.SummaryType": string;
        "DashboardStringId.CalculationTypeExpression": string;
        "DevExpressWebStringId.CalculatedFieldDataType": string;
        "DashboardStringId.ValueCaption": string;
        "DashboardStringId.Value1Caption": string;
        "DashboardStringId.Value2Caption": string;
        "DashboardStringId.CommandFormatRuleTopBottom": string;
        "DashboardStringId.CommandFormatRuleAboveBelowAverage": string;
        "DashboardStringId.CommandFormatRuleBar": string;
        "DashboardStringId.CommandFormatRuleColorRangeBar": string;
        "DashboardStringId.CommandFormatRuleGradientRangeBar": string;
        "DashboardStringId.FormatRuleStyleAppearance": string;
        "DashboardStringId.FormatRuleStyleIcons": string;
        "DashboardStringId.FormatRuleNegativeStyle": string;
        "DashboardStringId.CommandFormatRuleExpression": string;
        "DashboardWebStringId.TopNMode": string;
        "DashboardStringId.CommandFormatRuleRangeSet": string;
        "DashboardStringId.CommandFormatRuleRangeSetRanges2": string;
        "DashboardStringId.CommandFormatRuleRangeSetRanges3": string;
        "DashboardStringId.CommandFormatRuleRangeSetRanges4": string;
        "DashboardStringId.CommandFormatRuleRangeSetRanges5": string;
        "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges": string;
        "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges": string;
        "DashboardStringId.CommandFormatRuleValue": string;
        "DashboardStringId.CommandFormatRuleDateOccurring": string;
        "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor": string;
        "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor": string;
        "DashboardStringId.DescriptionBoundImageAttribute": string;
        "DashboardWebStringId.ShowCaptionText": string;
        "DashboardWebStringId.DisplayItemAsPage": string;
        "DashboardStringId.DefaultNameItemGroup": string;
        "DashboardStringId.DefaultNameTabContainerItem": string;
        "DashboardStringId.DefaultDataSourceName": string;
        "DashboardWebStringId.CrossDataSourceFiltering": string;
        "DashboardStringId.RangeFilterCalculationAlongSeries": string;
        "DashboardStringId.RangeFilterCalculationAlongArgument": string;
        "DashboardStringId.DescriptionItemSeries": string;
        "DashboardStringId.DescriptionSeries": string;
        "DashboardWebStringId.Chart.SeriesType": string;
        "DashboardStringId.DescriptionDimensions": string;
        "DashboardWebStringId.TreeView.AutoExpand": string;
        "DashboardWebStringId.ConditionalFormatting.ConditionMinimum": string;
        "DashboardWebStringId.ConditionalFormatting.ConditionMaximum": string;
        "DashboardStringId.DescriptionItemDimension": string;
        "DashboardStringId.DescriptionItemMeasure": string;
        "DashboardWebStringId.Grid.MergeCells": string;
        "DashboardWebStringId.Grid.ColumnWidthMode": string;
        "DashboardWebStringId.Grid.BandedRows": string;
        "DashboardWebStringId.Grid.VerticalLines": string;
        "DashboardWebStringId.Grid.HorizontalLines": string;
        "DashboardWebStringId.Grid.ColumnHeaders": string;
        "DashboardWebStringId.Grid.WordWrap": string;
        "DashboardWebStringId.Grid.ShowFilterRow": string;
        "DashboardWebStringId.Grid.UpdateTotals": string;
        "DashboardWebStringId.Grid.GridColumnFilter": string;
        "DashboardStringId.ActualValueCaption": string;
        "DashboardStringId.TargetValueCaption": string;
        "DashboardStringId.UriPatternCaption": string;
        "DashboardStringId.UriCaption": string;
        "DashboardStringId.DisplayValueCaption": string;
        "DashboardStringId.WeightCaption": string;
        "DashboardStringId.DescriptionItemColor": string;
        "DashboardStringId.Latitude": string;
        "DashboardStringId.Longitude": string;
        "DashboardWebStringId.GeoPointMapClusterization": string;
        "DashboardWebStringId.MapLockNavigation": string;
        "DashboardWebStringId.WeightedLegendGalleryGroup": string;
        "DashboardStringId.DescriptionItemArgument": string;
        "DashboardWebStringId.PieMapIsWeighted": string;
        "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters": string;
        "DashboardWebStringId.InteractivityOptions.DrillDown": string;
        "DashboardWebStringId.Pie.ShowCaptions": string;
        "DashboardStringId.DescriptionColumns": string;
        "DashboardStringId.DescriptionRows": string;
        "DashboardStringId.DescriptionValues": string;
        "DashboardStringId.DescriptionArguments": string;
        "DashboardStringId.TextGroupIntervalAlphabetical": string;
        "DashboardStringId.ActionMaximizeDashboardItem": string;
        "DashboardStringId.ActionRestoreDashboardItem": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember": string;
        "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder": string;
        "DevExpress.DashboardCommon.DashboardParameter.Visible": string;
        "DevExpress.DashboardCommon.DashboardParameter.Description": string;
        "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect": string;
        "DevExpress.DashboardCommon.DashboardParameter.AllowNull": string;
        "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues": string;
        "DevExpress.DashboardCommon.StaticListLookUpSettings.Values": string;
        "DevExpress.DashboardCommon.DimensionSortOrder.Ascending": string;
        "DevExpress.DashboardCommon.DimensionSortOrder.Descending": string;
        "DevExpress.DashboardCommon.DimensionSortOrder.None": string;
        "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions": string;
        "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute": string;
        "DashboardStringId.CommandFormatRuleTopN": string;
        "DashboardWebStringId.Type": string;
        "DashboardWebStringId.Grid.ColumnWidth": string;
        "DashboardWebStringId.AccordionTab.ShowTotals": string;
        "DashboardWebStringId.AccordionTab.Layout": string;
        "DashboardWebStringId.AccordionTab.PivotInitialState": string;
        "DashboardWebStringId.AccordionTab.ImageOptions": string;
        "DashboardWebStringId.AccordionTab.Labels": string;
        "DashboardWebStringId.AccordionTab.MapLegend": string;
        "DashboardWebStringId.AccordionTab.WeightedLegend": string;
        "DashboardWebStringId.AccordionTab.Common": string;
        "DashboardWebStringId.AccordionTab.ChartLegend": string;
        "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode": string;
        "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode": string;
        "DashboardWebStringId.Grid.ManualGridColumnWidthMode": string;
        "DashboardStringId.DateTimeIntervalYear": string;
        "DashboardStringId.DateTimeIntervalQuarter": string;
        "DashboardStringId.DateTimeIntervalMonth": string;
        "DashboardStringId.DateTimeIntervalWeek": string;
        "DashboardStringId.DateTimeIntervalDay": string;
        "DashboardStringId.DateTimeIntervalHour": string;
        "DashboardStringId.DateTimeIntervalMinute": string;
        "DashboardStringId.DateTimeIntervalSecond": string;
        "DashboardStringId.DateTimeGroupIntervalYear": string;
        "DashboardStringId.DateTimeGroupIntervalQuarter": string;
        "DashboardStringId.DateTimeGroupIntervalMonth": string;
        "DashboardStringId.DateTimeGroupIntervalDay": string;
        "DashboardStringId.DateTimeGroupIntervalHour": string;
        "DashboardStringId.DateTimeGroupIntervalMinute": string;
        "DashboardStringId.DateTimeGroupIntervalSecond": string;
        "DashboardStringId.DateTimeGroupIntervalDayOfYear": string;
        "DashboardStringId.DateTimeGroupIntervalDayOfWeek": string;
        "DashboardStringId.DateTimeGroupIntervalWeekOfYear": string;
        "DashboardStringId.DateTimeGroupIntervalWeekOfMonth": string;
        "DashboardStringId.DateTimeGroupIntervalMonthYear": string;
        "DashboardStringId.DateTimeGroupIntervalQuarterYear": string;
        "DashboardStringId.DateTimeGroupIntervalWeekYear": string;
        "DashboardStringId.DateTimeGroupIntervalDayMonthYear": string;
        "DashboardStringId.DateTimeGroupIntervalDateHour": string;
        "DashboardStringId.DateTimeGroupIntervalDateHourMinute": string;
        "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond": string;
        "DashboardStringId.DateTimeGroupIntervalExactDate": string;
        "DashboardStringId.GroupIntervalNone": string;
        "DashboardWebStringId.Treemap.StripedLayoutAlgorithm": string;
        "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm": string;
        "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm": string;
        "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue": string;
        "DashboardWebStringId.Treemap.TileLabelsNone": string;
        "DashboardWebStringId.Treemap.TileLabelsValue": string;
        "DashboardWebStringId.Treemap.TileLabelsArgument": string;
        "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue": string;
        "DashboardWebStringId.Treemap.TileTooltipsArgument": string;
        "DashboardWebStringId.Treemap.TileTooltipsValue": string;
        "DashboardWebStringId.Treemap.TileTooltipsNone": string;
        "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection": string;
        "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection": string;
        "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection": string;
        "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection": string;
        "DashboardWebStringId.Treemap.LayoutDirection": string;
        "DashboardWebStringId.Treemap.GroupLabelsNone": string;
        "DashboardWebStringId.Treemap.GroupLabelsArgument": string;
        "DashboardWebStringId.Treemap.GroupLabelsValue": string;
        "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue": string;
        "DashboardWebStringId.Treemap.GroupTooltipsNone": string;
        "DashboardWebStringId.Treemap.GroupTooltipsArgument": string;
        "DashboardWebStringId.Treemap.GroupTooltipsValue": string;
        "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue": string;
        "DashboardStringId.RankOrderAscending": string;
        "DashboardStringId.RankOrderDescending": string;
        "DashboardStringId.DateTimeFormatYearFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatYearFormatFullCaption": string;
        "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption": string;
        "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption": string;
        "DashboardStringId.DateTimeFormatQuarterFormatFullCaption": string;
        "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatMonthFormatFullCaption": string;
        "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption": string;
        "DashboardStringId.DateTimeFormatMonthFormatNumericCaption": string;
        "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption": string;
        "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption": string;
        "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption": string;
        "DashboardStringId.DateTimeFormatDateFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatDateFormatLongCaption": string;
        "DashboardStringId.DateTimeFormatDateFormatShortCaption": string;
        "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption": string;
        "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption": string;
        "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption": string;
        "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption": string;
        "DashboardStringId.ExactDateFormatYear": string;
        "DashboardStringId.ExactDateFormatQuarter": string;
        "DashboardStringId.ExactDateFormatMonth": string;
        "DashboardStringId.ExactDateFormatDay": string;
        "DashboardStringId.ExactDateFormatHour": string;
        "DashboardStringId.ExactDateFormatMinute": string;
        "DashboardStringId.ExactDateFormatSecond": string;
        "DashboardWebStringId.FormatType": string;
        "DashboardWebStringId.TopN.Top": string;
        "DashboardWebStringId.TopN.Bottom": string;
        "DashboardWebStringId.DimensionSortBy": string;
        "DashboardStringId.NumericFormatUnitAutoCaption": string;
        "DashboardStringId.NumericFormatFormatTypeAutoCaption": string;
        "DashboardStringId.NumericFormatFormatTypeGeneralCaption": string;
        "DashboardStringId.NumericFormatFormatTypeNumberCaption": string;
        "DashboardStringId.NumericFormatFormatTypeCurrencyCaption": string;
        "DashboardStringId.NumericFormatFormatTypeScientificCaption": string;
        "DashboardStringId.NumericFormatFormatTypePercentCaption": string;
        "DashboardStringId.NumericFormatUnitOnesCaption": string;
        "DashboardStringId.NumericFormatUnitThousandsCaption": string;
        "DashboardStringId.NumericFormatUnitMillionsCaption": string;
        "DashboardStringId.NumericFormatUnitBillionsCaption": string;
        "DashboardStringId.DeltaValueTypeActualValueCaption": string;
        "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption": string;
        "DashboardStringId.DeltaValueTypePercentVariationCaption": string;
        "DashboardStringId.DeltaValueTypePercentOfTargetCaption": string;
        "DashboardStringId.DeltaValueTypeTargetValueCaption": string;
        "DashboardStringId.GaugeScaleLabelFormatCaption": string;
        "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption": string;
        "DashboardStringId.DeltaIndicationModeLessIsGoodCaption": string;
        "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption": string;
        "DashboardStringId.DeltaIndicationModeWarningIfLessCaption": string;
        "DashboardStringId.DeltaIndicationModeNoIndicationCaption": string;
        "DashboardStringId.DeltaThresholdTypeAbsolute": string;
        "DashboardStringId.DeltaThresholdTypePercent": string;
        "DashboardStringId.CommandDimensionGroupChildValues": string;
        "DashboardStringId.SeriesTypeBar": string;
        "DashboardStringId.SeriesTypeStackedBar": string;
        "DashboardStringId.SeriesTypeFullStackedBar": string;
        "DashboardStringId.SeriesTypePoint": string;
        "DashboardStringId.SeriesTypeLine": string;
        "DashboardStringId.SeriesTypeStackedLine": string;
        "DashboardStringId.SeriesTypeFullStackedLine": string;
        "DashboardStringId.SeriesTypeStepLine": string;
        "DashboardStringId.SeriesTypeSpline": string;
        "DashboardStringId.SeriesTypeArea": string;
        "DashboardStringId.SeriesTypeStackedArea": string;
        "DashboardStringId.SeriesTypeFullStackedArea": string;
        "DashboardStringId.SeriesTypeStepArea": string;
        "DashboardStringId.SeriesTypeSplineArea": string;
        "DashboardStringId.SeriesTypeStackedSplineArea": string;
        "DashboardStringId.SeriesTypeFullStackedSplineArea": string;
        "DashboardWebStringId.Chart.ShowLegend": string;
        "DashboardStringId.DefaultNameBoundImageItem": string;
        "DashboardStringId.DefaultNameImageItem": string;
        "DashboardStringId.DefaultNameTextBoxItem": string;
        "DashboardStringId.DefaultNameCardItem": string;
        "DashboardStringId.DefaultNameChartItem": string;
        "DashboardStringId.DefaultNameComboBoxItem": string;
        "DashboardStringId.DefaultNameListBoxItem": string;
        "DashboardStringId.DefaultNameTreeViewItem": string;
        "DashboardStringId.DefaultNameGaugeItem": string;
        "DashboardStringId.DefaultNameGridItem": string;
        "DashboardStringId.GridHyperlinkUriPatternErrorMessage": string;
        "DashboardWebStringId.DefaultNameBubbleMapItem": string;
        "DashboardWebStringId.DefaultNameChoroplethMapItem": string;
        "DashboardWebStringId.DefaultNameGeoPointMapItem": string;
        "DashboardWebStringId.DefaultNamePieMapItem": string;
        "DashboardStringId.DefaultNamePieItem": string;
        "DashboardStringId.DefaultNamePivotItem": string;
        "DashboardStringId.DefaultNameRangeFilterItem": string;
        "DashboardStringId.DefaultNameScatterChartItem": string;
        "DashboardStringId.DefaultNameTreemapItem": string;
        "DashboardStringId.DescriptionMaps": string;
        "DashboardStringId.EntireRangePeriodCaption": string;
        "DashboardStringId.CalculationTypePercentOfTotal": string;
        "DashboardStringId.CalculationTypeDifference": string;
        "DashboardStringId.CalculationTypePercentageDifference": string;
        "DashboardStringId.CalculationTypeRunningTotal": string;
        "DashboardStringId.CalculationTypeMovingCalculation": string;
        "DashboardStringId.CalculationTypeRank": string;
        "DashboardStringId.ColorPaletteIndex": string;
        "DashboardStringId.DifferenceCalculationTargetPrevious": string;
        "DashboardStringId.DifferenceCalculationTargetNext": string;
        "DashboardStringId.DifferenceCalculationTargetFirst": string;
        "DashboardStringId.DifferenceCalculationTargetLast": string;
        "DashboardStringId.SummaryTypeCount": string;
        "DashboardStringId.SummaryTypeSum": string;
        "DashboardStringId.SummaryTypeMin": string;
        "DashboardStringId.SummaryTypeMax": string;
        "DashboardStringId.SummaryTypeAverage": string;
        "DashboardStringId.SummaryTypeStdDev": string;
        "DashboardStringId.SummaryTypeStdDevp": string;
        "DashboardStringId.SummaryTypeVar": string;
        "DashboardStringId.SummaryTypeVarp": string;
        "DashboardStringId.SummaryTypeCountDistinct": string;
        "DashboardStringId.SummaryTypeMedian": string;
        "DashboardStringId.SummaryTypeMode": string;
        "DashboardStringId.RankTypeUnique": string;
        "DashboardStringId.RankTypeCompetition": string;
        "DashboardStringId.RankTypeDense": string;
        "DashboardStringId.RankTypeModified": string;
        "DashboardStringId.RankTypePercentile": string;
        "DashboardStringId.CardCalculationAlongCards": string;
        "DashboardStringId.CardCalculationAlongSparklineArgument": string;
        "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument": string;
        "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards": string;
        "DashboardStringId.ChartCalculationAlongArguments": string;
        "DashboardStringId.ChartCalculationAlongSeries": string;
        "DashboardStringId.ChartCalculationAlongArgumentsAndSeries": string;
        "DashboardStringId.ChartCalculationAlongSeriesAndArguments": string;
        "DashboardStringId.GridCalculationAlongRows": string;
        "DashboardStringId.GridCalculationAlongSparklineArgument": string;
        "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument": string;
        "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows": string;
        "DashboardStringId.PivotCalculationAlongColumns": string;
        "DashboardStringId.PivotCalculationAlongRows": string;
        "DashboardStringId.PivotCalculationAlongColumnsAndRows": string;
        "DashboardStringId.PivotCalculationAlongRowsAndColumns": string;
        "DashboardStringId.PivotCalculationAlongGroupsInColumns": string;
        "DashboardStringId.PivotCalculationAlongGroupsInRows": string;
        "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows": string;
        "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns": string;
        "DashboardStringId.PieCalculationAlongArguments": string;
        "DashboardStringId.PieCalculationAlongSeries": string;
        "DashboardStringId.PieCalculationAlongArgumentsAndSeries": string;
        "DashboardStringId.PieCalculationAlongSeriesAndArguments": string;
        "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries": string;
        "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument": string;
        "DashboardStringId.GaugeCalculationAlongGauges": string;
        "DashboardStringId.ScatterCalculationAlongArguments": string;
        "DashboardStringId.CalculationAlongSpecificDimensions": string;
        "DashboardStringId.CalculatedFieldTypeString": string;
        "DashboardStringId.CalculatedFieldTypeLong": string;
        "DashboardStringId.CalculatedFieldTypeDecimal": string;
        "DashboardStringId.CalculatedFieldTypeBoolean": string;
        "DashboardStringId.CalculatedFieldTypeDateTime": string;
        "DashboardStringId.CalculatedFieldTypeDouble": string;
        "DashboardStringId.CalculatedFieldTypeAuto": string;
        "DashboardStringId.CalculatedFieldTypeObject": string;
        "DashboardStringId.DefaultEFDataSourceName": string;
        "DashboardStringId.DefaultExcelDataSourceName": string;
        "DashboardStringId.DefaultFileExtractDataSourceName": string;
        "DashboardStringId.DefaultFederationDataSourceName": string;
        "DashboardStringId.DefaultObjectDataSourceName": string;
        "DashboardStringId.DefaultOlapDataSourceName": string;
        "DashboardStringId.DefaultSqlDataSourceName": string;
        "DashboardStringId.DefaultJsonDataSourceName": string;
        "DashboardStringId.DefaultMongoDBDataSourceName": string;
        "DashboardStringId.DefaultXpoDataSourceName": string;
        "DashboardStringId.OlapRaggedHierarchyNoneItemCaption": string;
        "DashboardStringId.FormatRuleApplyToColumn": string;
        "DashboardStringId.SeriesTypeSideBySideRangeBar": string;
        "DashboardStringId.SeriesTypeRangeArea": string;
        "DashboardStringId.SeriesTypeHighLowClose": string;
        "DashboardStringId.SeriesTypeCandleStick": string;
        "DashboardStringId.SeriesTypeStock": string;
        "DashboardWebStringId.StyleSettings": string;
        "DashboardStringId.ParametersFormCalendarTodayButton": string;
        "DashboardStringId.TreemapLabelArgumentTemplate": string;
        "DashboardStringId.TreemapLabelValueTemplate": string;
        "DashboardStringId.SearchNullValuePrompt": string;
        "DashboardStringId.CustomItems": string;
        "DashboardStringId.FormatRuleAllowNegativeAxis": string;
        "DashboardStringId.FormatRuleDrawAxis": string;
        "DashboardStringId.FormatRuleShowBarOnly": string;
        "DashboardStringId.CommandFormatRuleBottomN": string;
        "DashboardStringId.FormatConditionAppearanceNone": string;
        "DashboardStringId.FormatConditionAppearanceCustom": string;
        "DashboardStringId.FormatConditionAppearancePaleRed": string;
        "DashboardStringId.FormatConditionAppearancePaleYellow": string;
        "DashboardStringId.FormatConditionAppearancePaleGreen": string;
        "DashboardStringId.FormatConditionAppearancePaleBlue": string;
        "DashboardStringId.FormatConditionAppearancePalePurple": string;
        "DashboardStringId.FormatConditionAppearancePaleCyan": string;
        "DashboardStringId.FormatConditionAppearancePaleOrange": string;
        "DashboardStringId.FormatConditionAppearancePaleGray": string;
        "DashboardStringId.FormatConditionAppearanceRed": string;
        "DashboardStringId.FormatConditionAppearanceYellow": string;
        "DashboardStringId.FormatConditionAppearanceGreen": string;
        "DashboardStringId.FormatConditionAppearanceBlue": string;
        "DashboardStringId.FormatConditionAppearancePurple": string;
        "DashboardStringId.FormatConditionAppearanceCyan": string;
        "DashboardStringId.FormatConditionAppearanceOrange": string;
        "DashboardStringId.FormatConditionAppearanceGray": string;
        "DashboardStringId.FormatConditionAppearanceGradientRed": string;
        "DashboardStringId.FormatConditionAppearanceGradientYellow": string;
        "DashboardStringId.FormatConditionAppearanceGradientGreen": string;
        "DashboardStringId.FormatConditionAppearanceGradientBlue": string;
        "DashboardStringId.FormatConditionAppearanceGradientPurple": string;
        "DashboardStringId.FormatConditionAppearanceGradientCyan": string;
        "DashboardStringId.FormatConditionAppearanceGradientOrange": string;
        "DashboardStringId.FormatConditionAppearanceGradientTransparent": string;
        "DashboardStringId.FormatConditionAppearanceFontBold": string;
        "DashboardStringId.FormatConditionAppearanceFontItalic": string;
        "DashboardStringId.FormatConditionAppearanceFontUnderline": string;
        "DashboardStringId.FormatConditionAppearanceFontGrayed": string;
        "DashboardStringId.FormatConditionAppearanceFontRed": string;
        "DashboardStringId.FormatConditionAppearanceFontYellow": string;
        "DashboardStringId.FormatConditionAppearanceFontGreen": string;
        "DashboardStringId.FormatConditionAppearanceFontBlue": string;
        "DashboardStringId.IntersectionLevelModeFirst": string;
        "DashboardStringId.IntersectionLevelModeLast": string;
        "DashboardStringId.IntersectionLevelModeAuto": string;
        "DashboardStringId.IntersectionLevelModeAll": string;
        "DashboardStringId.IntersectionLevelModeSpecific": string;
        "DashboardStringId.FormatRuleApplyToRow": string;
        "DashboardStringId.FormatRuleApplyTo": string;
        "DashboardStringId.FormatRuleApplyToChartElement": string;
        "DashboardStringId.ChartElementPointCaption": string;
        "DashboardStringId.ChartElementLineOrAreaCaption": string;
        "DashboardWebStringId.FilterItem.AllowEmptyFilter": string;
        "DashboardStringId.FormatConditionAppearanceFontStrikeout": string;
        "DashboardStringId.FormatConditionAutomaticValueType": string;
        "DashboardStringId.FormatConditionNumberValueType": string;
        "DashboardStringId.FormatConditionPercentValueType": string;
        "DashboardStringId.CommandFormatRuleRangeIcons": string;
        "DashboardStringId.CommandFormatRuleGreaterThan": string;
        "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo": string;
        "DashboardStringId.CommandFormatRuleLessThan": string;
        "DashboardStringId.CommandFormatRuleLessThanOrEqualTo": string;
        "DashboardStringId.CommandFormatRuleEqualTo": string;
        "DashboardStringId.CommandFormatRuleNotEqualTo": string;
        "DashboardStringId.CommandFormatRuleBetween": string;
        "DashboardStringId.CommandFormatRuleNotBetween": string;
        "DashboardStringId.CommandFormatRuleBetweenOrEqual": string;
        "DashboardStringId.CommandFormatRuleNotBetweenOrEqual": string;
        "DashboardStringId.CommandFormatRuleContains": string;
        "DashboardStringId.ColorAutoAssigned": string;
        "DashboardStringId.CalculationTypeNone": string;
        "DashboardStringId.UndoText": string;
        "DashboardStringId.RedoText": string;
        "DashboardStringId.DashboardCurrencyUseCurrentCurrency": string;
        "DashboardStringId.CommandDimensionSortModeDisplayText": string;
        "DashboardStringId.CommandDimensionSortModeValue": string;
        "DashboardStringId.CommandDimensionSortModeID": string;
        "DashboardStringId.CommandDimensionSortModeKey": string;
        "DashboardWebStringId.Chart.AddPane": string;
        "DashboardStringId.MapShapeNoneAttribute": string;
        "DashboardStringId.DefaultPeriodName": string;
        "DashboardStringId.CardLayoutTemplateStretchedCaption": string;
        "DashboardStringId.CardLayoutTemplateCenteredCaption": string;
        "DashboardStringId.CardLayoutTemplateCompactCaption": string;
        "DashboardStringId.CardLayoutTemplateLightweightCaption": string;
        "DashboardStringId.CardLayoutTemplateCustomCaption": string;
        "DashboardStringId.CardLayoutTemplateNoneCaption": string;
        "DashboardStringId.CardRowDataElementTypeTitleCaption": string;
        "DashboardStringId.CardRowDataElementTypeSubtitleCaption": string;
        "DashboardStringId.CardRowDataElementTypeActualValueCaption": string;
        "DashboardStringId.CardRowDataElementTypeTargetValueCaption": string;
        "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption": string;
        "DashboardStringId.CardRowDataElementTypePercentVariationCaption": string;
        "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption": string;
        "DashboardStringId.CardRowDataElementTypeDimensionValueCaption": string;
        "DashboardStringId.CardRowDataElementTypeCardNameCaption": string;
        "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption": string;
        "DashboardStringId.CardRowDataElementTypeSparklineCaption": string;
        "DashboardStringId.FormatRuleApplyToAllElements": string;
        "DashboardWebStringId.FormatRuleApplyToDimensionElement": string;
        "DashboardWebStringId.FormatRuleApplyToTextElement": string;
        "DashboardStringId.FormatRuleDisplayInLegend": string;
        "DashboardStringId.FormatRuleDisplayName": string;
        "DashboardStringId.LegendItemFormatString": string;
        "DashboardWebStringId.Pie.LabelPosition": string;
        "DashboardWebStringId.Pie.LabelPositionOutside": string;
        "DashboardWebStringId.Pie.LabelPositionInside": string;
        "DashboardStringId.IncludeExportDashboardState": string;
        "DashboardStringId.PointLabelContentTypeArgument": string;
        "DashboardStringId.PointLabelContentTypeSeriesName": string;
        "DashboardStringId.PointLabelContentTypeValue": string;
        "DashboardStringId.PointLabelContentTypePercent": string;
        "DashboardWebStringId.DashboardMenu": string;
        "DashboardWebStringId.DashboardMenuNew": string;
        "DashboardWebStringId.DashboardMenuOpen": string;
        "DashboardWebStringId.DashboardMenuSave": string;
        "DashboardWebStringId.DashboardMenuCurrency": string;
        "DashboardWebStringId.DashboardMenuDataSources": string;
        "DashboardWebStringId.DashboardMenuColorScheme": string;
        "DashboardWebStringId.DashboardMenuNewDashboardCreate": string;
        "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder": string;
        "DashboardWebStringId.Binding.DefaultEmptyPlaceholder": string;
        "DashboardWebStringId.Binding.DefaultSelectedPlaceholder": string;
        "DashboardWebStringId.Binding.DataSource": string;
        "DashboardWebStringId.Binding.Argument": string;
        "DashboardWebStringId.Binding.Attribute": string;
        "DashboardWebStringId.Binding.Sparkline": string;
        "DashboardWebStringId.Binding.Columns": string;
        "DashboardWebStringId.Binding.TooltipDimensions": string;
        "DashboardWebStringId.Binding.TooltipMeasures": string;
        "DashboardWebStringId.Binding.HiddenDimensions": string;
        "DashboardWebStringId.Binding.HiddenMeasures": string;
        "DashboardWebStringId.Binding.AddDimension": string;
        "DashboardWebStringId.Binding.AddMeasure": string;
        "DashboardWebStringId.Binding.AddColumn": string;
        "DashboardWebStringId.Binding.AddRow": string;
        "DashboardWebStringId.Binding.AddValue": string;
        "DashboardWebStringId.Binding.AddSeries": string;
        "DashboardWebStringId.Binding.SetLatitude": string;
        "DashboardWebStringId.Binding.SetLongitude": string;
        "DashboardWebStringId.Binding.SetArgument": string;
        "DashboardWebStringId.Binding.AddArgument": string;
        "DashboardWebStringId.Binding.SetWeight": string;
        "DashboardWebStringId.Binding.SetColor": string;
        "DashboardWebStringId.Binding.SetAttribute": string;
        "DashboardWebStringId.Binding.SetValue": string;
        "DashboardWebStringId.Binding.XAxis": string;
        "DashboardWebStringId.Binding.YAxis": string;
        "DashboardWebStringId.Binding.ConfigureDimension": string;
        "DashboardWebStringId.Binding.ConfigureMeasure": string;
        "DashboardWebStringId.Binding.ConfigureSeries": string;
        "DashboardWebStringId.Binding.ConfigureArgument": string;
        "DashboardWebStringId.Binding.ConfigureValue": string;
        "DashboardWebStringId.Binding.ConfigureAttribute": string;
        "DashboardWebStringId.Binding.ConfigureLatitude": string;
        "DashboardWebStringId.Binding.ConfigureLongitude": string;
        "DashboardWebStringId.Binding.ConfigureColumn": string;
        "DashboardWebStringId.Binding.ConfigureRow": string;
        "DashboardWebStringId.Binding.ConfigureWeight": string;
        "DashboardWebStringId.Binding.ConfigureColor": string;
        "DashboardWebStringId.Binding.ShowAll": string;
        "DashboardWebStringId.ColorScheme.Color": string;
        "DashboardWebStringId.ColorScheme.Colors": string;
        "DashboardWebStringId.Parameters.ParameterList": string;
        "DashboardWebStringId.Parameters.AddParameter": string;
        "DashboardWebStringId.Parameters.AddParameter.Tooltip": string;
        "DashboardWebStringId.Parameters.NoSelectedParameter": string;
        "DashboardWebStringId.Parameters.Reorder": string;
        "DashboardWebStringId.Parameters.Done": string;
        "DashboardWebStringId.Currency.Currency": string;
        "DashboardWebStringId.Currency.CurrencyCulture": string;
        "DashboardWebStringId.Currency.DefaultCurrencyWarning": string;
        "DashboardWebStringId.Preview": string;
        "DashboardWebStringId.Add": string;
        "DashboardWebStringId.DataSources.UsedDataSources": string;
        "DashboardWebStringId.DataSources.DataItems": string;
        "DashboardWebStringId.DataSources.AddQuery": string;
        "DashboardWebStringId.DataSources.ManageQueries": string;
        "DashboardWebStringId.DataSources.AddCalculatedField": string;
        "DashboardWebStringId.DataSources.AddDataSource": string;
        "DashboardWebStringId.DataSources.RenameDataSource": string;
        "DashboardWebStringId.DataSources.NoUsedDataSources": string;
        "DashboardWebStringId.DataSources.NoAvailableDataSources": string;
        "DashboardWebStringId.DataSources.ChooseDataSource": string;
        "DashboardWebStringId.DataSources.CreateDataSource": string;
        "DashboardWebStringId.DataSources.CreateNewDataSource": string;
        "DashboardWebStringId.DataSources.CreateDataSource.Tooltip": string;
        "DashboardWebStringId.DataSources.EditCalculatedField": string;
        "DashboardWebStringId.DataSources.CalculatedField.Name": string;
        "DashboardWebStringId.DataSources.CalculatedField.FieldType": string;
        "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError": string;
        "DashboardWebStringId.DataSources.CalculatedField.Corrupted": string;
        "DashboardWebStringId.DataSources.Edit": string;
        "DashboardWebStringId.DataSources.Rename": string;
        "DashboardWebStringId.DataSources.NewDataSourceName": string;
        "DashboardWebStringId.DataSources.DataSourceNameExistsMessage": string;
        "DashboardStringId.MessageCollectionTypesNotSupported": string;
        "DashboardWebStringId.New.DashboardName": string;
        "DashboardWebStringId.Bindings": string;
        "DashboardWebStringId.Interactivity": string;
        "DashboardWebStringId.Filters": string;
        "DashboardWebStringId.Options": string;
        "DashboardWebStringId.Remove": string;
        "DashboardWebStringId.MasterFilterMode": string;
        "DashboardWebStringId.Title.Text": string;
        "DashboardWebStringId.Title.Visible": string;
        "DashboardWebStringId.Title.IncludeMasterFilter": string;
        "DashboardWebStringId.Title.Aligment": string;
        "DashboardWebStringId.Title.Image": string;
        "DashboardWebStringId.DataSources.Cancel": string;
        "DashboardWebStringId.DataSources.IncludeToTheDashboard": string;
        "DashboardWebStringId.DataSources.AvailableDataSourcesError": string;
        "DashboardWebStringId.DataSources.DashboardDataSourceWizard": string;
        "DashboardWebStringId.Viewer": string;
        "DashboardWebStringId.Loading": string;
        "DashboardWebStringId.ClickHereInvitation": string;
        "DashboardWebStringId.BindDataInvitation": string;
        "DashboardWebStringId.AddItemInvitation": string;
        "DashboardWebStringId.Parameters.Values": string;
        "DashboardWebStringId.Binding.Cards": string;
        "DashboardWebStringId.Binding.AddCard": string;
        "DashboardWebStringId.Binding.ConfigureCard": string;
        "DashboardWebStringId.Binding.AddValues": string;
        "DashboardWebStringId.Binding.ConfigureValues": string;
        "DashboardWebStringId.Binding.Maps": string;
        "DashboardWebStringId.Binding.AddMap": string;
        "DashboardWebStringId.Binding.ConfigureMap": string;
        "DashboardWebStringId.Binding.Gauges": string;
        "DashboardWebStringId.Binding.AddGauge": string;
        "DashboardWebStringId.Binding.ConfigureGauge": string;
        "DashboardWebStringId.InteractivityOptions": string;
        "DashboardWebStringId.Binding.Values": string;
        "DashboardWebStringId.Binding.RemovePane": string;
        "DashboardWebStringId.ClickToSetFilterCriteria": string;
        "DashboardWebStringId.DataSources.OK": string;
        "DashboardWebStringId.DataSources.Save": string;
        "DashboardWebStringId.Cards.ArrangementMode": string;
        "DashboardWebStringId.Cards.ArrangementMode.Auto": string;
        "DashboardWebStringId.Cards.ArrangementMode.FixedRows": string;
        "DashboardWebStringId.Cards.ArrangementMode.FixedColumns": string;
        "DashboardWebStringId.Cards.LineCount": string;
        "DashboardWebStringId.ConditionalFormatting": string;
        "DashboardWebStringId.CollectionEditor.NoItems": string;
        "DashboardWebStringId.CollectionEditor.Totals.NoItems": string;
        "DashboardWebStringId.CollectionEditor.Parameters.NoItems": string;
        "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups": string;
        "DashboardWebStringId.PivotGrid.AutoExpandRowGroups": string;
        "DashboardWebStringId.PivotGrid.ColumnGrandTotals": string;
        "DashboardWebStringId.PivotGrid.RowGrandTotals": string;
        "DashboardWebStringId.PivotGrid.ColumnTotals": string;
        "DashboardWebStringId.PivotGrid.RowTotals": string;
        "DashboardWebStringId.PivotGrid.ValuesPosition": string;
        "DashboardWebStringId.PivotGrid.ValuesPositionColumns": string;
        "DashboardWebStringId.PivotGrid.ValuesPositionRows": string;
        "DashboardWebStringId.PivotGrid.RowTotalsPosition": string;
        "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom": string;
        "DashboardWebStringId.PivotGrid.RowTotalsPositionTop": string;
        "DashboardWebStringId.PivotGrid.ColumnTotalsPosition": string;
        "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar": string;
        "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear": string;
        "DashboardWebStringId.PivotGrid.LayoutType": string;
        "DashboardWebStringId.PivotGrid.LayoutTypeCompact": string;
        "DashboardWebStringId.PivotGrid.LayoutTypeTabular": string;
        "DashboardWebStringId.Options.Caption": string;
        "DashboardWebStringId.InteractivityOptions.IsMasterFilter": string;
        "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None": string;
        "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single": string;
        "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple": string;
        "DashboardWebStringId.InteractivityOptions.TargetDimensions": string;
        "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments": string;
        "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series": string;
        "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points": string;
        "DashboardWebStringId.ColoringOptions": string;
        "DashboardWebStringId.DataSources.Filter": string;
        "DashboardWebStringId.Chart.Rotated": string;
        "DashboardWebStringId.Chart.Panes": string;
        "DashboardWebStringId.Chart.Legend": string;
        "DashboardWebStringId.Chart.AxisX": string;
        "DashboardWebStringId.Chart.AxisY": string;
        "DashboardWebStringId.Chart.AxisYSecondary": string;
        "DashboardWebStringId.Chart.PointLabelOptions": string;
        "DashboardWebStringId.Chart.AxisXMeasure": string;
        "DashboardWebStringId.Chart.AxisYMeasure": string;
        "DashboardWebStringId.Chart.Weight": string;
        "DashboardWebStringId.Chart.Content": string;
        "DashboardWebStringId.Chart.ArgumentAndWeight": string;
        "DashboardWebStringId.Chart.ArgumentAndValues": string;
        "DashboardWebStringId.Chart.Reverse": string;
        "DashboardWebStringId.Chart.Visible": string;
        "DashboardWebStringId.Chart.Title": string;
        "DashboardWebStringId.Chart.TitleText": string;
        "DashboardWebStringId.Chart.EnableZooming": string;
        "DashboardWebStringId.Chart.LimitVisiblePoints": string;
        "DashboardWebStringId.Chart.VisiblePointsCount": string;
        "DashboardWebStringId.Chart.AlwaysShowZeroLevel": string;
        "DashboardWebStringId.Chart.GridLines": string;
        "DashboardWebStringId.Chart.LogarithmicScale": string;
        "DashboardWebStringId.Chart.LogarithmicScaleBase": string;
        "DashboardWebStringId.Chart.LogarithmicScaleBase2": string;
        "DashboardWebStringId.Chart.LogarithmicScaleBase5": string;
        "DashboardWebStringId.Chart.LogarithmicScaleBase10": string;
        "DashboardWebStringId.Chart.Position": string;
        "DashboardWebStringId.Chart.IsInsideOfDiagram": string;
        "DashboardWebStringId.Chart.PrimaryAxisY": string;
        "DashboardWebStringId.Chart.SecondaryAxisY": string;
        "DashboardWebStringId.Chart.Name": string;
        "DashboardWebStringId.Chart.PlotOnSecondaryAxis": string;
        "DashboardWebStringId.Chart.IgnoreEmptyPoints": string;
        "DashboardWebStringId.Chart.ShowPointMarkers": string;
        "DashboardWebStringId.Chart.Value": string;
        "DashboardWebStringId.Chart.ShowZeroValues": string;
        "DashboardWebStringId.Chart.OverlappingMode": string;
        "DashboardWebStringId.Chart.Orientation": string;
        "DashboardWebStringId.Chart.ShowPointLablels": string;
        "DashboardWebStringId.Chart.TooltipContent": string;
        "DashboardWebStringId.Chart.LabelContent": string;
        "DashboardWebStringId.Card.SparklineOptions": string;
        "DashboardWebStringId.Card.SparklineVisible": string;
        "DashboardWebStringId.Chart.Position.TopLeftVertical": string;
        "DashboardWebStringId.Chart.Position.TopLeftHorizontal": string;
        "DashboardWebStringId.Chart.Position.TopCenterHorizontal": string;
        "DashboardWebStringId.Chart.Position.TopRightVertical": string;
        "DashboardWebStringId.Chart.Position.TopRightHorizontal": string;
        "DashboardWebStringId.Chart.Position.BottomLeftVertical": string;
        "DashboardWebStringId.Chart.Position.BottomLeftHorizontal": string;
        "DashboardWebStringId.Chart.Position.BottomCenterHorizontal": string;
        "DashboardWebStringId.Chart.Position.BottomRightVertical": string;
        "DashboardWebStringId.Chart.Position.BottomRightHorizontal": string;
        "DashboardWebStringId.Chart.Position.TopCenterVertical": string;
        "DashboardWebStringId.Chart.Position.BottomCenterVertical": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.Empty": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.Solid": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.Dash": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.Dot": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot": string;
        "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot": string;
        "DashboardWebStringId.Chart.Indicator.Type": string;
        "DashboardWebStringId.Chart.Indicator.Type.Regression": string;
        "DashboardWebStringId.Chart.Indicator.Type.Trend": string;
        "DashboardWebStringId.Chart.Indicator.LegendText": string;
        "DashboardWebStringId.Chart.Indicator.ShowInLegend": string;
        "DashboardWebStringId.Chart.Indicator.Thickness": string;
        "DashboardWebStringId.Chart.Indicator.ValueLevel": string;
        "DashboardWebStringId.Chart.Indicator.ValueLevel.Value": string;
        "DashboardWebStringId.Chart.Indicator.Visible": string;
        "DashboardWebStringId.Chart.Indicator.Color": string;
        "DashboardWebStringId.Chart.Indicator.Value": string;
        "DashboardWebStringId.Chart.Indicators": string;
        "DashboardWebStringId.Chart.IndicatorSettings": string;
        "DashboardWebStringId.FilterItem.Type": string;
        "DashboardWebStringId.FilterItem.Type.Standard": string;
        "DashboardWebStringId.FilterItem.Type.Checked": string;
        "DashboardWebStringId.FilterItem.Type.Radio": string;
        "DashboardWebStringId.FilterItem.ShowAllValue": string;
        "DashboardWebStringId.FilterItem.EnableSearch": string;
        "DashboardWebStringId.Gauge.Min": string;
        "DashboardWebStringId.Gauge.Max": string;
        "DashboardWebStringId.Gauge.ScaleOptions": string;
        "DashboardWebStringId.Gauge.Type": string;
        "DashboardWebStringId.Gauge.Type.FullQuarterGauge": string;
        "DashboardWebStringId.Gauge.Type.HalfCircular": string;
        "DashboardWebStringId.Gauge.Type.LeftQuarterCircular": string;
        "DashboardWebStringId.Gauge.Type.RightQuarterCircular": string;
        "DashboardWebStringId.Gauge.Type.ThreeFourthCircular": string;
        "DashboardWebStringId.Gauge.Type.LinearHorizontal": string;
        "DashboardWebStringId.Gauge.Type.LinearVertical": string;
        "DashboardWebStringId.Gauge.Captions": string;
        "DashboardWebStringId.Gauge.Scale.Custom": string;
        "DashboardWebStringId.Gauge.Scale.Auto": string;
        "DashboardWebStringId.Grid.ColumnType": string;
        "DashboardWebStringId.Grid.DisplayMode": string;
        "DashboardWebStringId.Grid.DisplayMode.Value": string;
        "DashboardWebStringId.Grid.DisplayMode.Bar": string;
        "DashboardWebStringId.Grid.DisplayMode.Text": string;
        "DashboardWebStringId.Grid.DisplayMode.Image": string;
        "DashboardWebStringId.Grid.FixedWidth": string;
        "DashboardWebStringId.Grid.WidthType": string;
        "DashboardWebStringId.Grid.WidthType.Weight": string;
        "DashboardWebStringId.Grid.WidthType.FitToContent": string;
        "DashboardWebStringId.Grid.DeltaOptions": string;
        "DashboardWebStringId.Grid.ShowStartEndValues": string;
        "DashboardWebStringId.Grid.TotalType": string;
        "DashboardWebStringId.Grid.Dimension": string;
        "DashboardWebStringId.Grid.Measure": string;
        "DashboardWebStringId.Grid.Delta": string;
        "DashboardWebStringId.Grid.Sparkline": string;
        "DashboardWebStringId.Grid.Hyperlink": string;
        "DashboardWebStringId.Grid.Options": string;
        "DashboardWebStringId.Map.ShapeFileLoaded": string;
        "DashboardWebStringId.Map.AttributeFileLoaded": string;
        "DashboardWebStringId.Map.ValueMap": string;
        "DashboardWebStringId.Map.DeltaMap": string;
        "DashboardWebStringId.Map.TooltipCaption": string;
        "DashboardWebStringId.Map.TooltipActualValueCaption": string;
        "DashboardWebStringId.Map.TooltipDeltaCaption": string;
        "DashboardWebStringId.Map.CustomMapOptions": string;
        "DashboardWebStringId.Map.CustomMapOptionsSource": string;
        "DashboardWebStringId.Map.CustomMapOptionsUrl": string;
        "DashboardWebStringId.Map.CustomMapOptionsFile": string;
        "DashboardWebStringId.Map.CustomMapUrl": string;
        "DashboardWebStringId.Map.CustomMapFile": string;
        "DashboardWebStringId.Map.CustomAttributeFile": string;
        "DashboardWebStringId.Map.AttributeDimension": string;
        "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle": string;
        "DashboardWebStringId.Map.AttributeName": string;
        "DashboardWebStringId.Map.TooltipAttribute": string;
        "DashboardWebStringId.Map.TooltipDimensions": string;
        "DashboardWebStringId.Map.Area.Custom": string;
        "DashboardWebStringId.Map.Area.WorldCountries": string;
        "DashboardWebStringId.Map.Area.Europe": string;
        "DashboardWebStringId.Map.Area.Asia": string;
        "DashboardWebStringId.Map.Area.NorthAmerica": string;
        "DashboardWebStringId.Map.Area.SouthAmerica": string;
        "DashboardWebStringId.Map.Area.Africa": string;
        "DashboardWebStringId.Map.Area.USA": string;
        "DashboardWebStringId.Map.Area.Canada": string;
        "DashboardWebStringId.Map.Viewport": string;
        "DashboardWebStringId.Map.ShapeTitleAttribute": string;
        "DashboardWebStringId.Map.UseBindingAttribute": string;
        "DashboardWebStringId.Map.WeightedLegendType": string;
        "DashboardWebStringId.Map.WeightedLegendType.Linear": string;
        "DashboardWebStringId.Map.WeightedLegendType.Nested": string;
        "DashboardWebStringId.Map.Orientation.Vertical": string;
        "DashboardWebStringId.Map.Orientation.Horizontal": string;
        "DashboardWebStringId.Map.Position.TopLeft": string;
        "DashboardWebStringId.Map.Position.TopCenter": string;
        "DashboardWebStringId.Map.Position.TopRight": string;
        "DashboardWebStringId.Map.Position.BottomLeft": string;
        "DashboardWebStringId.Map.Position.BottomCenter": string;
        "DashboardWebStringId.Map.Position.BottomRight": string;
        "DashboardWebStringId.Map.Viewport.TopLatitude": string;
        "DashboardWebStringId.Map.Viewport.LeftLongitude": string;
        "DashboardWebStringId.Map.Viewport.RightLongitude": string;
        "DashboardWebStringId.Map.Viewport.BottomLatitude": string;
        "DashboardWebStringId.Map.Viewport.CenterPointLatitude": string;
        "DashboardWebStringId.Map.Viewport.CenterPointLongitude": string;
        "DashboardWebStringId.Map.Viewport.CreateViewerPaddings": string;
        "DashboardWebStringId.Map.ShowLegend": string;
        "DashboardWebStringId.Map.ShowWeightedLegend": string;
        "DashboardWebStringId.Pie.Type": string;
        "DashboardWebStringId.Pie": string;
        "DashboardWebStringId.Pie.Donut": string;
        "DashboardWebStringId.Pie.LabelContentType.None": string;
        "DashboardWebStringId.Pie.LabelContentType.Argument": string;
        "DashboardWebStringId.Pie.LabelContentType.Percent": string;
        "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent": string;
        "DashboardWebStringId.Pie.LabelContentType.Value": string;
        "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue": string;
        "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent": string;
        "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent": string;
        "DashboardWebStringId.Image.BindingMode": string;
        "DashboardWebStringId.Image.BindingMode.BinaryArray": string;
        "DashboardWebStringId.Image.BindingMode.Uri": string;
        "DashboardWebStringId.RangeFilter.UriPattern": string;
        "DashboardWebStringId.Image.SizeMode.Clip": string;
        "DashboardWebStringId.Image.SizeMode.Stretch": string;
        "DashboardWebStringId.Image.SizeMode.Zoom": string;
        "DashboardWebStringId.Image.SizeMode.Squeeze": string;
        "DashboardWebStringId.Image.HorizontalAlignment": string;
        "DashboardWebStringId.Image.VerticalAlignment": string;
        "DashboardWebStringId.Image.Alignment.Left": string;
        "DashboardWebStringId.Image.Alignment.Center": string;
        "DashboardWebStringId.Image.Alignment.Right": string;
        "DashboardWebStringId.Image.Alignment.Top": string;
        "DashboardWebStringId.Image.Alignment.Bottom": string;
        "DashboardWebStringId.SeriesItem.SeriesDimensions": string;
        "DashboardWebStringId.TextBox.Text": string;
        "DashboardWebStringId.Chart.Orientation.Default": string;
        "DashboardWebStringId.Chart.Orientation.RotateRight": string;
        "DashboardWebStringId.Chart.Orientation.RotateLeft": string;
        "DashboardWebStringId.Chart.OverlappingMode.Hide": string;
        "DashboardWebStringId.Chart.OverlappingMode.None": string;
        "DashboardWebStringId.Chart.Position.Outside": string;
        "DashboardWebStringId.Chart.Position.Inside": string;
        "DashboardWebStringId.Chart.SeriesType.Weighted": string;
        "DashboardWebStringId.Coloring.MeasuresColoringMode": string;
        "DashboardWebStringId.Coloring.Global": string;
        "DashboardWebStringId.Coloring.Local": string;
        "DashboardWebStringId.Delta.ValueType": string;
        "DashboardWebStringId.Delta.ResultIndication": string;
        "DashboardWebStringId.Delta.ThresholdType": string;
        "DashboardWebStringId.Delta.ThresholdValue": string;
        "DashboardWebStringId.Sparkline.ViewType": string;
        "DashboardWebStringId.Sparkline.HighlightMinMaxPoints": string;
        "DashboardWebStringId.Sparkline.HighlightStartEndPoints": string;
        "DashboardWebStringId.Title.Aligment.Left": string;
        "DashboardWebStringId.Title.Aligment.Center": string;
        "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp": string;
        "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList": string;
        "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList": string;
        "DashboardWebStringId.Parameters.LookUpSettingsType": string;
        "DashboardWebStringId.Parameters.DefaultValue": string;
        "DashboardWebStringId.DataItem": string;
        "DashboardWebStringId.DataItem.Precision": string;
        "DashboardWebStringId.DataItem.IncludeGroupSeparator": string;
        "DashboardWebStringId.DataItem.ShowValues": string;
        "DashboardWebStringId.DataItem.ShowTotals": string;
        "DashboardWebStringId.DataItem.ShowGrandTotals": string;
        "DashboardWebStringId.Dialog.ConfirmSaving": string;
        "DashboardWebStringId.Dialog.Warning": string;
        "DashboardWebStringId.Dimension.GroupInterval": string;
        "DashboardWebStringId.Dimension.SortMode": string;
        "DashboardWebStringId.Dialog.ArgumentMode": string;
        "DashboardWebStringId.Calculations": string;
        "DashboardWebStringId.Calculations.Expression": string;
        "DashboardWebStringId.Calculations.DifferenceCalculation": string;
        "DashboardWebStringId.Calculations.Moving": string;
        "DashboardWebStringId.Calculations.RunningTotal": string;
        "DashboardWebStringId.Calculations.PercentOfTotal": string;
        "DashboardWebStringId.Calculations.Rank": string;
        "DashboardWebStringId.Calculations.DefinitionMode": string;
        "DashboardWebStringId.Calculations.WindowDefinition": string;
        "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific": string;
        "DashboardWebStringId.Calculations.WindowDefinitionModePredefined": string;
        "DashboardWebStringId.Calculations.DifferenceType": string;
        "DashboardWebStringId.TreemapLayoutAlgorithm": string;
        "DashboardWebStringId.TilesLabelContentType": string;
        "DashboardWebStringId.TilesTooltipContentType": string;
        "DashboardWebStringId.GroupsLabelContentType": string;
        "DashboardWebStringId.GroupsTooltipContentType": string;
        "DashboardWebStringId.ShowOthersValue": string;
        "DashboardWebStringId.TopNEnabled": string;
        "DashboardWebStringId.Parameters.StaticListLookUpSettings": string;
        "DashboardWebStringId.Parameters.DynamicListLookUpSettings": string;
        "DashboardWebStringId.ConvertTo": string;
        "DashboardWebStringId.Duplicate": string;
        "DashboardWebStringId.DataSourceWizard": string;
        "DashboardWebStringId.RangeFilter.CustomPeriods": string;
        "DashboardWebStringId.RangeFilter.StartMode": string;
        "DashboardWebStringId.RangeFilter.EndMode": string;
        "DashboardWebStringId.RangeFilter.StartIntervalAndOffset": string;
        "DashboardWebStringId.RangeFilter.EndIntervalAndOffset": string;
        "DashboardWebStringId.RangeFilter.StartDate": string;
        "DashboardWebStringId.RangeFilter.EndDate": string;
        "DashboardWebStringId.RangeFilter.None": string;
        "DashboardWebStringId.RangeFilter.Fixed": string;
        "DashboardWebStringId.RangeFilter.Flow": string;
        "DashboardWebStringId.Tabs.Binding": string;
        "DashboardWebStringId.Tabs.DataShaping": string;
        "DashboardWebStringId.Tabs.Format": string;
        "DashboardWebStringId.Calculations.Types.Moving": string;
        "DashboardWebStringId.Parameters.SortByMember": string;
        "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption": string;
        "DashboardWebStringId.Dashboard.Items": string;
        "DashboardWebStringId.Dashboard.Groups": string;
        "DashboardWebStringId.Dashboard.LayoutItems": string;
        "DashboardWebStringId.Dashboard.ComponentName": string;
        "DashboardWebStringId.ButtonConfirm": string;
        "DashboardWebStringId.Colorization.GroupInterval": string;
        "DashboardWebStringId.ButtonOn": string;
        "DashboardWebStringId.ButtonOff": string;
        "DashboardWebStringId.ButtonYes": string;
        "DashboardWebStringId.ButtonNo": string;
        "DashboardWebStringId.ButtonDiscrete": string;
        "DashboardWebStringId.ButtonContinuous": string;
        "DashboardWebStringId.ButtonVisible": string;
        "DashboardWebStringId.ButtonHidden": string;
        "DashboardWebStringId.Calculations.PreviousValuesCount": string;
        "DashboardWebStringId.Calculations.NextValuesCount": string;
        "DashboardWebStringId.Calculations.RankType": string;
        "DashboardWebStringId.Calculations.RankOrder": string;
        "DashboardWebStringId.TileOptions": string;
        "DashboardWebStringId.MapLockNavigationLocked": string;
        "DashboardWebStringId.MapLockNavigationUnlocked": string;
        "DashboardWebStringId.ConditionalFormatting.BarOptions": string;
        "DashboardWebStringId.ConditionalFormatting.CalculatedBy": string;
        "DashboardWebStringId.ConditionalFormatting.IconType": string;
        "DashboardStringId.FormatRulePredefinedColor": string;
        "DashboardStringId.FormatRuleCustomColor": string;
        "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption": string;
        "DashboardWebStringId.FormatConditionCustomAppearanceCaption": string;
        "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption": string;
        "DashboardWebStringId.EditorAutomaticValue": string;
        "DashboardWebStringId.ConditionalFormatting.Save": string;
        "DashboardWebStringId.ConditionalFormatting.AppearanceType": string;
        "DashboardWebStringId.ConditionalFormatting.FontStyle": string;
        "DashboardWebStringId.ConditionalFormatting.FontFamily": string;
        "DashboardWebStringId.ConditionalFormatting.FontRegular": string;
        "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.None": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag": string;
        "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag": string;
        "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension": string;
        "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension": string;
        "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode": string;
        "DashboardWebStringId.ConditionalFormatting.GradientRangeBar": string;
        "DashboardWebStringId.ConditionalFormatting.RangeGradient": string;
        "DashboardWebStringId.ConditionalFormatting.SegmentNumber": string;
        "DashboardWebStringId.ConditionalFormatting.ValueComparison": string;
        "DashboardWebStringId.ConditionalFormatting.Ranges": string;
        "DashboardWebStringId.ConditionalFormatting.AverageType": string;
        "DashboardWebStringId.ConditionalFormatting.Above": string;
        "DashboardWebStringId.ConditionalFormatting.AboveOrEqual": string;
        "DashboardWebStringId.ConditionalFormatting.Below": string;
        "DashboardWebStringId.ConditionalFormatting.BelowOrEqual": string;
        "DashboardWebStringId.ConditionalFormatting.StyleSettingsType": string;
        "DashboardWebStringId.ConditionalFormatting.Positive": string;
        "DashboardWebStringId.ConditionalFormatting.Negative": string;
        "DashboardWebStringId.ConditionalFormatting.MinimumType": string;
        "DashboardWebStringId.ConditionalFormatting.MaximumType": string;
        "DashboardWebStringId.ConditionalFormatting.DateType": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond": string;
        "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear": string;
        "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem": string;
        "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard": string;
        "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue": string;
        "DashboardWebStringId.Colorization.NoSelectedSchema": string;
        "DashboardWebStringId.Colorization.ColorSchemes": string;
        "DashboardWebStringId.LayoutHasBeenChangedDialogMessage": string;
        "DashboardWebStringId.SaveConfirmationDialogMessage": string;
        "DashboardWebStringId.SaveChangesDialogMessage": string;
        "DashboardWebStringId.Dialog.Save": string;
        "DashboardWebStringId.Dialog.DoNotSave": string;
        "DashboardWebStringId.Dialog.UnsupportedCalculatedField": string;
        "DashboardWebStringId.Colorization.ColorSchemeType": string;
        "DashboardWebStringId.Colorization.MeasureNames": string;
        "DashboardWebStringId.Colorization.AddColor": string;
        "DashboardWebStringId.Colorization.ValidationSelectMeasure": string;
        "DashboardWebStringId.ColoringModeAuto": string;
        "DashboardWebStringId.ColoringModeOff": string;
        "DashboardWebStringId.ColoringModeOn": string;
        "DashboardWebStringId.ColorScheme.Empty": string;
        "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton": string;
        "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip": string;
        "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage": string;
        "DashboardWebStringId.ConditionalFormatting.Miscellaneous": string;
        "DashboardWebStringId.Dashboards": string;
        "DashboardWebStringId.EditInDesigner": string;
        "DashboardWebStringId.NoDashboards": string;
        "DashboardWebStringId.AddNewDashboard": string;
        "DashboardWebStringId.NewDashboard": string;
        "DashboardWebStringId.Binding.Searching": string;
        "DashboardWebStringId.Binding.EmptySearchResult": string;
        "DashboardWebStringId.Errors.AttemptToLoadData": string;
        "DashboardWebStringId.ConditionType": string;
        "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType": string;
        "DashboardWebStringId.FormatRule": string;
        "DashboardWebStringId.Notification.DashboardSaving": string;
        "DashboardWebStringId.Notification.DashboardSaved": string;
        "DashboardWebStringId.Notification.DashboardCanNotBeSaved": string;
        "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable": string;
        "DashboardWebStringId.Notification.AttemptToLoadDashboards": string;
        "DashboardWebStringId.Notification.DashboardLoading": string;
        "DashboardWebStringId.Notification.AttemptToLoadDashboard": string;
        "DashboardWebStringId.Notification.AttemptToConnectionStrings": string;
        "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode": string;
        "DashboardWebStringId.Notification.AttemptToLoadParameterValues": string;
        "DashboardWebStringId.Notification.AttemptToGetUnderlyingData": string;
        "DashboardWebStringId.Notification.AttemptToConvertItemToType": string;
        "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues": string;
        "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource": string;
        "DashboardWebStringId.Notification.AttemptToGetColorScheme": string;
        "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies": string;
        "DashboardWebStringId.Notification.AttemptToPerformExport": string;
        "DashboardWebStringId.Notification.NewDashboardCannotBeCreated": string;
        "DashboardWebStringId.Notification.ErrorHasOccuredOn": string;
        "DashboardWebStringId.Notification.UnsupportedDataSourceType": string;
        "DashboardWebStringId.Notification.QueryDoesNotExist": string;
        "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded": string;
        "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip": string;
        "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip": string;
        "DashboardWebStringId.ConditionalFormatting.Condition": string;
        "DashboardWebStringId.CardLayout.MinWidth": string;
        "DashboardWebStringId.CardLayout.MaxWidth": string;
        "DashboardWebStringId.CardLayout.Editor.CardLayout": string;
        "DashboardWebStringId.CardLayout.Editor.FormatOptions": string;
        "DashboardWebStringId.CardLayout.LayoutOptions": string;
        "DashboardWebStringId.CardLayout.ResetTemplate": string;
        "DashboardWebStringId.CardLayout.ApplyToAllCards": string;
        "DashboardWebStringId.Binding.ValuesPattern": string;
        "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique": string;
        "DashboardWebStringId.Title.ImageEmbedded": string;
        "DashboardWebStringId.Title.ImageLinked": string;
        "DashboardWebStringId.Title.ImageNone": string;
        "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod": string;
        "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod": string;
        "DashboardWebStringId.MobileLayout.Back": string;
        "DashboardWebStringId.MobileLayout.SwitchToViewer": string;
        "DashboardWebStringId.Search": string;
        "DashboardWebStringId.SearchFontFamilies": string;
        "DashboardStringId.DefaultNameTabPage": string;
        "DashboardStringId.DefaultNameChartPane": string;
        "DashboardStringId.DefaultNameChartIndicator": string;
        "DashboardStringId.NewCalculatedFieldNamePrefix": string;
        "DashboardStringId.NewParameterNamePrefix": string;
        "AnalyticsCoreStringId.Parameter_Type_String": string;
        "AnalyticsCoreStringId.Parameter_Type_DateTime": string;
        "AnalyticsCoreStringId.Parameter_Type_Int16": string;
        "AnalyticsCoreStringId.Parameter_Type_Int32": string;
        "AnalyticsCoreStringId.Parameter_Type_Int64": string;
        "AnalyticsCoreStringId.Parameter_Type_Float": string;
        "AnalyticsCoreStringId.Parameter_Type_Double": string;
        "AnalyticsCoreStringId.Parameter_Type_Decimal": string;
        "AnalyticsCoreStringId.Parameter_Type_Boolean": string;
        "AnalyticsCoreStringId.Parameter_Type_Guid": string;
        "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption": string;
        "DataAccessUIStringId.FiltersView": string;
        "DashboardStringId.SeriesTypeGroupArea": string;
        "DashboardStringId.SeriesTypeGroupBar": string;
        "DashboardStringId.SeriesTypeGroupBubble": string;
        "DashboardStringId.SeriesTypeGroupFinancial": string;
        "DashboardStringId.SeriesTypeGroupPointLine": string;
        "DashboardStringId.SeriesTypeGroupRange": string;
        "DashboardStringId.FunctionCategoryWindow": string;
        "DashboardStringId.FunctionCategoryAggregate": string;
        "DashboardStringId.FunctionCategoryAdvanced": string;
        "DashboardStringId.FunctionDescriptionRunningCustomAggregate": string;
        "DashboardStringId.FunctionDescriptionWindowCustomAggregate": string;
        "DashboardStringId.FunctionDescriptionWindowAvg": string;
        "DashboardStringId.FunctionDescriptionRunningMin": string;
        "DashboardStringId.FunctionDescriptionTotal": string;
        "DashboardStringId.FunctionDescriptionRankCompetition": string;
        "DashboardStringId.FunctionDescriptionLookup": string;
        "DashboardStringId.FunctionDescriptionRunningCount": string;
        "DashboardStringId.FunctionDescriptionWindowMax": string;
        "DashboardStringId.FunctionDescriptionVarp": string;
        "DashboardStringId.FunctionDescriptionRunningAvg": string;
        "DashboardStringId.FunctionDescriptionFirst": string;
        "DashboardStringId.FunctionDescriptionWindowMin": string;
        "DashboardStringId.FunctionDescriptionWindowStdDev": string;
        "DashboardStringId.FunctionDescriptionLast": string;
        "DashboardStringId.FunctionDescriptionWindowCount": string;
        "DashboardStringId.FunctionDescriptionCountDistinct": string;
        "DashboardStringId.FunctionDescriptionIndex": string;
        "DashboardStringId.FunctionDescriptionWindowStdDevp": string;
        "DashboardStringId.FunctionDescriptionWindowMode": string;
        "DashboardStringId.FunctionDescriptionRunningMax": string;
        "DashboardStringId.FunctionDescriptionRankPercentile": string;
        "DashboardStringId.FunctionDescriptionRankDense": string;
        "DashboardStringId.FunctionDescriptionWindowSum": string;
        "DashboardStringId.FunctionDescriptionWindowCountDistinct": string;
        "DashboardStringId.FunctionDescriptionStdDevp": string;
        "DashboardStringId.FunctionDescriptionSize": string;
        "DashboardStringId.FunctionDescriptionMedian": string;
        "DashboardStringId.FunctionDescriptionRankModified": string;
        "DashboardStringId.FunctionDescriptionWindowMedian": string;
        "DashboardStringId.FunctionDescriptionRunningSum": string;
        "DashboardStringId.FunctionDescriptionWindowVarp": string;
        "DashboardStringId.FunctionDescriptionWindowVar": string;
        "DashboardStringId.FunctionDescriptionStdDev": string;
        "DashboardStringId.FunctionDescriptionRankUnique": string;
        "DashboardStringId.FunctionDescriptionVar": string;
        "DashboardStringId.FunctionDescriptionAggr": string;
        "DashboardStringId.FunctionDescriptionAggrJoinRule": string;
        "DashboardStringId.FunctionDescriptionWindowDefinition": string;
        "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy": string;
        "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy": string;
        "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc": string;
        "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc": string;
        "DashboardStringId.AggregateExFunctionDescriptionCountNotNull": string;
        "DashboardStringId.AggregateExFunctionDescriptionMode": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear": string;
        "DashboardStringId.FunctionDescriptionGetDateWeekYear": string;
        "DashboardStringId.FunctionDescriptionGetDateWeekYear2": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean": string;
        "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime": string;
        "DashboardStringId.SparklineIndicationModeLine": string;
        "DashboardStringId.SparklineIndicationModeArea": string;
        "DashboardStringId.SparklineIndicationModeBar": string;
        "DashboardStringId.SparklineIndicationModeWinLoss": string;
        "DashboardStringId.DefaultNameDateFilterItem": string;
        "DashboardWebStringId.DateFilter.FilterType": string;
        "DashboardWebStringId.DateFilter.FilterTypeExact": string;
        "DashboardWebStringId.DateFilter.FilterTypeAfter": string;
        "DashboardWebStringId.DateFilter.FilterTypeBefore": string;
        "DashboardWebStringId.DateFilter.FilterTypeBetween": string;
        "DashboardWebStringId.DateFilter.ArrangementMode": string;
        "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight": string;
        "DashboardWebStringId.DateFilter.ArrangementModeHorizontal": string;
        "DashboardWebStringId.DateFilter.ArrangementModeVertical": string;
        "DashboardWebStringId.DateFilter.DatePickerLocation": string;
        "DashboardWebStringId.DateFilter.DatePickerLocationFar": string;
        "DashboardWebStringId.DateFilter.DatePickerLocationNear": string;
        "DashboardWebStringId.DateFilter.DatePickerLocationHidden": string;
        "DashboardStringId.DateFilterDisplayTextPattern": string;
        "DashboardStringId.DateFilterDatePickerButtonDefaultText": string;
        "DashboardStringId.FromDatePeriodCaption": string;
        "DashboardStringId.ToDatePeriodCaption": string;
        "DashboardStringId.FromToDatePeriodCaption": string;
        "DashboardStringId.UniqueNameValidationMessage": string;
        "DashboardStringId.NumberRangeValidationMessage": string;
        "DashboardStringId.GridTotalAutoTemplate": string;
        "DashboardStringId.GridTotalValueTemplate": string;
        "DashboardStringId.GridTotalTemplate": string;
        "DashboardStringId.GridTotalTypeCount": string;
        "DashboardStringId.GridTotalTypeMin": string;
        "DashboardStringId.GridTotalTypeMax": string;
        "DashboardStringId.GridTotalTypeAvg": string;
        "DashboardStringId.GridTotalTypeSum": string;
        "DashboardStringId.ActionShowDataInspector": string;
        "DashboardStringId.InspectedData": string;
        "DashboardStringId.InspectedTypeFormatString": string;
        "DashboardStringId.AggregatedDataType": string;
        "DashboardStringId.RawDataType": string;
        "DashboardStringId.OLAPUnavailableRawData": string;
        "DashboardStringId.SparklineValuesSeparator": string;
        "DashboardStringId.SparklineArgumentValueSeparator": string;
        "DashboardStringId.DataInspectorButtonClose": string;
        "DashboardWebStringId.Grid.FilterClause.ApplyFilter": string;
        "DashboardWebStringId.Grid.FilterClause.ResetOperation": string;
        "DashboardWebStringId.Grid.FilterClause.Contains": string;
        "DashboardWebStringId.Grid.FilterClause.DoesNotContain": string;
        "DashboardWebStringId.Grid.FilterClause.StartsWith": string;
        "DashboardWebStringId.Grid.FilterClause.EndsWith": string;
        "DashboardWebStringId.Grid.FilterClause.Equals": string;
        "DashboardWebStringId.Grid.FilterClause.DoesNotEqual": string;
        "DashboardWebStringId.Grid.FilterClause.Less": string;
        "DashboardWebStringId.Grid.FilterClause.Greater": string;
        "DashboardWebStringId.Grid.FilterClause.LessOrEqual": string;
        "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual": string;
        "DashboardWebStringId.Grid.FilterClause.Between": string;
        "DashboardWebStringId.Grid.FilterClause.BetweenStart": string;
        "DashboardWebStringId.Grid.FilterClause.BetweenEnd": string;
        "DashboardWebStringId.AccordionTab.Content": string;
        "DashboardWebStringId.TextBoxItemEditor.NoFields": string;
        "DashboardWebStringId.TextBoxItemEditor.InsertField": string;
        "DashboardWebStringId.TextBoxItemEditor.EditTextButton": string;
        "DashboardWebStringId.TextBoxItemEditor.DialogCaption": string;
        "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose": string;
        "DashboardWebStringId.TextBoxItemEditor.DialogClose": string;
        "DashboardStringId.StartDate": string;
        "DashboardStringId.EndDate": string;
        "DashboardWebStringId.AccordionTab.MeasureFilter": string;
        "DashboardStringId.FunctionDescriptionAggregateFilter": string;
        "DashboardWebStringId.TabPages": string;
        "DashboardWebStringId.More": string;
        "DashboardStringId.MeasureFilterCaptionFormatString": string;
        "DashboardWebStringId.AccordionTab.ItemFilter": string;
        "DashboardWebStringId.AccordionTab.VisibleDataFilter": string;
        "DashboardStringId.LayoutDimensionModeAuto": string;
        "DashboardStringId.LayoutDimensionModeFixed": string;
        "DashboardWebStringId.DesignerToolbar.Width": string;
        "DashboardWebStringId.DesignerToolbar.Height": string;
        "DashboardWebStringId.DesignerToolbar.Pixels": string;
        "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError": string;
        "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage": string;
    };
}
declare module DevExpress.Dashboard.Internal.Data {
    export function setLocalization(localization: {
        [key: string]: string;
    }): void;
}
declare module DevExpress.Dashboard.Data {
    export type PrimitiveType = boolean | string | number | Date;
}
declare module DevExpress.Dashboard.Data {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    export type ItemDataAxisName = "Default" | "Series" | "Argument" | "Sparkline" | "Column" | "Row";
    export type AxisValuesDictionary = {
        [axisName: string]: Array<DevExpress.Dashboard.Data.PrimitiveType>;
    };
    export interface ItemData {
        createTuple(values: Array<ItemDataAxisPoint> | Array<{
            axisName: ItemDataAxisName;
            value: Array<DevExpress.Dashboard.Data.PrimitiveType>;
        }>): ItemDataAxisPointTuple;
        getAxis(axisName: ItemDataAxisName): ItemDataAxis;
        getAxisNames(): Array<ItemDataAxisName>;
        getDataMembers(): Array<string>;
        getDeltas(): Array<ItemDataDelta>;
        getDeltaValue(deltaId: string): ItemDataDeltaValue;
        getDimensions(axisName: ItemDataAxisName): Array<ItemDataDimension>;
        getMeasures(): Array<ItemDataMeasure>;
        getMeasureValue(measureId: string): ItemDataMeasureValue;
        getSlice(value: ItemDataAxisPointTuple | ItemDataAxisPoint): ItemData;
    }
    export interface ItemDataAxis {
        getDimensions(): Array<ItemDataDimension>;
        getPointByUniqueValues(values: Array<DevExpress.Dashboard.Data.PrimitiveType>): ItemDataAxisPoint;
        getPoints(): Array<ItemDataAxisPoint>;
        getPointsByDimension(dimensionId: string): Array<ItemDataAxisPoint>;
        getRootPoint(): ItemDataAxisPoint;
    }
    export interface ItemDataAxisPoint {
        getAxisName(): string;
        getChildren(): Array<ItemDataAxisPoint>;
        getDimension(): ItemDataDimension;
        getDimensions(): Array<ItemDataDimension>;
        getDimensionValue(dimensionId?: string): ItemDataDimensionValue;
        getDisplayText(): string;
        getParent(): ItemDataAxisPoint;
        getUniqueValue(): DevExpress.Dashboard.Data.PrimitiveType;
        getValue(): DevExpress.Dashboard.Data.PrimitiveType;
    }
    export interface ItemDataAxisPointTuple {
        getAxisPoint(axisName?: ItemDataAxisName): ItemDataAxisPoint;
    }
    export interface ItemDataDelta {
        actualMeasureId: string;
        id: string;
        name: string;
        targetMeasureId: string;
    }
    export interface ItemDataDeltaValue {
        getAbsoluteVariation(): ItemDataMeasureValue;
        getActualValue(): ItemDataMeasureValue;
        getDisplaySubValue1(): ItemDataMeasureValue;
        getDisplaySubValue2(): ItemDataMeasureValue;
        getDisplayValue(): ItemDataMeasureValue;
        getIndicatorType(): ItemDataMeasureValue;
        getIsGood(): ItemDataMeasureValue;
        getPercentOfTarget(): ItemDataMeasureValue;
        getPercentVariation(): ItemDataMeasureValue;
        getTargetValue(): ItemDataMeasureValue;
    }
    export interface ItemDataDimension {
        dataMember: string;
        dateTimeGroupInterval: string;
        id: string;
        name: string;
        textGroupInterval: string;
        format: (value: any) => string;
    }
    export interface ItemDataDimensionValue {
        getDisplayText(): string;
        getUniqueValue(): DevExpress.Dashboard.Data.PrimitiveType;
        getValue(): DevExpress.Dashboard.Data.PrimitiveType;
    }
    export interface ItemDataMeasure {
        dataMember: string;
        id: string;
        name: string;
        summaryType: string;
        format: (value: any) => string;
    }
    export interface ItemDataMeasureValue {
        getDisplayText(): string;
        getValue(): number;
    }
    export interface RequestUnderlyingDataParameters {
        axisPoints?: Array<ItemDataAxisPoint>;
        dataMembers?: Array<string>;
        uniqueValuesByAxisName?: AxisValuesDictionary;
        valuesByAxisName?: AxisValuesDictionary;
    }
    export interface ItemUnderlyingData {
        getDataMembers(): Array<string>;
        getDisplayNames(): Array<string>;
        getRequestDataError(): string;
        getRowCount(): number;
        getRowValue(rowIndex: number, columnName: string): DevExpress.Dashboard.Data.PrimitiveType;
        isDataReceived(): boolean;
    }
    export interface RangeFilterSelection {
        minimum: number | Date;
        maximum: number | Date;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export class dataSlice implements SliceIterator {
        _sliceKey: number;
        _sliceDTO: any;
        _decode: {
            (keyId: string, code: number): any;
        };
        _encode: any;
        _keyIndexById: {
            [id: string]: number;
        };
        _valueIdByKey: {
            [key: number]: string;
        };
        constructor(sliceKey: number, sliceDTO: any, decode: {
            (keyId: string, code: number): any;
        }, encode: any);
        getRowCount(): number;
        getKey(): number;
        getValue(rowKey: any, valueId: any): any;
        getRowValues(rowKey: any): {
            [valueId: string]: any;
        };
        getRowKeyValues(rowKey: number[]): {
            [keyId: string]: any;
        };
        _getRowDTO(rowKey: any): {
            [key: number]: any;
        };
        getKeyValue(rowKey: number[], keyId: string): any;
        getKeyIds(): string[];
        getValueIds(): string[];
        forEach(action: {
            (dataRowKey: DataRowKey): any;
        }): void;
        append(slice: dataSlice): SliceIterator;
        addRow(keyValues: {
            [keyId: string]: any;
        }, values: {
            [valueId: string]: any;
        }): any[];
        _parseKey(key: any): number[];
        _stringifyKey(key: any): string;
    }
    export class sliceRepository {
        _sliceListDTO: any[];
        _sliceList: dataSlice[];
        _rowKeyConvertMap: any;
        _sliceJoinCache: any;
        _decode: {
            (keyId: string, code: number): any;
        };
        _encode: any;
        constructor(sliceListDTO: any[], decode: {
            (keyId: string, code: number): any;
        }, encode: any);
        _initialize(decode: any): void;
        getAll(): dataSlice[];
        getKey(keyIds: string[]): number;
        get(vsKey: any): dataSlice;
        getOrCreate(keyIds: any): dataSlice;
        findDataRowKey(sliceKey: any, dataRowKey: any): DataRowKey;
        getCrossValue(dataRows: DataRowKey[], valueId: any): any;
        getKeyValue(dataRow: any, keyId: string): any;
        getValue(dataRow: any, valueId: any): any;
        isEmpty(): boolean;
        _joinSliceKey(key1: any, key2: any): any;
        _getByKeyIds(keyIds: string[]): dataSlice;
        _getConvertMap(sliceFromKey: any, sliceToKey: any): any;
    }
    export interface SliceIterator {
        forEach(action: {
            (dataRowKey: DataRowKey): any;
        }): void;
    }
    export interface DataRowKey {
        sliceKey: number;
        rowKey: number[];
    }
}
declare module DevExpress.Dashboard.Data {
    export let specialValues: {
        nullValueGuid: string;
        othersValueGuid: string;
        olapNullValueGuid: string;
        errorValueGuid: string;
    };
}
declare module DevExpress.Dashboard.Internal.Model {
    import DayOfWeekNumber = DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
    export function tryConvertToDateTime(value: any): any;
    export function patchDateTime(storageDTO: any): void;
    export function toStringArray(value: any): any;
    export function toUtcDate(value: any): Date;
    export function fromUtcDateToString(date: Date): string;
    export function serializeDate(date: Date): string;
    export function clone(date: Date): Date;
    export function addDays(date: Date, days: number): void;
    export type CalendarWeekRule = "FirstDay" | "FirstFullWeek" | "FirstFourDayWeek";
    export function getIsStartOfFirstWeek(calendarWeekRule: CalendarWeekRule): {
        (date: any): boolean;
    };
    export function divideIntoWeeks(start: Date, end: Date, firstDayOfWeek: DevExpress.Dashboard.Internal.Data.DayOfWeekNumber, calendarWeekRule: CalendarWeekRule, add: {
        (date: Date): void;
    }): void;
    export function getStartOfFirstWeek(year: number, firstDayOfWeek: DevExpress.Dashboard.Internal.Data.DayOfWeekNumber, calendarWeekRule: CalendarWeekRule): Date;
}
declare module DevExpress.Dashboard {
    export class LegacySettings {
        static useLegacyTreeView: boolean;
        static _useCardLegacyLayout: boolean;
        static showExtendedDateOccurringList: boolean;
        static showUndoRedoButtonsInToolbox: boolean;
    }
    export class DashboardPrivateSettings {
        static customNumericFormatMode: "Disabled" | "Hidden" | "Enabled";
        static useCurrencyAccountingStyle: boolean;
        static gridColumnFilterMode: "CaseSensitive" | "CaseInsensitive";
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export let ALL_ELEMENT: {
        value: {
            all: boolean;
        };
        key: number;
        readonly text: any;
        readonly html: any;
        isAll: boolean;
    };
    export class localizer {
        static getString(key: any): string;
        static getPredefinedString(value: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import DataItemNumericFormatType = DevExpress.Dashboard.Model.DataItemNumericFormatType;
    import DataItemNumericUnit = DevExpress.Dashboard.Model.DataItemNumericUnit;
    import DateFormat = DevExpress.Dashboard.Model.DateFormat;
    import DateTimeFormat = DevExpress.Dashboard.Model.DateTimeFormat;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DayOfWeekFormat = DevExpress.Dashboard.Model.DayOfWeekFormat;
    import ExactDateFormat = DevExpress.Dashboard.Model.ExactDateFormat;
    import HourFormat = DevExpress.Dashboard.Model.HourFormat;
    import MonthFormat = DevExpress.Dashboard.Model.MonthFormat;
    import QuarterFormat = DevExpress.Dashboard.Model.QuarterFormat;
    import YearFormat = DevExpress.Dashboard.Model.YearFormat;
    import CalendarWeekRule = DevExpress.Dashboard.Internal.Model.CalendarWeekRule;
    export let defaultNumericFormat: NumericFormatInfo;
    export let defaultPercentFormat: NumericFormatInfo;
    export let defaultScientificFormat: NumericFormatInfo;
    type DateFormatInfoType = "abbr" | "full" | "long" | "num" | "short" | "timeOnly";
    export let _types: {
        [name: string]: DateFormatInfoType;
    };
    export function format(value: any, formatViewModel: ValueFormatViewModel): string;
    export function formatByFormatInfo(value: any, formatInfo: NumericFormatInfo | DateTimeFormatInfo): any;
    export function formatFilterValue(filterValue: any): any;
    export function constructIntervalFilterText(rangeText: {
        left: string;
        right: string;
    }): any;
    export function formatNumeric(value: any, numericFormatViewModel: NumericFormatViewModel): string;
    export function formatDateTime(value: any, dateFormatViewModel: DateTimeFormatViewModel): string;
    export function formatObject(value: any): string;
    export function formatPercentValue(value: any): string;
    export function formatScientificAxisValue(value: any): string;
    export function formatAxisValue(value: any, axisMin: any, axisMax: any): string;
    export function getAxisFormat(axisMin: any, axisMax: any): NumericFormatInfo;
    export function calculateUnitPower(axisMin: any, axisMax: any): 0 | 1 | 2 | 3;
    export function calculatePrecision(axisMin: any, axisMax: any): number;
    export function convertToFormat(formatViewModel: ValueFormatViewModel): NumericFormatInfo | DateTimeFormatInfo;
    export function _convertToNumberFormat(numericFormatViewModel: NumericFormatViewModel): NumericFormatInfo;
    export function _convertToDateFormat(dateFormatViewModel: DateTimeFormatViewModel): DateTimeFormatInfo;
    export function _getSyntheticDateTimeGroupInterval(groupInterval: DevExpress.Dashboard.Model.DateTimeGroupInterval, exactDateFormat: DevExpress.Dashboard.Model.ExactDateFormat): DevExpress.Dashboard.Model.DateTimeGroupInterval | "DateYear";
    export function _convertNumericFormat(formatType: DevExpress.Dashboard.Model.DataItemNumericFormatType): NumericFormatInfoType;
    export function _convertNumericUnit(numericUnit: DevExpress.Dashboard.Model.DataItemNumericUnit): string | number;
    export interface ValueFormatViewModel {
        NumericFormat?: NumericFormatViewModel;
        DateTimeFormat?: DateTimeFormatViewModel;
    }
    export interface NumericFormatViewModel {
        FormatType?: DevExpress.Dashboard.Model.DataItemNumericFormatType;
        Unit?: DevExpress.Dashboard.Model.DataItemNumericUnit;
        Currency?: string;
        IncludeGroupSeparator?: boolean;
        ForcePlusSign?: boolean;
        SignificantDigits?: number;
        Precision?: number;
        CustomFormatString?: string;
    }
    export interface DateTimeFormatViewModel {
        GroupInterval?: DevExpress.Dashboard.Model.DateTimeGroupInterval;
        ExactDateFormat?: DevExpress.Dashboard.Model.ExactDateFormat;
        DateFormat?: DevExpress.Dashboard.Model.DateFormat;
        DateHourFormat?: DevExpress.Dashboard.Model.DateTimeFormat;
        DateHourMinuteFormat?: DevExpress.Dashboard.Model.DateTimeFormat;
        DateTimeFormat: DevExpress.Dashboard.Model.DateTimeFormat;
        YearFormat: DevExpress.Dashboard.Model.YearFormat;
        QuarterFormat?: DevExpress.Dashboard.Model.QuarterFormat;
        MonthFormat?: DevExpress.Dashboard.Model.MonthFormat;
        HourFormat?: DevExpress.Dashboard.Model.HourFormat;
        DayOfWeekFormat?: DevExpress.Dashboard.Model.DayOfWeekFormat;
        FirstDayOfWeek?: DayOfWeekNumber;
        CalendarWeekRule?: DevExpress.Dashboard.Internal.Model.CalendarWeekRule;
    }
    export type DayOfWeekNumber = 0 | 1 | 2 | 3 | 4 | 5 | 6;
    export interface NumericFormatInfo {
        format?: NumericFormatInfoType;
        precision?: number;
        currency?: string;
        includeGroupSeparator?: boolean;
        significantDigits?: number;
        unitPower?: string | number;
        plus?: boolean;
        showTrailingZeros?: boolean;
        type?: string;
        unlimitedIntegerDigits?: boolean;
        dateType?: DateFormatInfoType;
    }
    export type NumericFormatInfoType = "fixedPoint" | "currency" | "exponential" | "percent" | "general";
    export type DateTimeGroupIntervalCamelCase = "year" | "quarter" | "month" | "day" | "hour" | "minute" | "second" | "dayOfYear" | "dayOfWeek" | "weekOfYear" | "weekOfMonth" | "quarterYear" | "monthYear" | "weekYear" | "dayMonthYear" | "dateHour" | "dateHourMinute" | "dateHourMinuteSecond" | "none";
    export type DateTimeFormatInfoType = DateTimeGroupIntervalCamelCase | "dateYear";
    export interface DateTimeFormatInfo {
        [key: string]: any;
        format: DateTimeFormatInfoType;
        dateType: DateFormatInfoType;
        firstDayOfWeek?: DayOfWeekNumber;
        calendarWeekRule?: DevExpress.Dashboard.Internal.Model.CalendarWeekRule;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Data {
    import DataRowKey = DevExpress.Dashboard.Internal.Data.DataRowKey;
    import dataSlice = DevExpress.Dashboard.Internal.Data.dataSlice;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import ItemDataDimension = DevExpress.Dashboard.Data.ItemDataDimension;
    import ItemDataDimensionValue = DevExpress.Dashboard.Data.ItemDataDimensionValue;
    export let dataStorageSpecialIds: {
        DisplayText: string;
        Value: string;
    };
    export class itemDataAxisPoint implements ItemDataAxisPoint {
        _info: LevelInfo;
        _dataRowKey: DevExpress.Dashboard.Internal.Data.DataRowKey;
        _children: any;
        _parent: any;
        constructor(levelInfo: LevelInfo, dataRowKey: DevExpress.Dashboard.Internal.Data.DataRowKey);
        _getSpecialValue(specialId: any): any;
        getUniqueValue(): DevExpress.Dashboard.Data.PrimitiveType;
        getValue(): DevExpress.Dashboard.Data.PrimitiveType;
        _getLevel(): number;
        _getServerText(): any;
        getKey(): DevExpress.Dashboard.Internal.Data.DataRowKey;
        getAxisName(): DevExpress.Dashboard.Data.ItemDataAxisName;
        getChildren(): Array<itemDataAxisPoint>;
        getParent(): itemDataAxisPoint;
        getAvaliableLeafPoints(): Array<itemDataAxisPoint>;
        _setParent(parent: any): void;
        _setChildren(children: itemDataAxisPoint[]): void;
        getParentByDimensionId(dimensionId: string): itemDataAxisPoint;
        getDimensionValue(dimensionId?: string): DevExpress.Dashboard.Data.ItemDataDimensionValue;
        getDisplayText(): string;
        getDimension(): DevExpress.Dashboard.Data.ItemDataDimension;
        getDimensions(): Array<DevExpress.Dashboard.Data.ItemDataDimension>;
        getAxisPath(): Array<itemDataAxisPoint>;
        getUniquePath(): Array<DevExpress.Dashboard.Data.PrimitiveType>;
        getValuePath(includeProc: any): Array<DevExpress.Dashboard.Data.PrimitiveType>;
        getDisplayPath(includeProc?: any): Array<string>;
        getValues(): void;
        _selectIncludedPath(includeProc: any, pointProc: any): any;
        _selectPath(predicate: {
            (point: itemDataAxisPoint): any;
        }): any;
        getPointsByDimensionId(dimensionId: string): Array<itemDataAxisPoint>;
        getDisplayTextsByDimensionId(dimensionId: any): Array<string>;
        _getPointsByDimensionId(dimensionId: any, pointProc: any): any[];
        _findPoints(dimensionId: any, result: any, pointProc: any): void;
    }
    export interface LevelInfo {
        axisName: DevExpress.Dashboard.Data.ItemDataAxisName;
        metaData: any;
        dataSlice: DevExpress.Dashboard.Internal.Data.dataSlice;
        level: number;
        getMetaDataValue: {
            (dataRowKey: DevExpress.Dashboard.Internal.Data.DataRowKey, valueId: any): any;
        };
        getBaseValue: {
            (dataRowKey: DevExpress.Dashboard.Internal.Data.DataRowKey): any;
        };
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    export class itemDataTuple implements ItemDataAxisPointTuple {
        private _axisPoints;
        constructor(axisPoints: Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>);
        getAxisPoint(axisName?: DevExpress.Dashboard.Data.ItemDataAxisName): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    }
    export type itemDataTupleValue = {
        axisName: DevExpress.Dashboard.Data.ItemDataAxisName;
        value: any[];
    };
    export type itemDataTupleValues = itemDataTupleValue[];
}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    export let type: {
        isDefined: (object: any) => boolean;
        isFunction: (object: any) => boolean;
        isString: (object: any) => boolean;
        isNumeric: (object: any) => boolean;
        isBoolean: (object: any) => boolean;
    };
    export let KpiValueMode: {
        Measure: string;
        Delta: string;
    }, pivotArea: {
        column: string;
        row: string;
        data: string;
    }, gaugeViewType: {
        CircularFull: string;
        CircularHalf: string;
        CircularQuarterRight: string;
        CircularQuarterLeft: string;
        CircularThreeFourth: string;
        LinearHorizontal: string;
        LinearVertical: string;
    }, tooltipContainerSelector: string;
    export function toColor(numericColorValue: any): any;
    export function getRGBColor(r: number, g: number, b: number, a: number): string;
    export function allowSelectValue(values: any[]): boolean;
    export function isVulnerable(value: string): boolean;
    export function encodeHtml(str: any): string;
    export function decodeHtml(value: any): string;
    export function moveContent(source: HTMLElement, dest: HTMLElement, clearSource: boolean): void;
    export function arrayContains(container: Array<Array<any>>, part: Array<any>): boolean;
    export function arrayEquals(array1: Array<any>, array2: Array<any>): boolean;
    export function checkValuesAreEqual(value1: any, value2: any, nullValuesEquals?: boolean, emptyArraysEquals?: boolean): boolean;
    export function checkTuplesAreEqual(tuple1: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, tuple2: DevExpress.Dashboard.Internal.Data.itemDataTupleValues): boolean;
    export function checkArrayContainsTuple(array: any, tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues): any;
    export function getAxisPointValue(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, axisName: DevExpress.Dashboard.Data.ItemDataAxisName): any[];
    export function getTagValue(tag: any): any;
    export function getValueIndex(matrix: any, vector: any): number;
    export function treeWalker(rootNode: any, childrenFunc: any): {
        walk: (func: any) => void;
        walkLeaf: (func: any) => void;
        _walkInternal: (node: any, parent: any, func: any, callPredicate: any) => void;
    };
    export function getParentClasses($obj: any): any[];
    export function wrapHash(valuesArray: any[]): {
        [value: string]: boolean;
    };
    export function areNotOrderedListsEqual(list1: any, list2: any): boolean;
    export function pxToNumber(px: any): number;
    export function debounce(func: any, wait: any): (...args: any[]) => void;
    export function asyncDebounce(func: any, action: any): (...args: any[]) => void;
    export function distinct<T>(array: Array<T>, compare?: (value1: T, value2: T) => boolean): Array<T>;
    export function intersect<T>(array1: Array<T>, array2: Array<T>, compare?: (value1: T, value2: T) => boolean): Array<T>;
    export function union<T>(array1: Array<T>, array2: Array<T>, compare?: (value1: T, value2: T) => boolean): Array<T>;
    export function minus<T>(array1: Array<T>, array2: Array<T>, compare?: (value1: T, value2: T) => boolean): Array<T>;
    export function groupByProperty<TProperty, TSource>(array: Array<TSource>, property: string): Array<TSource[]>;
    export function groupBy<TKey, TSource>(array: Array<TSource>, getKey: (item: TSource) => TKey): Array<TSource[]>;
    export function mapMany<T, U>(array: T[], callbackfn: (value: T, index: number, array: T[]) => U[]): U[];
    export function deepStrictEquals(x: any, y: any): boolean;
    export function strictEquals(x: any, y: any, equalsCore: (x: any, y: any) => boolean): boolean;
    export class LocalStorageHelper {
        private static _getLocalStorage;
        static getItem(key: string, defaultValue?: string): string;
        static setItem(key: string, value: string): void;
    }
    export function findIndex(array: Array<any>, predicate: {
        (value: any): boolean;
    }): number;
    export function findLastIndex(array: Array<any>, predicate: {
        (value: any): boolean;
    }): number;
    export function createSvgIconElement(iconId: string): Element;
    export function renderImage(container: HTMLElement, imageData: any): void;
    export class RedBlackTree<TKey, TValue> implements IDictionary<TKey, TValue> {
        private _root;
        private _compare;
        constructor(compare: {
            (key1: TKey, key2: TKey): number;
        });
        getOrAdd(key: TKey, getValue: {
            (): TValue;
        }): {
            added: boolean;
            value: TValue;
        };
        private _rebalance;
        private _rotateLeft;
        private _rotateRight;
    }
    export interface IDictionary<TKey, TValue> {
        getOrAdd(key: TKey, createValue: {
            (): TValue;
        }): {
            added: boolean;
            value: TValue;
        };
    }
    export function unwrapSpecialNullValue(value: any): any;
}
declare module DevExpress.Dashboard.Internal.Data {
    import DxElement = DevExpress.core.DxElement;
    import DxPromise = DevExpress.core.utils.DxPromise;
    export type dxRenderer = {
        dxRenderer: true;
    };
    export const $promiseAdapter: <T>(promise: JQuery.Promise<T, any, any> | Promise<T>) => Promise<T>;
    export const $unwrap: (element: JQuery | Element | HTMLElement | dxRenderer) => HTMLElement;
    export const $wrap: (element: JQuery | Element | HTMLElement) => JQuery;
    export const wrapPublicElement: (element: HTMLElement) => DevExpress.core.DxElement;
    export const extend: (target: any, source1: any, ...sources: any[]) => any;
    export const deepExtend: (target: any, ...sources: any[]) => any;
    export const isPlainObject: (object: any) => boolean;
    export const getWidth: (element: HTMLElement | Element | Window) => any;
    export const getHeight: (element: HTMLElement | Element | Window) => any;
    export const getOuterWidth: (element: HTMLElement | Element) => any;
    export const getOuterHeight: (element: HTMLElement | Element) => any;
    export const wrapInner: (element: HTMLElement | Element, wrappingElement: HTMLElement | Element) => any;
    export const accessJQueryData: (element: HTMLElement, key: string, value?: any) => any;
    export const isVisible: (element: HTMLElement) => any;
    export const closest: (element: HTMLElement, css: any) => HTMLElement;
    export const createJQueryCallbacks: () => JQuery.Callbacks<Function>;
    export const createJQueryDeferred: <TR = any, TJ = any, TN = any>() => JQuery.Deferred<TR, TJ, TN>;
    export const jqueryWhen: <TR1 = never, TJ1 = never>(...deferreds: Array<JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1>) => JQuery.Promise<TR1, TJ1, never>;
    export const jqueryWhenArray: <TR1 = never, TJ1 = never>(deferreds: Array<JQuery.Promise<TR1, TJ1> | JQuery.Thenable<TR1> | TR1>) => JQuery.Promise<TR1, TJ1, never>;
    export const jqueryQueryParam: (value: Object) => string;
    export const jqueryOffset: (element: HTMLElement) => any;
    export const createJQueryElement: (element: string, options: Object) => any;
}
declare module DevExpress.Dashboard.Internal.Data {
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    export let invariantCurrencyIdentifier: string;
    export let invariantCurrencySymbol: string;
    export class DashboardFormatHelper {
        static defaultLargeNumberFormatPostfixes: {
            1: string;
            2: string;
            3: string;
            4: string;
        };
        static romanDigits: string[];
        static defaultQuarterFormat(): any;
        static format(value: any, format: DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo): string;
        static _applyNumberFormat(value: any, formatConfig: any): any;
        static _getQuarterString(date: any, format: any): any;
        static _formatDateEx(value: any, formatInfo: DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo): string;
        static _getMinimalPossibleValue(formatType: any, precision: any): number;
        static _formatNumberEx(value: any, formatInfo: DevExpress.Dashboard.Internal.Data.NumericFormatInfo): string;
        static _getUnitFormatSettings(value: any, formatInfo: DevExpress.Dashboard.Internal.Data.NumericFormatInfo): {
            unitPower: string | number;
            precision: number;
            showTrailingZeros: boolean;
            includeGroupSeparator: boolean;
        };
        static _insertUnitPostfix(formattedNumber: any, unitPower: any): any;
        static _generateNumericFormatConfig(settings: any, value: any): any;
        static _countSignsAfterPoint(num: any, formatType: any): number;
        static _excludeTrailingZeros(strValue: any, floatingSymbol: any): any;
        static _normalizeFormatConfig(format: any, precision: any, value: any): any;
        static _getNumberByPower(number: any, power: any, base: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export function resetGlobalSizeCache(): void;
    /**
     * This decorator can be used only with pure function without side effects and simple type parameters.
     * Be VERY carefully when use this decorator
     * /
     * @param cacheKey
     */
    export function cacheable(cacheKey: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {
        value: (...args: any[]) => any;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export type Direction = "width" | "height";
    export interface ISize {
        width: number;
        height: number;
    }
    export interface SizeEx extends ISize {
        plus: {
            (arg: ISize): SizeEx;
        };
        minus: {
            (arg: ISize): SizeEx;
        };
        compareByDirections: {
            (size: ISize): Direction[];
        };
        constrain: {
            (constraints: Constraints): SizeEx;
        };
        clone: {
            (): SizeEx;
        };
    }
    export interface Constraints {
        min: ISize;
        max: ISize;
    }
    export interface ConstraintsEx {
        min: SizeEx;
        max: SizeEx;
        consolidate: {
            (sourceConstraints: Constraints, consolidateDirection: Direction): ConstraintsEx;
        };
        isFixed: {
            (direction: Direction): boolean;
        };
        [privateFuncName: string]: any;
    }
    export let size: (w?: number, h?: number) => SizeEx;
    export let constraints: (pMin: SizeEx, pMax: SizeEx) => ConstraintsEx;
    export let nonClientElement: (width: any, height: any) => {
        getBounds: () => SizeEx;
    };
    export let getCrossDirection: {
        (direction: Direction): Direction;
    };
    export let defConstraints: (valueMin?: number, valueMax?: number) => ConstraintsEx;
    export let defSizeInPercents: (direction: Direction, value: number) => SizeEx;
    export let checkRange: (value: number, min: number, max: number) => boolean;
    export let ensureRange: (value: number, min: number, max: number) => number;
    export let deepCloneObject: (injectObject: any, sourceObject: any, noDeepCopyPropsValues: any) => any;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxScrollView = DevExpress.ui.dxScrollView;
    import ISize = DevExpress.Dashboard.Internal.Viewer.ISize;
    export class RenderHelper {
        static html(element: HTMLElement, content: string, encodeHtml: boolean): void;
        static rectangleHtml(color: any, width: any, height: any, rightMargin?: string): HTMLDivElement;
        static getActualBorder($element: JQuery): {
            width: number;
            height: number;
        };
        static getActualSize($element: any, collapse?: boolean): {
            width: number;
            height: number;
        };
        static getDefaultPalette(): string[];
        static getScrollable(element: HTMLElement): DevExpress.ui.dxScrollView;
        static updateScrollable(element: HTMLElement): void;
        static wrapScrollable(container: HTMLElement, parentOverflow: any, direction: any): HTMLElement;
        static getThemeBaseElement: () => HTMLElement;
        static getElementBox(element: HTMLElement): {
            width: any;
            height: any;
        };
        static processElement($element: JQuery, processElement: () => any): any;
        static getElementBoxFloat(e: Element): {
            width: number;
            height: number;
        };
        static widgetIncidentOccurred(e: any): void;
        static getBorderSizeByClasses(classNames: string[]): DevExpress.Dashboard.Internal.Viewer.ISize;
    }
    export function createFakeObjects(classNames: any, cssOptions: any): {
        firstElement: any;
        lastElement: any;
        remove: () => void;
    };
}
declare module DevExpress.Dashboard.Internal.Data {
    import DataRowKey = DevExpress.Dashboard.Internal.Data.DataRowKey;
    import dataSlice = DevExpress.Dashboard.Internal.Data.dataSlice;
    import SliceIterator = DevExpress.Dashboard.Internal.Data.SliceIterator;
    import sliceRepository = DevExpress.Dashboard.Internal.Data.sliceRepository;
    export class dataStorage {
        _sliceRep: DevExpress.Dashboard.Internal.Data.sliceRepository;
        constructor(dto: any);
        _createSliceRep(dto: any): DevExpress.Dashboard.Internal.Data.sliceRepository;
        _initialize(): void;
        getSlices(): DevExpress.Dashboard.Internal.Data.dataSlice[];
        getSlice(sliceKey: any): DevExpress.Dashboard.Internal.Data.dataSlice;
        getSliceKey(keyIds: string[]): number;
        getSliceByIds(keyIds: any): DevExpress.Dashboard.Internal.Data.dataSlice;
        getOrCreateSlice(keyIds: any): DevExpress.Dashboard.Internal.Data.dataSlice;
        findDataRowKey(sliceKey: any, dataRowKey: any): DevExpress.Dashboard.Internal.Data.DataRowKey;
        getCrossValue(dataRowKeys: DevExpress.Dashboard.Internal.Data.DataRowKey[], valueId: any): any;
        getKeyValue(dataRow: any, keyId: string): any;
        getValue(dataRow: any, valueId: any): any;
        isEmpty(): boolean;
        insert(ds: dataStorage, sortOrderSlices?: any): {
            [key: number]: DevExpress.Dashboard.Internal.Data.SliceIterator;
        };
        insertSlice(ds: dataStorage, keyIds: any): void;
    }
}
declare module DevExpress.Dashboard.Model {
    export interface IDisposable {
        dispose(): void;
    }
    export type DisposableType = IDisposable | ko.Subscription | ko.ComputedFunctions;
    export class DisposableObject implements IDisposable {
        protected _disposables: Array<DisposableType>;
        protected disposed: boolean;
        protected toDispose(...disposables: DisposableType[]): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    export class NameGenerator {
        static validateName(object: any, nameCollection: Array<any>, propertyName: string, startIndex?: number, addWhiteSpace?: boolean): void;
        static isValidName(name: string, nameCollection: Array<any>, propertyName: string): boolean;
        static generateName(namePrefix: string, nameCollection: Array<any>, propertyName: string, startIndex?: number, addWhiteSpace?: boolean): string;
    }
    export function isComponentNameValid(name: string): boolean;
    export class Guard {
        static isNotFalsy(object: any, name: string): void;
        static requires(condition: boolean, message?: string): void;
    }
    export class EnumManager {
        static getNamesAndValues(enumType: any): {
            name: any;
            value: any;
        }[];
        static getNames(enumType: any): Array<any>;
        static getValues(enumType: any): Array<any>;
        private static _getObjectValues;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import DxPromise = DevExpress.core.utils.DxPromise;
    import DataSource = DevExpress.data.DataSource;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    export type KnockoutEntry<T = any> = ko.Observable<T> | ko.Computed<T>;
    export function subscribeArrayChange<T>(array: ko.ObservableArray<T>, handlers: {
        added?: (item: T, index?: number) => void;
        deleted?: (item: T) => void;
    }): ko.Subscription;
    export function subscribeWithPrev<T>(target: ko.Subscribable<T>, callback: (oldValue: T, newValue: T) => void): DevExpress.Dashboard.Model.IDisposable;
    export function subscribeArrayChangeWithCancel<T>(target: ko.ObservableArray<T>, callback: (changes: ko.utils.ArrayChanges<T>) => boolean): DevExpress.Dashboard.Model.IDisposable;
    export function syncArrayHelper<T, U>(sourceArray: ko.ObservableArray<T>, destArray: ko.ObservableArray<U>, addHandler: (value: T) => U): ko.Subscription;
    export function subscribeToArrayItemProperties<T>(array: ko.ObservableArray<T>, handler: (item: T) => DevExpress.Dashboard.Model.DisposableType | DevExpress.Dashboard.Model.DisposableType[]): DevExpress.Dashboard.Model.DisposableType;
    export function subscribeAndPerform<T>(subscribable: ko.Subscribable<T>, action: (value: T) => void): DevExpress.Dashboard.Model.DisposableType;
    export function safeSubscribe<T>(observables: {
        [K in keyof T]: ko.Subscribable<T[K]>;
    }, handler: (args: T) => DevExpress.Dashboard.Model.DisposableType | void): DevExpress.Dashboard.Model.DisposableType;
    export function safeComputed<T, V>(observables: {
        [K in keyof T]: ko.Subscribable<T[K]>;
    }, handler: (args: T) => V): ko.PureComputed<V>;
    export function createObservableDataSource<T, V>(observables: {
        [K in keyof T]: ko.Subscribable<T[K]>;
    }, load: (args: T) => DevExpress.core.utils.DxPromise<any[]> | Array<any>): {
        dataSource: DevExpress.data.DataSource<any, any>;
        dispose: () => void;
    };
}
declare module DevExpress.Dashboard.Internal.Model {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    export interface IDashboardComponent {
        getUniqueNamePrefix: () => string;
    }
    export class DashboardUniqueNameGenerator implements IDisposable {
        private _propertyName;
        private _startIndex;
        private _componentsCollections;
        private _disposables;
        constructor(_propertyName: string, _startIndex: number, ...collections: Array<ko.ObservableArray<IDashboardComponent>>);
        private _ensureUniqueName;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    export interface ObsoleteMemberInfo {
        target: Object;
        memberName: string;
        oldMemberDisplayName?: string;
        newMemberDisplayName?: string;
        warmMessage?: string;
        ignoreWarmMessage?: boolean;
        action: (...args: any[]) => any;
    }
    export let ClassMemberType: {
        method: string;
        property: string;
    };
    export function defineObsoleteProperty(info: ObsoleteMemberInfo): void;
    export function defineClassMoved(className: string, sourceNamespace: any, destNamespace: any, sourceNamespaceName: string, destNamespaceName: string, additionalInfo: string): void;
    export function defineObsoleteMethod(info: ObsoleteMemberInfo): void;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export class DashboardLayoutModeHelper {
        private static _forceTouchMode?;
        private static _forceMobileMode?;
        static get isMobile(): boolean;
        static set isMobile(value: boolean);
        static get isTouch(): boolean;
        static set isTouch(value: boolean);
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ISerializableModelConstructor = DevExpress.Analytics.Utils.ISerializableModelConstructor;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DxElement = DevExpress.core.DxElement;
    import template = DevExpress.core.template;
    import dxForm = DevExpress.ui.dxForm;
    import dxFormSimpleItem = DevExpress.ui.dxFormSimpleItem;
    import AsyncRule = DevExpress.ui.AsyncRule;
    import CompareRule = DevExpress.ui.CompareRule;
    import CustomRule = DevExpress.ui.CustomRule;
    import EmailRule = DevExpress.ui.EmailRule;
    import NumericRule = DevExpress.ui.NumericRule;
    import PatternRule = DevExpress.ui.PatternRule;
    import RangeRule = DevExpress.ui.RangeRule;
    import RequiredRule = DevExpress.ui.RequiredRule;
    import StringLengthRule = DevExpress.ui.StringLengthRule;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    export type IDashboardSerializationInfoArray = Array<IDashboardSerializationInfo>;
    export let NotSupportedProperty: string;
    export type DevExtremeValidationRules = Array<DevExpress.ui.RequiredRule | DevExpress.ui.NumericRule | DevExpress.ui.RangeRule | DevExpress.ui.StringLengthRule | DevExpress.ui.CustomRule | DevExpress.ui.CompareRule | DevExpress.ui.PatternRule | DevExpress.ui.EmailRule | DevExpress.ui.AsyncRule>;
    export interface FormAdapterContext {
        bindingContext: ko.BindingContext;
        widgetContainer: HTMLElement;
    }
    export interface FormAdapterItemOptions {
        editorOptions?: Object;
        comparableEditorOptions?: string[];
        editorType?: "dxAutocomplete" | "dxCalendar" | "dxCheckBox" | "dxColorBox" | "dxDateBox" | "dxDropDownBox" | "dxHtmlEditor" | "dxLookup" | "dxNumberBox" | "dxRadioGroup" | "dxRangeSlider" | "dxSelectBox" | "dxSlider" | "dxSwitch" | "dxTagBox" | "dxTextArea" | "dxTextBox";
        customEditorType?: string;
        template?: DevExpress.core.template | ((data: {
            component?: DevExpress.ui.dxForm;
            dataField?: string;
            editorOptions?: any;
            editorType?: string;
            name?: string;
        }, itemElement: DevExpress.core.DxElement) => string | Element | JQuery);
        label?: {
            text?: string;
            visible?: boolean;
        };
        validationRules?: DevExtremeValidationRules;
    }
    export type FormAdapterItem = FormAdapterItemOptions | ((context: FormAdapterContext) => FormAdapterItemOptions);
    export interface PropertyEditorInfo {
        propertyName: string;
        displayName?: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        values?: {
            [key: string]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        };
        simpleFormAdapterItem?: SimpleFormAdapterItems;
        formAdapterItem?: FormAdapterItem;
        dxFormItem?: DevExpress.ui.dxFormSimpleItem;
        externalUpdateCallback?: (formUpdateHandler: ({ forceValidate: boolean }: {
            forceValidate: any;
        }) => void) => DevExpress.Dashboard.Model.DisposableType;
        validateBeforeSet?: boolean;
        validationRules?: Array<any>;
        valuesArray?: Array<{
            value: any;
            displayValue: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId | string;
        }>;
        editorOptions?: Object;
    }
    export interface PropertySerializationInfo {
        propertyName: string;
        modelName?: string;
        defaultVal?: any;
        type?: DevExpress.Analytics.Utils.ISerializableModelConstructor;
        info?: DevExpress.Analytics.Utils.ISerializationInfoArray;
        from?: (val: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer) => any;
        toJsonObject?: any;
        array?: boolean;
        alwaysSerialize?: boolean;
        isTwoWay?: boolean;
        category?: PropertyCategory;
    }
    export interface IDashboardSerializationInfo extends PropertySerializationInfo, PropertyEditorInfo {
    }
    export interface ITypedDashboardSerializationInfo<T> extends IDashboardSerializationInfo {
        propertyName: Extract<keyof T, string>;
    }
    export enum PropertyCategory {
        ClientState = 0,
        Data = 1,
        Interactivity = 2,
        ViewModel = 3,
        Map = 4,
        Initialize = 5,
        Coloring = 6,
        NoUpdate = 7,
        NoUpdateByObservableValue = 8
    }
    export type SimpleFormAdapterItems = "textBoxEditor" | "numberBoxEditor" | "dateBoxEditor" | "colorBoxEditor" | "checkBoxEditor" | "selectBoxEditor" | "guidEditor" | "listEditor" | "buttonGroupEditor" | "onOffButtonGroupEditor" | "yesNoButtonGroupEditor" | "discreteContinuousButtonGroupEditor";
    export function parseBool(value: any): ko.Observable<any>;
    export function floatFromModel(value: string): ko.Observable<number>;
    export function fromStringToDate(val: string): ko.Observable<Date>;
    export function fromDateToString(date: Date): string;
    export function nullableFloatToModel(value: any): {};
    export let integerValidationRule: {
        type: string;
        validationCallback: (e: any) => boolean;
    };
    export let itemType: IDashboardSerializationInfo;
    export let componentName: IDashboardSerializationInfo;
    export let url: IDashboardSerializationInfo;
    export let name: IDashboardSerializationInfo;
    export let name_ViewModel: IDashboardSerializationInfo;
    export let nameTag: IDashboardSerializationInfo;
    export let dataMember: IDashboardSerializationInfo;
    export let filter: IDashboardSerializationInfo;
    export let contentArrangementMode: IDashboardSerializationInfo;
    export let contentLineCount: IDashboardSerializationInfo;
    export let BindingSectionTitles: {
        Arguments: string;
        SingleArgument: string;
        SeriesDimension: string;
    };
    export let columnsPropertyName: string;
    export let rowsPropertyName: string;
    export let argumentsPropertyName: string;
    export let valuesPropertyName: string;
    export let argumentPropertyName: string;
    export let valuePropertyName: string;
    export let actualValuePropertyName: string;
    export let targetValuePropertyName: string;
    export let sparklineArgumentPropertyName: string;
    export let weightPropertyName: string;
    export let colorPropertyName: string;
}
declare module DevExpress.Dashboard.Internal.Model {
    import CustomPropertyValueType = DevExpress.Dashboard.Model.CustomPropertyValueType;
    export function validateCustomPropertyName(name: string): void;
    export function validateCustomPropertyValueType(propertyName: string, value: DevExpress.Dashboard.Model.CustomPropertyValueType): void;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export type CustomPropertyValueType = boolean | string | number;
    export class CustomProperties extends SerializableModel {
        _model: Object;
        getInfo: () => DevExpress.Analytics.Utils.ISerializationInfoArray;
        constructor(json: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray);
        _isKnownProperty(propertyName: string): boolean;
        getValue(propertyName: string): CustomPropertyValueType;
        setValue(propertyName: string, propertyValue: CustomPropertyValueType): void;
    }
}
declare module DevExpress.Dashboard.Model {
    export type DataItemType = "Measure" | "Dimension";
    export interface IBindingProperty {
        propertyName: string;
        dataItemType: DataItemType;
        emptyPlaceholder: string;
        selectedPlaceholder?: string;
    }
}
declare module DevExpress.Dashboard.Model {
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    export type DataType = "Text" | "DateTime" | "Bool" | "Integer" | "Float" | "Double" | "Decimal";
    export interface ICustomItemBinding extends IBindingProperty {
        displayName: string;
        array: boolean;
        enableInteractivity?: boolean;
        enableColoring?: boolean;
        constraints?: {
            allowedTypes: Array<DataType>;
        };
        slice?: string;
    }
    export interface ICustomItemBindingValue {
        displayName: () => string;
        uniqueName: () => string;
    }
}
declare module DevExpress.Dashboard.Model {
    import CustomPropertyValueType = DevExpress.Dashboard.Model.CustomPropertyValueType;
    export interface CustomPropertyMetadata {
        ownerType: any;
        customItemType?: string;
        propertyName: string;
        defaultValue?: DevExpress.Dashboard.Model.CustomPropertyValueType;
        valueType?: "string" | "number" | "boolean";
    }
    export function registerCustomProperty(meta: CustomPropertyMetadata): void;
    export function _clearCustomPropertiesMeta(): void;
    export let _customPropertiesMeta: Array<CustomPropertyMetadata>;
    export function _customMetadataContainsProperty(propertyName: any): boolean;
}
declare module DevExpress.Dashboard.Internal.Model {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import CustomProperties = DevExpress.Dashboard.Model.CustomProperties;
    import CustomPropertyMetadata = DevExpress.Dashboard.Model.CustomPropertyMetadata;
    export function _getCustomPropertiesSerializationInfoCore(customPropertiesMeta: Array<DevExpress.Dashboard.Model.CustomPropertyMetadata>): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export function getCustomPropertiesSerializationInfo(owner: any): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export interface ICustomPropertiesProvider {
        customProperties: DevExpress.Dashboard.Model.CustomProperties;
    }
}
declare module DevExpress.Dashboard {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    export interface DashboardParameterLookUpValue {
        getDisplayText(): string;
        getValue(): any;
    }
    export interface DashboardParameter {
        getName(): string;
        getValue(): DevExpress.Dashboard.Data.PrimitiveType | Array<DevExpress.Dashboard.Data.PrimitiveType>;
        setValue(value: DevExpress.Dashboard.Data.PrimitiveType | Array<DevExpress.Dashboard.Data.PrimitiveType>): any;
        getDefaultValue(): DevExpress.Dashboard.Data.PrimitiveType | Array<DevExpress.Dashboard.Data.PrimitiveType>;
        getDescription(): string;
        getType(): string;
        getLookUpValues(): Array<DashboardParameterLookUpValue>;
    }
    export interface DashboardParameterCollection {
        getParameterList(): Array<DashboardParameter>;
        getParameterByName(name: string): DashboardParameter;
        getParameterByIndex(index: number): DashboardParameter;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import DashboardParameter = DevExpress.Dashboard.DashboardParameter;
    import DashboardParameterCollection = DevExpress.Dashboard.DashboardParameterCollection;
    interface ParameterViewModel {
        Name: string;
        DefaultValue: any;
        Description: string;
        Type: any;
        Visible: boolean;
        AllowNull: boolean;
        AllowMultiselect: boolean;
        Values: IParameterValueViewModel[];
        ContainsDisplayMember: boolean;
    }
    export interface IParameterValueViewModel {
        Value: any;
        DisplayText?: any;
    }
    export class Parameter implements DashboardParameter {
        _name: string;
        _value: any;
        _defaultValue: any;
        _description: any;
        _type: any;
        _visible: boolean;
        _allowNull: boolean;
        _allowmultiselect: boolean;
        parameterChanged: JQuery.Callbacks<Function>;
        _values: any;
        constructor(parameterViewModel: ParameterViewModel);
        getName(): string;
        getAllowNull(): boolean;
        getAllowMultiselect(): boolean;
        getValue(): any;
        setValue(value: any): void;
        getDefaultValue(): any;
        getDescription(): any;
        getType(): any;
        getLookUpValues(): any;
        setLookUpValues(values: IParameterValueViewModel[], containsDisplayMember: boolean): void;
        isVisible(): boolean;
    }
    export class ParametersCollection implements DashboardParameterCollection {
        collectionChanged: JQuery.Callbacks<Function>;
        _parameters: Parameter[];
        constructor(parametersViewModel: any);
        updateParameterValues(parametersViewModel: any): void;
        setParameters(newParameters: IParameter[]): void;
        getParameterValues(): IParameter[];
        getParameterDefaultValue(name: any): any;
        getParameterValue(name: any): any;
        setParameterValue(name: any, value: any): void;
        getParameters(): Parameter[];
        getVisibleParameters(): Parameter[];
        getParameterList(): Parameter[];
        getParameterByName(name: string): Parameter;
        getParameterByIndex(index: any): Parameter;
    }
    export interface IParameter {
        Name: string;
        Value: any;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export function createCssPropertyWrapper(propertyName: string, propertyValue: any): {
        propertyName: string;
        propertyValue: any;
    };
    export function getEmptyCssPropertyWrappersArray(): Array<{
        propertyName: string;
        propertyValue: any;
    }>;
    export function createStylesElement(nonce?: string): void;
    export function addToStyles(styles: string): () => void;
    export function createCssClass(cssSelector: string, cssProperties: Array<{
        propertyName: string;
        propertyValue: any;
    }>): () => void;
    export function convertCssPropertyWrappersToString(properties: Array<{
        propertyName: string;
        propertyValue: any;
    }>): string;
    export function convertCssPropertyWrappersToObject(properties: Array<{
        propertyName: string;
        propertyValue: any;
    }>): object;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export var getBaseColorScheme: () => "dark" | "light";
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export let cssClassNames: {
        widgetsViewerScrollableHolder: string;
        widgetViewerIdPrefix: string;
        widgetViewerContainer: string;
        widgetViewerTable: string;
        widgetViewerRow: string;
        widgetViewerCell: string;
        cardItem: string;
        widgetItem: string;
        cardTitle: string;
        cardSubtitle: string;
        cardIndicator: string;
        cardVariableValue1: string;
        cardVariableValue2: string;
        cardMainValue: string;
        cardSparkline: string;
        cardHiddenContainer: string;
        cardNowrapHiddenContainer: string;
        layoutCardHiddenContainer: string;
        selectedItem: string;
        hoveredItem: string;
    };
    export let layoutCardCssClassNames: {
        cardScrollableHolder: string;
        card: string;
        content: string;
        contentTopRows: string;
        contentBottomRows: string;
        row: string;
        rowOnlyCenterElements: string;
        rowLeftRightElements: string;
        rowElement: string;
        indicatorElement: string;
        sparklineElement: string;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    class BarCacheItem {
        container: HTMLElement;
        barContainer: HTMLElement;
        barDiv: HTMLElement;
        getTextDiv: () => HTMLElement;
        axisDiv: HTMLElement;
        tooltipDiv: HTMLElement;
        showBarOnly: boolean;
        drawAxis: boolean;
    }
    export class DrawProperty {
        shouldDrawFontStyles: boolean;
        shouldDrawBackColorStyle: boolean;
    }
    export class styleSettingsProvider {
        protected static cssClassNames: {
            iconConditionalFormatting: string;
            barAxis: string;
            customStyle: string;
            customGradientStyle: string;
            dashboardContainer: string;
            absolutePosition: string;
            relativePosition: string;
            flexParent: string;
            flexParentBaseline: string;
            truncated: string;
            wordWrap: string;
            stretched: string;
            fixed: string;
            leftMargin: string;
            rightMargin: string;
            barContainer: string;
            barValue: string;
        };
        static inctanceCounter: number;
        static hiddenTextCounter: number;
        static toIconCssClass(iconType: any): string;
        static _getRangeBackColorStyleSettings(styleSettings: any, condition: any): any;
        cfModel: any;
        cssCustomClasses: Array<{
            primary: string;
            secondary: string;
        }>;
        cssCustomClassesLinks: Array<() => void>;
        id: number;
        barCache: {
            [key: string]: BarCacheItem[];
        };
        padding: string;
        barPrefixes: Array<string>;
        drawingLocked: boolean;
        wordWrap: boolean;
        constructor();
        FontStyle: {
            Bold: number;
            Italic: number;
            Underline: number;
            Strikeout: number;
        };
        DataAttributes: {
            Bar: string;
            Axis: string;
            NormalizedValue: string;
            ZeroPosition: string;
            AllowNegativeAxis: string;
            DrawAxis: string;
        };
        initialize(cfModel: any, wordWrap?: boolean): void;
        dispose(): void;
        draw(): void;
        updateBarWidth(barPrefix: any): void;
        applyStyleSettings(container: HTMLElement, popupContainer: HTMLElement, styleSettingsInfo: any, ignoreImageSettings: any, barPrefix?: any, forceLeftAlignment?: boolean, isSecondaryStyle?: boolean): void;
        private _getContainerHeights;
        protected _createCssClassName(prefix: any, styleIndex: any, postFix: string): string;
        protected _applyIconSettings(container: HTMLElement, iconType: any, forceLeftAlignment?: boolean, flexParentStyle?: string): void;
        protected _wrapChildElementsToApplyIconSettings(container: HTMLElement, classes: any, forceLeftAlignment: boolean): void;
        protected _textAlignmentIsLeft(container: HTMLElement): boolean;
        private _getBarInfo;
        private _createBarContent;
        private _createBarDiv;
        private _createAxisDiv;
        private _setBarBounds;
        private _setAxisBounds;
        private _clearCssClasses;
        protected _registerCssClasses(): void;
        protected _registerCssClassByStyleModel(styleSettingsModel: any, styleIndex: number, isSecondaryStyle: any): void;
        protected _addCssClassToDictionary(styleName: string, styleIndex: number, isSecondary: boolean): void;
        protected _generateCssClassName(styleIndex: number, isSecondary: boolean): string;
        addNewStyle(styleName: string, styleIndex: number, isSecond: boolean): void;
        protected _isShouldGenerateSecondaryStyle(styleSettingsModel: any): boolean;
        protected _isSecondaryStyle(styleSettingsModel: any): boolean;
        protected _getStylePostFix(isSecondary: boolean): any;
        protected _getDrawProperty(isSecondaryStyle: boolean): DrawProperty;
        protected _shouldDrawBarStyle(styleSettingsModel: any): boolean;
        protected _generateCssClassBody(styleSettingsModel: any, cssClassName: string, drawProperty?: DrawProperty): void;
        protected _getCssTdSelector(cssClassname: string): string;
        private _createCssClassFromCustomAppearanceType;
        private _createFontStyles;
        private _createBackColorStyle;
        private _createCssClassFromPredefinedAppearanceType;
    }
    export class cardItemStyleSettingsProvider extends styleSettingsProvider {
        constructor();
        protected _getDrawProperty(isSecondaryStyle: boolean): DrawProperty;
        protected _getStylePostFix(isSecondaryStyle: boolean): string;
        protected _isShouldGenerateSecondaryStyle(styleSettingsModel: any): boolean;
        protected _shouldDrawBarStyle(styleSettingsModel: any): boolean;
        protected _textAlignmentIsLeft(container: any): boolean;
        protected _getCssTdSelector(cssClassname: string): string;
        protected _applyIconSettings(container: HTMLElement, iconType: any, forceLeftAlignment?: boolean, flexParentStyle?: string): void;
        protected _wrapChildElementsToApplyIconSettings(container: HTMLElement, classes: any, forceLeftAlignment: boolean): void;
        getIconType(styleSettingsInfo: any): any;
        applyIndicatorStyle(container: HTMLElement, iconType: any): void;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import StyleSettingsModel = DevExpress.Dashboard.Internal.Data.StyleSettingsModel;
    import AppearanceSettings = DevExpress.Dashboard.Model.AppearanceSettings;
    import DrawProperty = DevExpress.Dashboard.Internal.Viewer.DrawProperty;
    export class appearanceSettingsProvider {
        static getColor(style: DevExpress.Dashboard.Internal.Data.StyleSettingsModel): any;
        static getDefaultColorizationColor(): any;
        static toCssProperties(appearanceType: any, drawProperty?: DevExpress.Dashboard.Internal.Viewer.DrawProperty): Array<{
            propertyName: string;
            propertyValue: any;
        }>;
        static toCustomCssProperties(appearance: DevExpress.Dashboard.Model.AppearanceSettings): {
            propertyName: string;
            propertyValue: any;
        }[];
        private static _createFontBold;
        private static _createFontItalic;
        private static _createFontUnderline;
        private static _createFontStyles;
        private static _getBackColorFromPredefinedStyle;
        static backAndGradientColorGroupsToBackColor(appearanceType: any): any;
        private static _backColorsWithFontGroupToBackColor;
        private static _getCustomBackColor;
        private static isDarkColorScheme;
    }
}
declare module DevExpress.Dashboard.Model {
    export class Color {
        static fromArgb(alpha: number, red: number, green: number, blue: number): Color;
        static fromRgbaString(rgbaColor: string): Color;
        static fromJSON(jsonValue: string): Color;
        static fromAppearance(appearanceType: string): Color;
        static fromDxColor(dxColor: any): Color;
        static toNumber(alpha: number, red: number, green: number, blue: number): number;
        static toJSON(color: Color): number;
        static contrastColor(baseColor: Color): Color;
        static _colorFromModel(value: string): ko.Observable<Color>;
        static _colorRgbaFromModel(value: string): ko.Observable<string>;
        static _colorToModel(value: Color): number;
        static _colorRgbaToModel(rgbaColor: string): number;
        toNumber(): number;
        static toHex(colorValue: number): string;
        static equals(color1: Color, color2: Color): boolean;
        get A(): any;
        get R(): any;
        get G(): any;
        get B(): any;
        get css(): string;
        private _dxColor;
        constructor(colorValue: number);
        blend(blendColor: any, opacity: any): Color;
        toHex(): any;
        private _toRgbaString;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let measureCalculationSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export abstract class MeasureCalculation extends SerializableModel {
        protected static _getWindowAggrFunction(summaryType: string): string;
        abstract readonly name: string;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _getAggrName(summaryType: string): string;
        abstract _createInstance(): any;
        abstract _getExpression(argument: string): string;
    }
    export let calculationsTypesMap: {
        [index: string]: typeof MeasureCalculation;
    };
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let calculationSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
    export let _currentCalculationInfo: (model: {
        calculationType: ko.Observable<string>;
    }) => Array<DevExpress.Dashboard.Metadata.IDashboardSerializationInfo>;
    export class Calculation extends SerializableModel {
        calculationType: ko.Observable<string>;
        calculation: ko.Observable<DevExpress.Dashboard.Model.MeasureCalculation>;
        constructor(modelJson?: {}, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        isEmpty(): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let measureCalculationWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export abstract class MeasureCalculationWindowDefinition extends SerializableModel {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        abstract equals(def: any): boolean;
    }
    export let windowDefinitionsTypesMap: {
        [index: string]: typeof MeasureCalculationWindowDefinition;
    };
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let windowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class WindowDefinition extends SerializableModel {
        windowDefinitionType: ko.Observable<string>;
        windowDefinition: ko.Observable<DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition>;
        constructor(modelJson?: {}, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): any;
        isEmpty(): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DataItemNumericFormatType = DevExpress.Dashboard.Model.DataItemNumericFormatType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let formatTypeValues: {
        [key in DevExpress.Dashboard.Model.DataItemNumericFormatType]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let customFormatString: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let unit: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let precision: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let includeGroupSeparator: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataItemCurrencyCultureName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataItemNumericFormatSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let absoluteVariationNumericFormatSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let percentVariationNumericFormatSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let percentOfTargetNumericFormatSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let yearFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessYearFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let quarterFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessQuarterFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let monthFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessMonthFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dayOfWeekFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessDayOfWeekFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessDateFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateHourFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessDateHourFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateHourMinuteFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessDateHourMinuteFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateTimeWithSecondsFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessDateTimeWithSecondsFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let hourFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessHourFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let exactDateFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let namelessExactDateFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataItemDateTimeFormatSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DataItemNumericFormatType = DevExpress.Dashboard.Model.DataItemNumericFormatType;
    import DataItemNumericUnit = DevExpress.Dashboard.Model.DataItemNumericUnit;
    import DateFormat = DevExpress.Dashboard.Model.DateFormat;
    import DateTimeFormat = DevExpress.Dashboard.Model.DateTimeFormat;
    import DayOfWeekFormat = DevExpress.Dashboard.Model.DayOfWeekFormat;
    import ExactDateFormat = DevExpress.Dashboard.Model.ExactDateFormat;
    import HourFormat = DevExpress.Dashboard.Model.HourFormat;
    import MonthFormat = DevExpress.Dashboard.Model.MonthFormat;
    import QuarterFormat = DevExpress.Dashboard.Model.QuarterFormat;
    import YearFormat = DevExpress.Dashboard.Model.YearFormat;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class DataItemNumericFormat extends SerializableModel {
        currencyCultureName: ko.Observable<string>;
        formatType: ko.Observable<DevExpress.Dashboard.Model.DataItemNumericFormatType>;
        precision: ko.Observable<number>;
        unit: ko.Observable<DevExpress.Dashboard.Model.DataItemNumericUnit>;
        includeGroupSeparator: ko.Observable<boolean>;
        customFormatString: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _getViewModel(): {
            NumericFormat: {
                CurrencyCulture: string;
                FormatType: DevExpress.Dashboard.Model.DataItemNumericFormatType;
                Precision: number;
                Unit: DevExpress.Dashboard.Model.DataItemNumericUnit;
                IncludeGroupSeparator: boolean;
            };
        };
    }
    export class AbsoluteVariationNumericFormat extends DataItemNumericFormat {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class PercentVariationNumericFormat extends DataItemNumericFormat {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class PercentOfTargetNumericFormat extends DataItemNumericFormat {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class DataItemDateTimeFormat extends SerializableModel {
        yearFormat: ko.Observable<DevExpress.Dashboard.Model.YearFormat>;
        quarterFormat: ko.Observable<DevExpress.Dashboard.Model.QuarterFormat>;
        monthFormat: ko.Observable<DevExpress.Dashboard.Model.MonthFormat>;
        dayOfWeekFormat: ko.Observable<DevExpress.Dashboard.Model.DayOfWeekFormat>;
        dateFormat: ko.Observable<DevExpress.Dashboard.Model.DateFormat>;
        dateHourFormat: ko.Observable<DevExpress.Dashboard.Model.DateTimeFormat>;
        dateHourMinuteFormat: ko.Observable<DevExpress.Dashboard.Model.DateTimeFormat>;
        dateTimeFormat: ko.Observable<DevExpress.Dashboard.Model.DateTimeFormat>;
        hourFormat: ko.Observable<DevExpress.Dashboard.Model.HourFormat>;
        exactDateFormat: ko.Observable<DevExpress.Dashboard.Model.ExactDateFormat>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _getViewModel(groupInterval: any): {
            DateTimeFormat: {
                GroupInterval: any;
                YearFormat: DevExpress.Dashboard.Model.YearFormat;
                QuarterFormat: DevExpress.Dashboard.Model.QuarterFormat;
                MonthFormat: DevExpress.Dashboard.Model.MonthFormat;
                DayOfWeekFormat: DevExpress.Dashboard.Model.DayOfWeekFormat;
                DateFormat: DevExpress.Dashboard.Model.DateFormat;
                DateHourFormat: DevExpress.Dashboard.Model.DateTimeFormat;
                DateHourMinuteFormat: DevExpress.Dashboard.Model.DateTimeFormat;
                DateTimeFormat: DevExpress.Dashboard.Model.DateTimeFormat;
                HourFormat: DevExpress.Dashboard.Model.HourFormat;
                ExactDateFormat: DevExpress.Dashboard.Model.ExactDateFormat;
            };
        };
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dataItem: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let uniqueName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataItemDataMember: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let numericFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateTimeFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let absoluteVariationNumericFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let percentVariationNumericFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let percentOfTargetNumericFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showTotals: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showGrandTotals: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataItemLinkSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dataItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let summaryTypeDict: {
        [key in string]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let summaryTypeTemplate: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let summaryTypeNumericToAny: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let summaryTypeAttribute: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let summaryTypeNonNumericToNumeric: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let summaryTypeNonNumericToString: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let calculation: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let windowDefinition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let expression: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let calculations: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let measureFilterString: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let measureItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let colorSchemeDataSource: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let colorSchemeDataMember: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let colorSchemeColor: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let paletteIndex: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let colorSchemeSummaryType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dimensionInfoDateTimeGroupInterval: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let definitionInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let definitionsInMeasureDefinition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let measureKeySerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dimensionKeys: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let measureKey: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let colorSchemeEntrySerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let colorShemetype: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dimensionValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let valueInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let definition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let colorShemeValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dimensionKeySerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export interface IDimensionDefinition {
        dataMember: ko.Observable<string>;
        dateTimeGroupInterval: ko.Observable<string>;
    }
    export interface IDimensionValue {
        type: ko.Observable<string>;
        value: ko.Observable<string>;
    }
    export class DimensionKey extends SerializableModel {
        displayText: ko.Computed<string>;
        definition: IDimensionDefinition;
        value: IDimensionValue;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dataFieldDataMember: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let nodeType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let groupIndex: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldChildNodes: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldDisplayName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldFieldType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsDataFieldNode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsAggregate: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsDataMemberNode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsConvertible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsComparable: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsList: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsCorruptedCalcField: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsDataSourceNode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsDataTableNode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldIsExpressionsNode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataFieldSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Internal.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export type DataNodeType = "Unknown" | "DataSource" | "DataTable" | "DataMember" | "DataField" | "CalculatedFields" | "CalculatedDataField" | "ExpressionFields" | "OlapDataSource" | "OlapMeasureFolder" | "OlapMeasure" | "OlapDimensionFolder" | "OlapDimension" | "OlapKpiFolder" | "OlapKpi" | "OlapFolder" | "OlapHierarchy";
    export interface IDataField {
        dataMember: ko.Observable<string>;
        name: ko.Observable<string>;
        displayName: ko.Observable<string>;
        fieldType?: ko.Observable<DevExpress.Dashboard.Model.DataFieldType>;
        isConvertible?: ko.Observable<boolean>;
        isDataFieldNode: ko.Observable<boolean>;
        hasCalculatedFields?: boolean;
        groupIndex?: ko.Observable<number>;
        nodeType?: ko.Observable<DataNodeType>;
        isAggregate?: ko.Observable<boolean>;
        isList?: ko.Observable<boolean>;
        isCorruptedCalcField?: ko.Observable<boolean>;
        isDataSourceNode?: ko.Observable<boolean>;
        isDataTableNode?: ko.Observable<boolean>;
        isExpressionsNode?: ko.Observable<boolean>;
    }
    export let IsNumeric: (dataType: DevExpress.Dashboard.Model.DataFieldType) => boolean;
    export let IsTextual: (dataType: DevExpress.Dashboard.Model.DataFieldType) => boolean;
    export let IsDateTime: (dataType: DevExpress.Dashboard.Model.DataFieldType) => boolean;
    export let IsOlapHierarchyField: (dataField: any) => boolean;
    export class DataField extends SerializableModel implements IDataField {
        static isNumeric(dataField: IDataField): boolean;
        static isDateTime(dataField: IDataField): boolean;
        static olapMarker(): string;
        static isOlap(dataMember: string): boolean;
        static isMeasure(dataField: IDataField): boolean;
        static isOrContainMeasures(dataMember: string): boolean;
        static ifOlapThenOnlyMeasure(dataField: IDataField): boolean;
        static ifOlapThenOnlyDimension(dataField: IDataField): boolean;
        static isContinous(dataField: IDataField): boolean;
        static isOlapHierarchy(dataField: IDataField): boolean;
        defaultNumericFormat: any;
        dataMember: ko.Observable<string>;
        name: ko.Observable<string>;
        childNodes: ko.ObservableArray<DataField>;
        groupIndex: ko.Observable<number>;
        groupDataItems: Array<any>;
        displayName: ko.Observable<string>;
        fieldType: ko.Observable<DevExpress.Dashboard.Model.DataFieldType>;
        nodeType: ko.Observable<DataNodeType>;
        isDataFieldNode: ko.Observable<boolean>;
        isDataMemberNode: ko.Observable<boolean>;
        expanded: boolean;
        isConvertible: ko.Observable<boolean>;
        isComparable: ko.Observable<boolean>;
        hasCalculatedFields: boolean;
        isAggregate: ko.Observable<boolean>;
        isList: ko.Observable<boolean>;
        isCorruptedCalcField: ko.Observable<boolean>;
        isDataSourceNode: ko.Observable<boolean>;
        isDataTableNode: ko.Observable<boolean>;
        isExpressionsNode: ko.Observable<boolean>;
        constructor(dataFieldJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Model {
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import IDashboardComponent = DevExpress.Dashboard.Internal.Model.IDashboardComponent;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import DataItemDateTimeFormat = DevExpress.Dashboard.Model.DataItemDateTimeFormat;
    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    export abstract class DataItem extends TypedSerializableModel implements IDashboardComponent {
        static typesMap: {
            Integer: string;
            Float: string;
            Double: string;
            Decimal: string;
            DateTime: string;
            Text: string;
            String: string;
            Bool: string;
            Boolean: string;
            Enum: string;
        };
        name: ko.Observable<string>;
        uniqueName: ko.Observable<string>;
        dataMember: ko.Observable<string>;
        numericFormat: DevExpress.Dashboard.Model.DataItemNumericFormat;
        dateTimeFormat: DevExpress.Dashboard.Model.DataItemDateTimeFormat;
        showValues: ko.Observable<boolean>;
        showTotals: ko.Observable<boolean>;
        showGrandTotals: ko.Observable<boolean>;
        constructor(dataItemJSON?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        grabFrom(dataItem: DataItem): void;
        isDefinitionEquals(dataItem: DataItem): boolean;
        getUniqueNamePrefix(): string;
    }
    export enum AcceptableShapingType {
        Number = 0,
        String = 1,
        RangeDate = 2,
        Attribute = 3,
        Hidden = 4
    }
    export class DataItemLink extends TypedSerializableModel {
        static create(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider, dataItemLink: DataItemLink): DataItemLink;
        uniqueName: ko.Observable<string>;
        dataItem: ko.Subscribable<DataItem>;
        private _dataItemProvider;
        _specifics: {
            acceptableShapingType: AcceptableShapingType;
            customOptionsProperties: {
                serializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
                filter?: (dataItem: DataItem) => boolean;
                disabledRule?: (dataItem: DataItem) => boolean;
            }[];
            customDataShapingProperties: {
                serializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
                filter?: (dataField: DevExpress.Dashboard.Internal.Model.IDataField) => boolean;
            }[];
            isAttribute: boolean;
            skipFormatting: boolean;
            supportsTopNOther: boolean;
            forceAddOlapExactDateFormat: boolean;
        };
        constructor(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider, dataItemLinkJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
        _updateProvider(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DimensionTopNMode = DevExpress.Dashboard.Model.DimensionTopNMode;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dateTimeGroupIntervalsDict: {
        [key in DevExpress.Dashboard.Model.DateTimeGroupInterval]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let dimensionGroupIndex: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateTimeGroupInterval: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeDateTimeGroupInterval: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sortOrderBase: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sortOrderOlap: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sortOrderNonOlap: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sortMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let textGroupInterval: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let isDiscreteNumericScale: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let groupChildValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let coloringMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sortMeasure: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let realSortMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let topNOptionsEnabled: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let topNOptionsModeValues: {
        [key in DevExpress.Dashboard.Model.DimensionTopNMode]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let topNOptionsMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let topNOptionsCount: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let topNOptionsMeasure: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let topNOptionsShowOthers: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let topNOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dimensionItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
    import ColoringMode = DevExpress.Dashboard.Model.ColoringMode;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DimensionSortMode = DevExpress.Dashboard.Model.DimensionSortMode;
    import DimensionSortOrder = DevExpress.Dashboard.Model.DimensionSortOrder;
    import DimensionTopNMode = DevExpress.Dashboard.Model.DimensionTopNMode;
    import TextGroupInterval = DevExpress.Dashboard.Model.TextGroupInterval;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    export class Dimension extends DataItem implements IDimensionDefinition {
        groupIndex: ko.Observable<number>;
        sortOrder: ko.Observable<DevExpress.Dashboard.Model.DimensionSortOrder>;
        sortMeasure: ko.Observable<string>;
        sortMode: ko.Observable<DevExpress.Dashboard.Model.DimensionSortMode>;
        realSortMode: ko.Computed<string>;
        dateTimeGroupInterval: ko.Observable<DevExpress.Dashboard.Model.DateTimeGroupInterval>;
        textGroupInterval: ko.Observable<DevExpress.Dashboard.Model.TextGroupInterval>;
        isDiscreteNumericScale: ko.Observable<boolean>;
        groupChildValues: ko.Observable<boolean>;
        coloringMode: ko.Observable<DevExpress.Dashboard.Model.ColoringMode>;
        topNOptionsEnabled: ko.Observable<boolean>;
        topNOptionsMode: ko.Observable<DevExpress.Dashboard.Model.DimensionTopNMode>;
        topNOptionsCount: ko.Observable<number>;
        topNOptionsMeasureName: ko.Observable<string>;
        topNOptionsShowOthers: ko.Observable<boolean>;
        _actualDateTimeGroupInterval: ko.Computed<DevExpress.Dashboard.Model.DateTimeGroupInterval>;
        constructor(dataItemJSON?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        grabFrom(dataItem: Dimension): void;
        isDefinitionEquals(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let calcFieldDataMember: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let calcFieldExpression: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let calcFieldExpressionEditable: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let calculatedFieldType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let calculatedFieldSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class CalculatedField extends SerializableModel {
        dataMember: ko.Observable<string>;
        fieldType: ko.Observable<string>;
        name: ko.Observable<string>;
        expression: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let efDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    export class EFDataSource extends DataSource {
        _tables: ko.ObservableArray<DevExpress.Dashboard.Internal.Model.IDataField>;
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let aliasProperty: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let queryTypeProperty: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let queryNodeSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let queryNodes: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let idProperty: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let contextItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let context: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataSourceProperty: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataMemberProperty: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let sources: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let federationDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let excelDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class ExcelDataSource extends DataSource {
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let extractDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class ExtractDataSource extends DataSource {
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let jsonDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import JsonSchemaRootNode = DevExpress.Analytics.Data.JsonSchemaRootNode;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class JsonDataSource extends DataSource {
        rootElement: ko.Observable<string>;
        schema: ko.Observable<DevExpress.Analytics.Data.JsonSchemaRootNode>;
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let mongoDBDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let mongoQueryAliasProperty: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let collectionNameProperty: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let mongoDBQuerySerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class MongoDBDataSource extends DataSource {
        queries: ko.ObservableArray<MongoDBQuery>;
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
    export class MongoDBQuery extends SerializableModel {
        alias: ko.Observable<string>;
        collectionName: ko.Observable<string>;
        _actualName: ko.PureComputed<string>;
        constructor(json?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let objectDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class ObjectDataSource extends DataSource {
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let connectionName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let olapDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class OlapDataSource extends DataSource {
        connectionName: ko.Observable<string>;
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let connectionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class SqlConnection extends SerializableModel {
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        constructor(connectionJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        name: ko.Observable<string>;
        fromAppConfig: ko.Computed<boolean>;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let queries: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let selectedTables: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let connection: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sqlDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISqlQueryViewModel = DevExpress.QueryBuilder.Utils.ISqlQueryViewModel;
    import SqlConnection = DevExpress.Dashboard.Model.SqlConnection;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class SqlDataSource extends DataSource {
        queries: ko.ObservableArray<DevExpress.QueryBuilder.Utils.ISqlQueryViewModel>;
        connection: DevExpress.Dashboard.Model.SqlConnection;
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let xpoDataSourceSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class XpoDataSource extends DataSource {
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import EFDataSource = DevExpress.Dashboard.Model.EFDataSource;
    import ExcelDataSource = DevExpress.Dashboard.Model.ExcelDataSource;
    import ExtractDataSource = DevExpress.Dashboard.Model.ExtractDataSource;
    import JsonDataSource = DevExpress.Dashboard.Model.JsonDataSource;
    import MongoDBDataSource = DevExpress.Dashboard.Model.MongoDBDataSource;
    import ObjectDataSource = DevExpress.Dashboard.Model.ObjectDataSource;
    import OlapDataSource = DevExpress.Dashboard.Model.OlapDataSource;
    import SqlDataSource = DevExpress.Dashboard.Model.SqlDataSource;
    import XpoDataSource = DevExpress.Dashboard.Model.XpoDataSource;
    export let _baseDataSourceTypesMap: {
        ObjectDataSource: typeof DevExpress.Dashboard.Model.ObjectDataSource;
        SqlDataSource: typeof DevExpress.Dashboard.Model.SqlDataSource;
        OLAPDataSource: typeof DevExpress.Dashboard.Model.OlapDataSource;
        EFDataSource: typeof DevExpress.Dashboard.Model.EFDataSource;
        ExcelDataSource: typeof DevExpress.Dashboard.Model.ExcelDataSource;
        ExtractFileDataSource: typeof DevExpress.Dashboard.Model.ExtractDataSource;
        JsonDataSource: typeof DevExpress.Dashboard.Model.JsonDataSource;
        XPObjectSource: typeof DevExpress.Dashboard.Model.XpoDataSource;
        MongoDBDataSource: typeof DevExpress.Dashboard.Model.MongoDBDataSource;
    };
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class FederationDataSource extends DataSource {
        sources: ko.ObservableArray<Source>;
        queries: ko.ObservableArray<QueryNode>;
        context: ko.ObservableArray<ContextItem>;
        get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDisplayNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
    export type FederationQueryType = "TransformationNode" | "SelectNode" | "UnionNode";
    export class QueryNode extends SerializableModel {
        alias: ko.Observable<string>;
        private _queryType;
        get queryType(): FederationQueryType;
        constructor(json?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
    export class ContextItem extends SerializableModel {
        source: ko.Observable<DevExpress.Dashboard.Model.DataSource>;
        id: ko.Observable<string>;
        constructor(json?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
    export class Source extends SerializableModel {
        dataSource: ko.Observable<string>;
        dataMember: ko.Observable<string>;
        name: ko.Observable<string>;
        constructor(json?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dataSourceNameSerialization: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataMemberSerialization: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let valueMemberSerialization: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let displayMemberSerialization: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sortByMember: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sortOrder: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _dataMemberSerialization: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _dataSourceNameSerialization: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dynamicListLookUpSettingsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import IDataSourceConsumer = DevExpress.Dashboard.Model.IDataSourceConsumer;
    import DimensionSortOrder = DevExpress.Dashboard.Model.DimensionSortOrder;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class DynamicListLookUpSettings extends SerializableModel implements IDataSourceConsumer {
        static modelName: string;
        dataMember: ko.Observable<string>;
        dataSource: ko.Observable<string>;
        valueMemberName: ko.Observable<string>;
        displayMemberName: ko.Observable<string>;
        sortByMember: ko.Observable<string>;
        sortOrder: ko.Observable<DevExpress.Dashboard.Model.DimensionSortOrder>;
        _dataSource: ko.Computed<string>;
        _dataMember: ko.Computed<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(target: DynamicListLookUpSettings): boolean;
        isPropertyDisabled(propertyName: string): boolean;
    }
    export let _dynamicListLookUpSettingsSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
}
declare module DevExpress.Dashboard.Internal.Model {
    export function collectionItemType(itemType: string): (target: Object, key: string) => void;
}
declare module DevExpress.Dashboard.Internal.Model {
    import SimpleFormAdapterItems = DevExpress.Dashboard.Metadata.SimpleFormAdapterItems;
    export function validateGuid(guid: any): boolean;
    export class ParameterHelper {
        static getInfoPerType(valueType: any): any[];
        static getEditorType(typeString: string): {
            simpleFormAdapterItem: DevExpress.Dashboard.Metadata.SimpleFormAdapterItems;
            editorOptions: {};
        };
        static typeValues: any[];
        private static _getTypeValue;
        private static _tryConvertValue;
        static getDefaultTypeValue(type: string): any;
        static convertSingleValue(value: any, type: string, allowNull?: boolean): any;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    export class LookUpValue extends TypedSerializableModel {
        valueType: ko.Observable<string>;
        value: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let lookUpValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let lookUpvalues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let staticListLookUpSettingsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import LookUpValue = DevExpress.Dashboard.Model.LookUpValue;
    export class StaticListLookUpSettings extends SerializableModel {
        private _valueType;
        static modelName: string;
        values: ko.ObservableArray<DevExpress.Dashboard.Model.LookUpValue>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _updateValuesType(newType: string): void;
    }
    export let _staticListLookUpSettingsSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let parameterVisible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let description: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let allowMultiselect: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let allowNull: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let parameterName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let defaultValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let parameterTypeSerialization: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let parameterTypePropertyGrid: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let lookUpSourceType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let defaultValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let selectAllValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dashboardParameterSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import DynamicListLookUpSettings = DevExpress.Dashboard.Model.DynamicListLookUpSettings;
    import LookUpValue = DevExpress.Dashboard.Model.LookUpValue;
    import StaticListLookUpSettings = DevExpress.Dashboard.Model.StaticListLookUpSettings;
    export interface IQueryParameter {
        name: string;
        value: any;
        type: string;
        allowMultiselect: boolean;
        selectAll: boolean;
    }
    export type LookUpSourceType = "None" | "DynamicListLookUpSettings" | "StaticListLookUpSettings";
    export function _getParametersQuery(parameters: Parameter[]): IQueryParameter[];
    export class Parameter extends TypedSerializableModel {
        private _allParameters?;
        static SelectAllValue: string;
        private _patchSerializationsInfo;
        type: ko.Computed<string>;
        parameterVisible: ko.Observable<boolean>;
        description: ko.Observable<string>;
        allowMultiselect: ko.Observable<boolean>;
        allowNull: ko.Observable<boolean>;
        name: ko.Observable<string>;
        defaultValue: ko.Observable<any>;
        _type: ko.Observable<string>;
        lookUpSourceType: ko.Subscribable<LookUpSourceType>;
        defaultValues: ko.ObservableArray<DevExpress.Dashboard.Model.LookUpValue>;
        selectAllValues: ko.Observable<boolean>;
        containsDisplayMember: ko.Computed<boolean>;
        staticListLookUpSettings: ko.Observable<DevExpress.Dashboard.Model.StaticListLookUpSettings>;
        dynamicListLookUpSettings: ko.Observable<DevExpress.Dashboard.Model.DynamicListLookUpSettings>;
        _valuesOfDefaultValues: ko.Computed<string[]>;
        _actualValue: ko.Computed<any>;
        private _paramDialogValue;
        _value: ko.Computed<any>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer, _allParameters?: ko.ObservableArray<Parameter>);
        _isNameValid: (name: string) => boolean;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _resetDefaultValues(): void;
        grabFrom(another: Parameter): void;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    export interface IFormattableValue {
        Type: string;
        Value?: any;
        RangeLeft?: any;
        RangeRight?: any;
        Format: any;
    }
    export class DimensionFilterValues {
        Name: string;
        Truncated: boolean;
        Values: Array<IFormattableValue>;
        constructor(name?: string);
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import SliceIterator = DevExpress.Dashboard.Internal.Data.SliceIterator;
    import dataStorage = DevExpress.Dashboard.Internal.Data.dataStorage;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import itemDataDimension = DevExpress.Dashboard.Internal.Data.itemDataDimension;
    export let pivotAreaNames: {
        columns: string;
        rows: string;
    };
    export let itemDataAxisBuilder: {
        build: (name: DevExpress.Dashboard.Data.ItemDataAxisName, storage: DevExpress.Dashboard.Internal.Data.dataStorage, dimensions: DevExpress.Dashboard.Internal.Data.itemDataDimension[], sortOrderSlices?: string[][], metaData?: any, iterators?: {
            [key: number]: DevExpress.Dashboard.Internal.Data.SliceIterator;
        }) => DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        _getKeyIdsList: (keyIds: string[]) => string[][];
        _isSortOrderSlice: (slice: string[], sortOrderSlices: string[][]) => boolean;
    };
}
declare module DevExpress.Dashboard.Internal.Data {
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    export let itemDataAxisHelper: {
        eachPoint: (point: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint, _process: (point: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint) => boolean | void) => boolean;
        findFirstPoint: (root: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint, predicate: (points: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint[]) => boolean) => any;
        findFirstPointByUniqueValues: (root: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint, values: any[]) => DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        findFirstPointByValues: (root: any, values: any) => any;
        findFirstPointByUniqueValueAndDimension: (root: any, value: any, dimensionId: any) => any;
        _areEqual: (value1: any, value2: any) => boolean;
        _equalPredicate: (points: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint[], values: any, equal: (value: any, point: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint) => boolean) => boolean;
        forSamePoints: (baseItem: any, item: any, process: any) => void;
        findChildByUniqueValue: (point: any, value: any) => any;
        getValuesByTuples: (tuples: any, dimensionIds: any) => any[];
    };
}
declare module DevExpress.Dashboard.Data {
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    export let itemDataAxisNames: {
        defaultAxis: DevExpress.Dashboard.Data.ItemDataAxisName;
        chartSeriesAxis: DevExpress.Dashboard.Data.ItemDataAxisName;
        chartArgumentAxis: DevExpress.Dashboard.Data.ItemDataAxisName;
        sparklineAxis: DevExpress.Dashboard.Data.ItemDataAxisName;
        pivotColumnAxis: DevExpress.Dashboard.Data.ItemDataAxisName;
        pivotRowAxis: DevExpress.Dashboard.Data.ItemDataAxisName;
    };
}
declare module DevExpress.Dashboard.Internal.Data {
    import dataStorage = DevExpress.Dashboard.Internal.Data.dataStorage;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import itemMetaData = DevExpress.Dashboard.Internal.Data.itemMetaData;
    export class itemDataManager {
        _dataStorage: DevExpress.Dashboard.Internal.Data.dataStorage;
        _metaData: DevExpress.Dashboard.Internal.Data.itemMetaData;
        _itemData: DevExpress.Dashboard.Internal.Data.itemData;
        _items: {
            [name: string]: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        };
        initialize(itemDataDTO: any): void;
        updateExpandedData(expandedItemDataDTO: any, expandInfo: any): void;
        updateTotals(expandedItemDataDTO: any): void;
        getDataStorage(): DevExpress.Dashboard.Internal.Data.dataStorage;
        getItemData(): DevExpress.Dashboard.Internal.Data.itemData;
        getMetaData(): DevExpress.Dashboard.Internal.Data.itemMetaData;
        _createMetaData(metaDataDTO: any): DevExpress.Dashboard.Internal.Data.itemMetaData;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export class GridBarCalculator {
        _valueItems: any;
        _alwaysShowZeroLevel: any;
        _normalizedValues: any;
        _zeroPosition: any;
        _range: any;
        _min: any;
        _max: any;
        _normalizationData: any;
        constructor(showZeroLevel: any);
        addValue(indexRow: number, valueItem: any): void;
        getNormalizedValue(index: any): any;
        getZeroPosition(): any;
        initialize(min: number, max: number): void;
        _normalizeValue(value: any): number;
        _calcMinMax(min: number, max: number): void;
        _calcRange(): void;
        _calcZeroPosition(): void;
        _calcNormalizationData(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import dxSparklineOptions = DevExpress.viz.dxSparkline.Properties;
    import FormatRuleModelBase = DevExpress.Dashboard.Internal.Data.FormatRuleModelBase;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export interface CellValue {
        getValue: () => any;
        getData: () => any;
        getStyleSettingsInfo: () => any;
    }
    export interface DimensionCellValue extends CellValue {
        getUniqueValue: () => any;
    }
    export interface HyperlinkCellValue extends DimensionCellValue {
        getUriValue: () => any;
    }
    export class gridDataController extends dataControllerBase {
        private _axisColumnPoints;
        private _axisSparklinePoints;
        private _columnRepository;
        private _selectionMembers;
        constructor(options: any);
        getDataSource(): any[];
        private initializeColumnBarCalculator;
        getValueItem(columnName: any, rowIndex?: any): any;
        private _getValueItem;
        getSelectionValues(values: any): any[];
        getSelectedRowKeys(valuesSet: any[][]): number[];
        getDimensionValues(rowIndex: number): DevExpress.Dashboard.Data.PrimitiveType[];
        getTotalValue(measureId: any): string;
        private _getBarCellValue;
        private _getBarData;
        private _getMeasureCellValue;
        private _getCellValue;
        private _getStyleSettingsInfo;
        protected _getStyleIndexes(rule: DevExpress.Dashboard.Internal.Data.FormatRuleModelBase, cellInfo: any, points: any): any[];
        private _getAxisPoint;
        private _getDeltaValue;
        private _getDeltaValueItem;
        private _getSparklineCellValues;
        private _getColumnAxisPoint;
        private _getPointArray;
    }
    export interface SparklineData {
        sparkline: DevExpress.viz.dxSparkline.Properties;
        startText: string;
        endText: string;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export let localizationId: {
        FilterElementShowAllItem: string;
        DateTimeQuarterFormat: string;
        buttonNames: {
            [key: string]: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        };
        labelName: {
            [key: string]: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        };
        sparkline: {
            [key: string]: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        };
        MessageCustomItemIsNotSupported: string;
        MessageGridHasNoData: string;
        MessagePivotHasNoData: string;
        PivotGridGrandTotal: string;
        PivotGridTotal: string;
        ChartTotalValue: string;
        ParametersSelectorText: string;
        OpenCaption: string;
        HighCaption: string;
        LowCaption: string;
        CloseCaption: string;
        NumericFormatUnitSymbolThousands: string;
        NumericFormatUnitSymbolMillions: string;
        NumericFormatUnitSymbolBillions: string;
        FilterElementCheckedComboBoxNoDataCaption: string;
        FilterElementRadioComboBoxNoDataCaption: string;
        FilterElementNoDataToDisplay: string;
        OlapRaggedHierarchyNoneItemCaption: string;
        TreemapLabelArgumentTemplate: string;
        TreemapLabelValueTemplate: string;
        SearchNullValuePrompt: string;
        LegendItemFormatString: string;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import GridColumnFixedWidthType = DevExpress.Dashboard.Model.GridColumnFixedWidthType;
    export interface IColumnOptions {
        widthType: DevExpress.Dashboard.Model.GridColumnFixedWidthType;
        weight: number;
        actualIndex: number;
        fixedWidth?: number;
    }
    export interface IWidthOptions {
        mode: ColumnWidthMode;
        columnsOptions: Array<IColumnOptions>;
    }
    export interface IWidthInfo {
        mode: string;
        columnsOptions: Array<IColumnWidthInfo>;
    }
    export interface IColumnWidthInfo {
        widthType: string;
        initialWidth: number;
        actualWidth: number;
    }
    export interface IBestFitProvider {
        getBestFit: (index: number) => number;
    }
    export interface IColumnWidthsStorage {
        columnsResized: boolean;
        mode: ColumnWidthMode;
        columnsOptions: Array<IColumnOptions>;
    }
    export type ColumnWidthMode = "Manual" | "AutoFitToContents" | "AutoFitToGrid";
    export class ColumnWidthCalculator {
        widthOptions: IWidthOptions;
        _columnWidths: Array<number>;
        _columnWidthsStorage: IColumnWidthsStorage;
        get columnsResized(): boolean;
        reset(viewModel: any, columnWidthMode: ColumnWidthMode): void;
        getLeftPrintingColumnIndex(hScrollPosition: any): number;
        getClientWidthOptions(): any;
        onDataLoaded(viewModel: any, columnWidthMode: ColumnWidthMode): void;
        calcColumnsWidth(bestFitProvider: IBestFitProvider, maxVisibleWidth: number, charWidth: number): Array<number>;
        onColumnResized(leftColumnIndex: number, leftColumnWidth: number, rightColumnWidth: number): Array<number>;
        _unfixColumnWidth(leftColumnIndex: any): void;
        _calcWidth(optionsInfo: any, maxVisibleWidth: any): void;
        _scaleColumns(optionsInfo: any, isFixed: any, maxVisibleWidth: any, actualWidthSum: any): any;
        _spreadRemainder(optionsInfo: any, isFixed: any, maxVisibleWidth: any, actualWidthSum: any): any;
        _isScaledColumns(widthMode: any, widthType: any, isFixed: any): boolean;
        _resetWidthOptions(viewModel: any, columnWidthMode: ColumnWidthMode): void;
        _createWidthInfo(bestFitProvider: IBestFitProvider, charWidth: number): IWidthInfo;
        _updateColumnWidthsStorage(): void;
        _isAllColumnsFixed(): boolean;
        _updateWeight(columnsWidthInfo: any, columnWidths: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export const zIndex: {
        floatingToolbar: number;
        dashboardItemShield: number;
        dashboardItemTooltips: number;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export const indicatorType: {
        none: string;
        up: string;
        down: string;
        warning: string;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export class DeltaIndicator {
        _container: any;
        _renderer: any;
        _shape: any;
        constructor(options?: any);
        _init(): void;
        draw(options: any): any;
        _prepareDrawParams(options: any): any;
        _render(params: any): void;
        _drawShape(params: any): any;
        static getIndicatorColorType(type?: any, hasPositiveMeaning?: any, useDefaultColor?: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export class SimpleIndicator {
        private static _staticPartMarkup;
        private static svgIndicators;
        static getIndicator(type: any, hasPositiveMeaning?: any): any;
        static get __getRenderedIndicators(): {
            none: string;
            up: string;
            up_negative: string;
            down: string;
            down_negative: string;
            warning: string;
        };
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import SparklineData = DevExpress.Dashboard.Internal.Data.SparklineData;
    export class GridColumnPainter {
        static CssClasses: {
            flexParent: string;
            flexDeltaParent: string;
            sparklineStartValue: string;
            deltaIndicator: string;
            truncated: string;
            fixed: string;
            rightAlignment: string;
        };
        static renderDelta(parentContainer: HTMLElement, deltaValue: any, isDetail: any): void;
        static renderSparkline(name: string, showStartEndValues: boolean, parentContainer: HTMLElement, sparklineData: DevExpress.Dashboard.Internal.Data.SparklineData): void;
        static renderBar(columnName: string, parentContainer: HTMLElement, tooltipText: string, value: number, zeroValue: number): void;
        static renderImage(container: HTMLElement, imageData: any): void;
        static renderHyperlink(container: HTMLElement, uri: string, displayValue: string, isEncodeHtml: boolean): void;
        static renderValue(container: HTMLElement, text: string, isEncodeHtml: boolean): void;
        static changeGridSparklineColumnsWidth(gridRootElement: HTMLElement, columnName: string): void;
        static calcMaxWidth(values: NodeListOf<Element>): number;
        static changeGridBarColumnsWidth(gridRootElement: HTMLElement, columnName: string): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export function parseFilter(filterItems: any, columns: any, columnIndex: any, dateToString: any): any;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export const allowedStringOperations: string[];
    export function getCaseSensitiveFilterExpression(cellValue: string, filterValue: string, filterOperation: string): boolean;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxDataGrid = DevExpress.ui.dxDataGrid;
    import dxDataGridOptions = DevExpress.ui.dxDataGrid.Properties;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import CellValue = DevExpress.Dashboard.Internal.Data.CellValue;
    import gridDataController = DevExpress.Dashboard.Internal.Data.gridDataController;
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    import GridColumnTotalType = DevExpress.Dashboard.Model.GridColumnTotalType;
    import styleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.styleSettingsProvider;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import ViewerItemInfo = DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
    import ColumnWidthCalculator = DevExpress.Dashboard.Internal.Viewer.ColumnWidthCalculator;
    import ColumnWidthMode = DevExpress.Dashboard.Internal.Viewer.ColumnWidthMode;
    import IBestFitProvider = DevExpress.Dashboard.Internal.Viewer.IBestFitProvider;
    import IWidthOptions = DevExpress.Dashboard.Internal.Viewer.IWidthOptions;
    export interface GridClientState {
        widthOptions: DevExpress.Dashboard.Internal.Viewer.IWidthOptions;
    }
    export class dataGridItem extends baseItem {
        _calculator: DevExpress.Dashboard.Internal.Viewer.ColumnWidthCalculator;
        _styleSettingsProvider: DevExpress.Dashboard.Internal.Viewer.styleSettingsProvider;
        _dataGrid: DevExpress.ui.dxDataGrid;
        _updateLocked: boolean;
        _digits_string: string;
        charWidth: number;
        resetClientStateOnUpdate: boolean;
        manualyResetClientState: boolean;
        clientFilterChanged: JQuery.Callbacks<Function>;
        clientFilterStateChanged: JQuery.Callbacks<Function>;
        protected get _captionToolbarSeparatorRequired(): boolean;
        _dataController: DevExpress.Dashboard.Internal.Data.gridDataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        TextAlignment: {
            [key: string]: "left" | "right" | "center";
        };
        DisplayMode: {
            Value: string;
            Delta: string;
            Bar: string;
            Sparkline: string;
            Image: string;
            Hyperlink: string;
        };
        SummaryType: {
            Count: string;
            Min: string;
            Max: string;
            Avg: string;
            Sum: string;
        };
        CssClasses: {
            wordWrap: string;
            gridAdaptiveCellValue: string;
        };
        dispose(): void;
        protected _clearSelectionUnsafe(): void;
        protected _setSelectionUnsafe(values: any): void;
        protected _selectTuplesCore(tuples: DevExpress.Dashboard.Internal.Data.itemDataTupleValues[], updateTupleDelegate: (tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues) => DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected renderPartialContentUnsafe(): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected getInfoUnsafe(): DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
        _getSortInfo(): any[];
        protected _initializeData(newOptions: any): void;
        getValueItem(columnName: string, index: number): DevExpress.Dashboard.Internal.Data.CellValue;
        _bestFitProvider: DevExpress.Dashboard.Internal.Viewer.IBestFitProvider;
        _resetColumnWidths(): void;
        _updateColumnsWidth(columnWidths: Array<number>): void;
        _getColumnWidthProperty(): string;
        _getColumnWidthMode(): DevExpress.Dashboard.Internal.Viewer.ColumnWidthMode;
        _getDefaultBestCharacterCount(index: number): number;
        _beginResize(): void;
        _endResize(): void;
        _updateCharWidth(): void;
        gridWidthOptionsChanged: (args: {
            widthOptions: any;
        }) => void;
        _clientStateUpdateDebounced: (...args: any[]) => void;
        _onColumnsChanging(e: {
            component: DevExpress.ui.dxDataGrid;
            optionNames: any;
        }): void;
        _getViewOptions(): DevExpress.ui.dxDataGrid.Properties;
        _customizeViewOptions: (opts: DevExpress.ui.dxDataGrid.Properties) => void;
        _getCommonOptions(): DevExpress.ui.dxDataGrid.Properties;
        _getRowsValues(data: {
            index: number;
        }): any[];
        _getSelectedRowIndices(): number[];
        _getTotalCaptionTemplate(totalType: DevExpress.Dashboard.Model.GridColumnTotalType): string;
        _getTotals(): any[];
        _calculateCustomSummary(options: any): void;
        private _getColumnName;
        private calculateFilterExpressionHandler;
        _getColumns(): any[];
        private _changeGridSparklineColumnsWidth;
        _isDetail(rowType: string): boolean;
        protected _applySelectionUnsafe(): void;
        protected _resizeUnsafe(): void;
        _getDataPoint(element: any): DevExpress.Dashboard.Internal.Viewer.DataPoint;
        _getColumnsByColumnType(columnType: any): any[];
        _getColumnDataIdsByColumnType(columnType: any): any[];
        _getElementInteractionValue(element: any, viewModel: any): any[];
        _getWidget(): DevExpress.ui.dxDataGrid<any, any>;
        _setGridSelection(values: any, keyProcessingDelegate?: any): void;
        _selectRows(data: any): void;
        _isMultiDataSupported(): boolean;
        private isSummaryFilterCollecting;
        private canRaiseFilterChanged;
        _raiseClientFilterChanged(e: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import ItemDataAxis = DevExpress.Dashboard.Data.ItemDataAxis;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    export interface PivotGridDataSourceField {
        area?: "column" | "data" | "filter" | "row" | undefined;
        caption?: string;
        dataField?: string;
        dataType?: PivotFieldType;
        name?: string;
        showGrandTotals?: boolean;
        showTotals?: boolean;
        showValues?: boolean;
        expanded?: boolean;
        sortBy?: "displayText" | "value" | "none";
    }
    export type PivotFieldType = "date" | "number" | "string" | undefined;
    export interface PivotState {
        columnExpandedPaths: Array<Array<any>>;
        rowExpandedPaths: Array<Array<any>>;
        fields: PivotGridDataSourceField[];
    }
    export let pivotHelper: {
        getSchemaRow(fields: PivotGridDataSourceField[]): {};
        createAreaFields(fieldsViewModels: Array<any>, area: "column" | "row" | "data", autoExpand?: boolean): PivotGridDataSourceField[];
        getColumnAxis(multiData: DevExpress.Dashboard.Internal.Data.itemData): DevExpress.Dashboard.Data.ItemDataAxis;
        getRowAxis(multiData: DevExpress.Dashboard.Internal.Data.itemData): DevExpress.Dashboard.Data.ItemDataAxis;
    };
    export type FilterValue = DevExpress.Dashboard.Data.PrimitiveType | string | Array<any>;
    abstract class FilterValueVisitor<T> {
        private readonly _supportedLogicalOperation;
        private _visitComplexExpression;
        protected _visit(filter: Array<FilterValue>): T;
        protected abstract _visitEmpty(filter: Array<FilterValue>): T;
        protected abstract _negate(value: T): T;
        protected abstract _visitEquality(field: string, value: any): T;
        protected abstract _and(left: T, right: T): any;
        protected abstract _or(left: T, right: T): any;
    }
    export class FilterChecker extends FilterValueVisitor<boolean> {
        static _instance: FilterChecker;
        static fits(dimensionValues: {
            [field: string]: DevExpress.Dashboard.Data.PrimitiveType;
        }, filter: Array<FilterValue>): boolean;
        private _dimensionValues;
        protected _visitEmpty(filter: FilterValue[]): boolean;
        protected _negate(value: boolean): boolean;
        protected _visitEquality(field: string, value: any): boolean;
        protected _and(left: boolean, right: boolean): boolean;
        protected _or(left: boolean, right: boolean): boolean;
    }
    export class OneElementFilterRemover extends FilterValueVisitor<Array<FilterValue>> {
        private static _instance;
        static simplify(filter: FilterValue[]): FilterValue[];
        protected _visitEmpty(filter: FilterValue[]): FilterValue[];
        protected _negate(value: FilterValue[]): FilterValue[];
        protected _visitEquality(field: string, value: any): FilterValue[];
        protected _and(left: FilterValue[], right: FilterValue[]): (string | FilterValue[])[];
        protected _or(left: FilterValue[], right: FilterValue[]): (string | FilterValue[])[];
    }
    export class FieldsExtractor extends FilterValueVisitor<string[]> {
        private static _instance;
        static extract(filter: FilterValue[]): string[];
        protected _visitEmpty(filter: FilterValue[]): string[];
        protected _negate(value: string[]): string[];
        protected _visitEquality(field: string, value: any): string[];
        protected _and(left: string[], right: string[]): string[];
        protected _or(left: string[], right: string[]): string[];
    }
    export {};
}
declare module DevExpress.Dashboard {
    import DxElement = DevExpress.core.DxElement;
    export interface DashboardTitleToolbarOptions {
        contentItems: Array<ViewerToolbarItem>;
        actionItems: Array<ViewerToolbarItem>;
        navigationItems: Array<ViewerToolbarItem>;
    }
    export interface DashboardItemCaptionToolbarOptions {
        actionItems: Array<ViewerToolbarItem>;
        staticItems: Array<ViewerToolbarItem>;
        stateItems: Array<ViewerToolbarItem>;
        navigationItems: Array<ViewerToolbarItem>;
    }
    export interface ViewerToolbarItem {
        type?: "button" | "menu" | "text";
        text?: string;
        icon?: string;
        name?: string;
        checked?: boolean;
        disabled?: boolean;
        menu?: ViewerToolbarItemMenu;
        tooltip?: ViewerToolbarItemTooltip | string;
        hint?: string;
        template?: () => JQuery | Element | string;
        click?: (element: DevExpress.core.DxElement) => void;
    }
    export interface ViewerToolbarItemTooltip {
        className?: string;
        template?: (contentElement: DevExpress.core.DxElement) => JQuery | Element | string;
    }
    export interface ViewerToolbarItemMenu {
        type: "list" | "icons";
        title?: string;
        items?: Array<string>;
        selectionMode?: "none" | "single" | "multiple";
        selectedItems?: Array<string>;
        columnCount?: number;
        itemClick?: (itemData: Object, itemElement: DevExpress.core.DxElement, itemIndex: number) => void;
        itemTemplate?: (itemData: Object, itemElement: DevExpress.core.DxElement, itemIndex: number) => JQuery | Element | string;
    }
    export let dashboardToolbarItemNames: {
        titleFilterText: string;
        titleFilterIcon: string;
        exportMenu: string;
        dashboardTitleImage: string;
        dashboardTitle: string;
        parameters: string;
        itemCaption: string;
        limitVisibleData: string;
        clearMasterFilter: string;
        clearSelection: string;
        drillUp: string;
        values: string;
        multiselection: string;
        initialExtent: string;
        dateTimePeriodMenu: string;
        customDateTimePeriod: string;
        dashboardList: string;
        dashboardFilters: string;
        backButton: string;
        itemFilters: string;
        restoreItem: string;
        maximizeItem: string;
        dataInspector: string;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardExportFormat = DevExpress.Dashboard.DashboardExportFormat;
    export let cssClasses: {
        caption: string;
        actionToolbar: string;
        contentToolbar: string;
        captionBorder: string;
        title: string;
        captionPanelSeparator: string;
        popoverIconMenuWrapper: string;
        popoverListWrapper: string;
        floatingContainer: string;
        iconClearMasterFilter: string;
        iconClearSelection: string;
        iconDrillUp: string;
        iconMultiselection: string;
        iconItemExport: string;
        iconExportToPDF: string;
        iconExportToImage: string;
        iconExportToExcel: string;
        iconContentSelection: string;
        iconLimitVisibleData: string;
        iconParameters: string;
        iconFilter: string;
        iconTimePeriods: string;
        iconInitialExtent: string;
        iconBack: string;
        ellipsisIcon: string;
        tooltipLimitVisibleData: string;
        checked: string;
        textButton: string;
        filterText: string;
        dashboardContainer: string;
        toolbarItem: string;
        toolbarBefore: string;
        toolbarAfter: string;
        toolbarCenter: string;
        ellipsisText: string;
        flexParent: string;
        truncated: string;
        fixed: string;
        buttonBack: string;
        toolbarPreview: string;
    };
    export function _convertToExportFormat(exportIcon: any): DevExpress.Dashboard.DashboardExportFormat;
    export let Settings: {
        allowExportToImage: boolean;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxVectorMap = DevExpress.viz.dxVectorMap;
    import dxVectorMapOptions = DevExpress.viz.dxVectorMap.Properties;
    import IViewport = DevExpress.Dashboard.Internal.Model.IViewport;
    import IViewportViewModel = DevExpress.Dashboard.Internal.Model.IViewportViewModel;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemInfo = DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
    export interface IClientSize {
        width: number;
        height: number;
    }
    export interface MapWidgetState {
        zoomFactor: number;
        center: Array<number>;
    }
    export interface MapClusterizationInfo {
        viewport: DevExpress.Dashboard.Internal.Model.IViewport;
        clientSize: IClientSize;
    }
    export interface MapClientState {
        widgetState: MapWidgetState;
        clusterizationInfo: MapClusterizationInfo;
    }
    export abstract class mapItem extends baseItem {
        mapViewer: DevExpress.viz.dxVectorMap;
        clientState: MapClientState;
        initialExtentChanged: (changed: any) => void;
        isInitialExtentChanged: boolean;
        previousViewportViewModel: DevExpress.Dashboard.Internal.Model.IViewportViewModel;
        isViewportLocked: boolean;
        constructor($container: any, options: any);
        dispose(): void;
        protected _renderContentInternal(element: HTMLElement, changeExisting: boolean, options: DevExpress.viz.dxVectorMap.Properties): void;
        protected resetClientViewport(): void;
        private _shouldResetClientViewport;
        private _viewportEquals;
        private _updatePreviousViewport;
        protected _clearSelectionUnsafe(): void;
        protected getInfoUnsafe(): DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
        protected _getSpecificStatePanelItems(): Array<DevExpress.Dashboard.ViewerToolbarItem>;
        protected _getMapViewerOptions(): DevExpress.viz.dxVectorMap.Properties;
        protected _getLabelSettings(viewModel: any): {
            label: {
                enabled: any;
                dataField: string;
            };
        };
        private _calculateZoomFactor;
        private _translateLon;
        private _translateLat;
        protected _getMapDataSource(mapItems: any, titleName: any): any[];
        protected _configureGeometryLayers(mapDataSource: any, areaSettings: any): any;
        protected _getLegend(legendModel: any): any;
        private _updateLegendPosition;
        protected _isSelected(current: any): boolean;
        protected _getToolTip(name: any, value: any): any;
        protected _getColors(colorModels: any): any;
        protected _updateRangeStops(rangeStops: any, min: any, max: any, percent: any): any[];
        private _updatePercentRangeStops;
        private _getViewport;
        protected _getClientContext(): MapClientState;
        protected _getClusterizationInfo(): MapClusterizationInfo;
        private _getWidgetState;
        protected _updateClientStateUnsafe(clientState: MapClientState): void;
        protected _updateViewport(viewport: DevExpress.Dashboard.Internal.Model.IViewport): void;
        private _updateWidgetState;
        protected _updateContentSizeUnsafe(): void;
        viewportChangedCallback: (viewport: any) => void;
        protected _onViewPortChanged(): void;
        onInitialExtent(newViewport?: DevExpress.Dashboard.Internal.Model.IViewport): void;
        protected _onInitialExtentUnsafe(newViewport?: DevExpress.Dashboard.Internal.Model.IViewport): void;
        private _onInitialExtentBase;
        protected _getWidget(): DevExpress.viz.dxVectorMap;
        private _subscribeItemEvents;
        private _unsubscribeItemEvents;
        private _toggleInitialExtentChanged;
    }
}
declare module DevExpress.Dashboard.Model {
    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
    export class ColorSchemeDefinition {
        dataSource: string;
        dataMember: string;
        dimensionDefinitions: DevExpress.Dashboard.Model.IDimensionDefinition[];
        colorByMeasures: boolean;
        componentName: string;
        private name;
        key: ko.Computed<string>;
        typeText: ko.Computed<string>;
        dataSourceText: ko.Computed<string>;
        dataItems: ko.Computed<string[]>;
        constructor(dataSource: string, dataMember: string, dimensionDefinitions: DevExpress.Dashboard.Model.IDimensionDefinition[], colorByMeasures?: boolean, componentName?: string, name?: string);
        equals(definition: ColorSchemeDefinition): boolean;
        _getDataSourceText(dataSourceName: string): string;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
    export class DimensionDefinition extends SerializableModel implements IDimensionDefinition {
        constructor(model?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Analytics.Utils.ISerializationInfoArray);
        dataMember: ko.Observable<string>;
        dateTimeGroupInterval: ko.Observable<string>;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import Calculation = DevExpress.Dashboard.Model.Calculation;
    import WindowDefinition = DevExpress.Dashboard.Model.WindowDefinition;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
    export class MeasureDefinition extends SerializableModel {
        private static _constructFilteredName;
        displayText: ko.Computed<string>;
        dataMember: ko.Observable<string>;
        summaryType: ko.Observable<string>;
        calculation: DevExpress.Dashboard.Model.Calculation;
        windowDefinition: DevExpress.Dashboard.Model.WindowDefinition;
        expression: ko.Observable<string>;
        filterString: ko.Observable<string>;
        definitions: ko.ObservableArray<DevExpress.Dashboard.Model.IDimensionDefinition>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        get _id(): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import Color = DevExpress.Dashboard.Model.Color;
    import IDashboardComponent = DevExpress.Dashboard.Internal.Model.IDashboardComponent;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import ColorSchemeDefinition = DevExpress.Dashboard.Model.ColorSchemeDefinition;
    import DimensionKey = DevExpress.Dashboard.Model.DimensionKey;
    import MeasureDefinition = DevExpress.Dashboard.Model.MeasureDefinition;
    export class ColorSchemeEntry extends TypedSerializableModel implements IDashboardComponent {
        itemComponentName: string;
        private name;
        dataSource: ko.Observable<string>;
        dataMember: ko.Observable<string>;
        color: ko.Observable<DevExpress.Dashboard.Model.Color>;
        paletteIndex: ko.Observable<number>;
        displayText: ko.Subscribable<string>;
        colorText: ko.Computed<string>;
        measureKeys: ko.ObservableArray<DevExpress.Dashboard.Model.MeasureDefinition>;
        dimensionKeys: ko.ObservableArray<DevExpress.Dashboard.Model.DimensionKey>;
        componentName: ko.Subscribable<string>;
        private _definition;
        get custom(): boolean;
        get definition(): DevExpress.Dashboard.Model.ColorSchemeDefinition;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer, itemComponentName?: string, name?: string);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        clone(): ColorSchemeEntry;
        equals(entry: ColorSchemeEntry): boolean;
        getUniqueNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
    export class AutoColorSchemeEntry extends ColorSchemeEntry {
        constructor(modelJson: any, serializer: DevExpress.Analytics.Utils.ModelSerializer, componentName: string, name: string);
        get custom(): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    export class DashboardState {
        Parameters: {
            [id: string]: DevExpress.Dashboard.Data.PrimitiveType | Array<DevExpress.Dashboard.Data.PrimitiveType>;
        };
        Items: {
            [id: string]: ItemState;
        };
    }
    export class RangeFilterSelection {
        Minimum: number | Date;
        Maximum: number | Date;
    }
    export class RangeFilterState {
        Selection?: RangeFilterSelection;
        PeriodName?: string;
    }
    export class ItemState {
        RangeFilterState?: RangeFilterState;
        MasterFilterValues?: Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>;
        DrillDownValues?: Array<DevExpress.Dashboard.Data.PrimitiveType>;
        SelectedLayerIndex?: number;
        TabPageName?: string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SummaryType = DevExpress.Dashboard.Model.SummaryType;
    import Calculation = DevExpress.Dashboard.Model.Calculation;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import WindowDefinition = DevExpress.Dashboard.Model.WindowDefinition;
    export class Measure extends DataItem {
        calculation: DevExpress.Dashboard.Model.Calculation;
        windowDefinition: DevExpress.Dashboard.Model.WindowDefinition;
        expression: ko.Observable<string>;
        summaryType: ko.Observable<DevExpress.Dashboard.Model.SummaryType>;
        filterString: ko.Observable<string>;
        constructor(dataItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        grabFrom(dataItem: Measure): void;
        isDefinitionEquals(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
        _hasCalculation(): any;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    export function arrayEquals(array1: Array<any>, array2: Array<any>): boolean;
    export function arrayInsert(a: Array<any>, insertion: Array<any>, position: number): any[];
    export function areArraysEqual(arr1?: any[], arr2?: any[]): boolean;
    export function compareArrays<T>(array1: Array<T>, array2: Array<T>, predicate?: (a: T, b: T) => boolean): boolean;
    export function compareNotOrderedArrays<T>(array1: Array<T>, array2: Array<T>, predicate?: (a: T, b: T) => boolean): boolean;
    export function findClosestItemIndex<T>(array: Array<T>, predicate: (element: T) => boolean): number;
}
declare module DevExpress.Dashboard.Metadata {
    export let sliceTableDimensions: any;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class SpecificWindowDefinition extends MeasureCalculationWindowDefinition {
        dimensions: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        _dimensionsInfoPatcher: (propertyInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo) => DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let elementTypeApplyTo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dimensionId: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let textId: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardFormatRuleRowElementSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class CardFormatRuleRowElement extends SerializableModel {
        elementTypeApplyTo: ko.Observable<string>;
        dimensionId: ko.Observable<string>;
        textId: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let formatConditionBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export abstract class FormatConditionBase extends SerializableModel {
        dataType: ko.Observable<string>;
        dateTimeGroupInterval: ko.Observable<DevExpress.Dashboard.Model.DateTimeGroupInterval>;
        private _empty;
        get _isApplyToRowColumnRestricted(): boolean;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        isValid(): boolean;
        isRange(): boolean;
        isGradient(): boolean;
        isEmpty: ko.Observable<boolean>;
        getSpecificType: () => any;
        setSpecificType: (type: any) => void;
        init(): void;
        _getAvailableFontFamilies: () => ko.Subscribable<string[]>;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let showBarOnly: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let allowNegativeAxis: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let drawAxis: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionBarOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class FormatConditionBarOptions extends SerializableModel {
        allowNegativeAxis: ko.Observable<boolean>;
        drawAxis: ko.Observable<boolean>;
        showBarOnly: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export const negativeInfinity = "-Infinity";
    export let fieldTypes: {
        Text: string;
        DateTime: string;
        Bool: string;
        Integer: string;
        Float: string;
        Double: string;
        Decimal: string;
        Enum: string;
        Custom: string;
        Unknown: string;
    };
    export let complexValueType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let complexValuePersistedValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let complexValueValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let complexValueInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let styleSettings: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let barOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let emptyStyleType: string;
    export let styleSettingsBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let appearanceType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let fontStyle: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let fontFamily: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let backColor: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let foreColor: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let appearanceSettingsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export abstract class StyleSettingsBase extends SerializableModel {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        abstract equals(style: StyleSettingsBase): boolean;
        abstract clone(): StyleSettingsBase;
        init(): void;
        setSpecificType(type: string): void;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Color = DevExpress.Dashboard.Model.Color;
    import FontStyle = DevExpress.Dashboard.Model.FontStyle;
    import FormatConditionAppearanceType = DevExpress.Dashboard.Model.FormatConditionAppearanceType;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    export class AppearanceSettings extends StyleSettingsBase {
        appearanceType: ko.Observable<DevExpress.Dashboard.Model.FormatConditionAppearanceType>;
        fontFamily: ko.Observable<string>;
        fontStyle: ko.Observable<DevExpress.Dashboard.Model.FontStyle>;
        backColor: ko.Observable<DevExpress.Dashboard.Model.Color>;
        foreColor: ko.Observable<DevExpress.Dashboard.Model.Color>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(style: DevExpress.Dashboard.Model.StyleSettingsBase): boolean;
        clone(): DevExpress.Dashboard.Model.StyleSettingsBase;
        setSpecificType(type: DevExpress.Dashboard.Model.FormatConditionAppearanceType): void;
        init(): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let ranges: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeSetSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class ComplexValue extends SerializableModel {
        _persistedValue: ko.Observable<any>;
        value: ko.Computed<any>;
        type: ko.Observable<string>;
        isEmpty(): boolean;
        get isInfinity(): boolean;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        setValue(value: any, type: string): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let predefinedColor: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let color: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let colorStyleSettingsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Color = DevExpress.Dashboard.Model.Color;
    import FormatConditionAppearanceType = DevExpress.Dashboard.Model.FormatConditionAppearanceType;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    export class ColorStyleSettings extends StyleSettingsBase {
        predefinedColor: ko.Observable<DevExpress.Dashboard.Model.FormatConditionAppearanceType>;
        color: ko.Observable<DevExpress.Dashboard.Model.Color>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(style: DevExpress.Dashboard.Model.StyleSettingsBase): boolean;
        clone(): DevExpress.Dashboard.Model.StyleSettingsBase;
        setSpecificType(type: DevExpress.Dashboard.Model.FormatConditionAppearanceType): void;
        init(): void;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ColorStyleSettings = DevExpress.Dashboard.Model.ColorStyleSettings;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    export class BarStyleSettings extends ColorStyleSettings {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        clone(): DevExpress.Dashboard.Model.StyleSettingsBase;
        init(): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let iconType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let iconSettingsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import FormatConditionIconType = DevExpress.Dashboard.Model.FormatConditionIconType;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    export class IconSettings extends StyleSettingsBase {
        iconType: ko.Observable<DevExpress.Dashboard.Model.FormatConditionIconType>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(style: DevExpress.Dashboard.Model.StyleSettingsBase): boolean;
        clone(): DevExpress.Dashboard.Model.StyleSettingsBase;
        setSpecificType(type: DevExpress.Dashboard.Model.FormatConditionIconType): void;
        init(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import AppearanceSettings = DevExpress.Dashboard.Model.AppearanceSettings;
    import BarStyleSettings = DevExpress.Dashboard.Model.BarStyleSettings;
    import ColorStyleSettings = DevExpress.Dashboard.Model.ColorStyleSettings;
    import IconSettings = DevExpress.Dashboard.Model.IconSettings;
    export let styleSettingsTypesMap: {
        AppearanceSettings: typeof DevExpress.Dashboard.Model.AppearanceSettings;
        IconSettings: typeof DevExpress.Dashboard.Model.IconSettings;
        BarStyleSettings: typeof DevExpress.Dashboard.Model.BarStyleSettings;
        ColorStyleSettings: typeof DevExpress.Dashboard.Model.ColorStyleSettings;
    };
    export type StyleSettingsType = keyof typeof styleSettingsTypesMap;
    export let styleSettingsTypes: StyleSettingsType[];
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import StyleSettingsType = DevExpress.Dashboard.Internal.Model.StyleSettingsType;
    import FormatConditionBase = DevExpress.Dashboard.Model.FormatConditionBase;
    export let currentStyleSettingsInfo: (styleSettingsType: ko.Observable<DevExpress.Dashboard.Internal.Model.StyleSettingsType>) => DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export abstract class FormatConditionStyleBase extends FormatConditionBase {
        styleSettings: ko.Observable<DevExpress.Dashboard.Model.StyleSettingsBase>;
        private _styleSettingsType;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected abstract _getInfoButStyleSettings(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        protected _getStyleSettingsInfo(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
        protected _getDefaultStyleSettingsType(): DevExpress.Dashboard.Internal.Model.StyleSettingsType;
        getDefaultStyleSettingsType(): string;
        isValid(): boolean;
        init(): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let rangeValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeValueComparison: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeInfoSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardFormatConditionComparisonType = DevExpress.Dashboard.Model.DashboardFormatConditionComparisonType;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import ComplexValue = DevExpress.Dashboard.Model.ComplexValue;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    export class RangeInfo extends TypedSerializableModel {
        styleSettings: ko.Observable<DevExpress.Dashboard.Model.StyleSettingsBase>;
        value: DevExpress.Dashboard.Model.ComplexValue;
        valueComparison: ko.Observable<DevExpress.Dashboard.Model.DashboardFormatConditionComparisonType>;
        private _styleSettingsType;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        clone(): RangeInfo;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import RangeInfo = DevExpress.Dashboard.Model.RangeInfo;
    export class RangeSet extends SerializableModel {
        ranges: ko.ObservableArray<DevExpress.Dashboard.Model.RangeInfo>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let rangeValueType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeSet: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionRangeBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardFormatConditionValueType = DevExpress.Dashboard.Model.DashboardFormatConditionValueType;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionBase = DevExpress.Dashboard.Model.FormatConditionBase;
    import RangeInfo = DevExpress.Dashboard.Model.RangeInfo;
    import RangeSet = DevExpress.Dashboard.Model.RangeSet;
    export abstract class FormatConditionRangeBase extends FormatConditionBase {
        valueType: ko.Observable<DevExpress.Dashboard.Model.DashboardFormatConditionValueType>;
        rangeSet: DevExpress.Dashboard.Model.RangeSet;
        get actualStyles(): Array<DevExpress.Dashboard.Model.StyleSettingsBase>;
        get stopStyles(): Array<DevExpress.Dashboard.Model.StyleSettingsBase>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        isValid(): boolean;
        isRange(): boolean;
        getSpecificType: () => any;
        setSpecificType: (specificType: any) => any;
        abstract getActualPredefinedType(): any;
        abstract setActualPredefinedType(specificType: any): any;
        setValues(values: Array<any>): void;
        createStyleSettings(styleListItem: any): any;
        protected _getSortedRanges(): Array<DevExpress.Dashboard.Model.RangeInfo>;
        protected _getRangeIndexSettings(index: number): DevExpress.Dashboard.Model.StyleSettingsBase;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let formatConditionRangeSetSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    export enum FormatConditionRangeSetPredefinedType {
        None = 0,
        Custom = 1,
        Arrows2 = 2,
        Arrows3 = 3,
        Arrows4 = 4,
        Arrows5 = 5,
        ArrowsGray2 = 6,
        ArrowsGray3 = 7,
        ArrowsGray4 = 8,
        ArrowsGray5 = 9,
        PositiveNegative3 = 10,
        Stars3 = 11,
        Quarters5 = 12,
        Bars4 = 13,
        Bars5 = 14,
        Boxes5 = 15,
        TrafficLights3 = 16,
        Circles2 = 17,
        Circles3 = 18,
        Circles4 = 19,
        CirclesRedToBlack4 = 20,
        Signs3 = 21,
        Symbols2 = 22,
        Symbols3 = 23,
        SymbolsCircled2 = 24,
        SymbolsCircled3 = 25,
        Flags3 = 26,
        ColorsPaleRedGreen = 27,
        ColorsPaleRedGreenBlue = 28,
        ColorsPaleRedYellowGreenBlue = 29,
        ColorsPaleRedOrangeYellowGreenBlue = 30,
        ColorsRedGreen = 31,
        ColorsRedGreenBlue = 32,
        ColorsRedYellowGreenBlue = 33,
        ColorsRedOrangeYellowGreenBlue = 34
    }
    export enum FormatConditionRangeGradientPredefinedType {
        None = 0,
        Custom = 1,
        GreenWhite = 2,
        WhiteGreen = 3,
        RedWhite = 4,
        WhiteRed = 5,
        YellowGreen = 6,
        GreenYellow = 7,
        YellowRed = 8,
        RedYellow = 9,
        BlueWhite = 10,
        WhiteBlue = 11,
        BlueRed = 12,
        RedBlue = 13,
        YellowBlue = 14,
        BlueYellow = 15,
        GreenBlue = 16,
        BlueGreen = 17,
        GreenWhiteBlue = 18,
        BlueWhiteGreen = 19,
        BlueWhiteRed = 20,
        RedWhiteBlue = 21,
        GreenWhiteRed = 22,
        RedWhiteGreen = 23,
        GreenYellowRed = 24,
        RedYellowGreen = 25,
        BlueYellowRed = 26,
        RedYellowBlue = 27,
        GreenYellowBlue = 28,
        BlueYellowGreen = 29
    }
    export enum FormatConditionIconGroups {
        Directional = 0,
        Indicators = 1,
        Flags = 2,
        Shapes = 3,
        RatingsMonochrome = 4,
        RatingsColor = 5
    }
    export interface IStyleList {
        list: Array<string>;
        isIcon: boolean;
    }
    export class FormatConditionConverter {
        static getStyleList(type: FormatConditionRangeSetPredefinedType): IStyleList;
        static toColorTypes(colorRangeSetType: FormatConditionRangeSetPredefinedType): Array<string>;
        static toIconTypes(iconRangeSetType: FormatConditionRangeSetPredefinedType): Array<string>;
        static toAppearanceTypes(gradientType: FormatConditionRangeGradientPredefinedType): Array<string>;
        static toGroupIconTypes(iconsGroup: FormatConditionIconGroups): Array<string>;
    }
}
declare module DevExpress.Dashboard.Model {
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    export class RangeIndexSettings extends StyleSettingsBase {
        index: ko.Observable<number>;
        isBarStyle: ko.Observable<boolean>;
        constructor(index: number);
        equals(style: DevExpress.Dashboard.Model.StyleSettingsBase): boolean;
        clone(): DevExpress.Dashboard.Model.StyleSettingsBase;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let segmentNumber: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionRangeGradientSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import Color = DevExpress.Dashboard.Model.Color;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import FormatConditionRangeGradientPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
    import RangeInfo = DevExpress.Dashboard.Model.RangeInfo;
    export class FormatConditionRangeGradient extends FormatConditionRangeBase {
        protected static isGradientStop(predefined: string, color: DevExpress.Dashboard.Model.Color): boolean;
        segmentNumber: ko.Computed<number>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        isGradient(): boolean;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getActualPredefinedType(): DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
        setActualPredefinedType(type: DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType): void;
        getSpecificType: () => DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
        setSpecificType: (specificType: any) => void;
        protected _generateByDefault(segmentNumber: number): void;
        generateAsPercent(startStyle: DevExpress.Dashboard.Model.StyleSettingsBase, endStyle: DevExpress.Dashboard.Model.StyleSettingsBase, segmentNumber: number): void;
        generateAsNumber(startStyle: DevExpress.Dashboard.Model.StyleSettingsBase, endStyle: DevExpress.Dashboard.Model.StyleSettingsBase, values: Array<any>): void;
        protected _getRangeIndexSettings(index: number): DevExpress.Dashboard.Model.StyleSettingsBase;
        protected _getSortedRanges(): Array<DevExpress.Dashboard.Model.RangeInfo>;
        protected _generate(startStyle: DevExpress.Dashboard.Model.StyleSettingsBase, endStyle: DevExpress.Dashboard.Model.StyleSettingsBase, rangeCount: number): void;
        protected _isGradientStop(style: DevExpress.Dashboard.Model.StyleSettingsBase): boolean;
        private _validateStyle;
    }
}
declare module DevExpress.Dashboard.Model {
    import Color = DevExpress.Dashboard.Model.Color;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import FormatConditionRangeGradient = DevExpress.Dashboard.Model.FormatConditionRangeGradient;
    import FormatConditionRangeSet = DevExpress.Dashboard.Model.FormatConditionRangeSet;
    import FormatConditionRangeGradientPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
    import FormatConditionRangeSetPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
    export class FormatConditionRangeGenerator {
        static generateRangeSet(condition: DevExpress.Dashboard.Model.FormatConditionRangeSet, type: DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType): void;
        static generateGradientByType(condition: DevExpress.Dashboard.Model.FormatConditionRangeGradient, type: DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType, segmentNumber: number, isBar?: boolean): void;
        static generateGradientByStyles(condition: DevExpress.Dashboard.Model.FormatConditionRangeGradient, styles: Array<DevExpress.Dashboard.Model.StyleSettingsBase>, segmentNumber: number): void;
        static generateGradientColors(gradientType: DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType, count: number): Array<DevExpress.Dashboard.Model.Color>;
        static getPredefinedType(actualStyles: Array<DevExpress.Dashboard.Model.StyleSettingsBase>, func: (type: DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType) => DevExpress.Dashboard.Model.FormatConditionRangeBase): DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
        static getGradientPredefinedType(actualStyles: Array<DevExpress.Dashboard.Model.StyleSettingsBase>, func: (type: DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType) => DevExpress.Dashboard.Model.FormatConditionRangeBase): DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
        static calculateRangePercentValues(segmentCount: number): Array<number>;
        static compareValues(val1: any, val2: any, changeType: boolean): number;
        private static _isStylesEqual;
        private static _getPercentRangeStops;
        private static _calculateRangePercent;
        private static _generateRangeSet;
        private static _calculateRangeDate;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import FormatConditionRangeSetPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
    export class FormatConditionRangeSet extends FormatConditionRangeBase {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getActualPredefinedType(): DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
        setActualPredefinedType(type: DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let formatConditionStyleBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let averageType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionAverageSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardFormatConditionAboveBelowType = DevExpress.Dashboard.Model.DashboardFormatConditionAboveBelowType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
    export class FormatConditionAverage extends FormatConditionStyleBase {
        averageType: ko.Observable<DevExpress.Dashboard.Model.DashboardFormatConditionAboveBelowType>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoButStyleSettings(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        getSpecificType: () => DevExpress.Dashboard.Model.DashboardFormatConditionAboveBelowType;
        setSpecificType: (type: DevExpress.Dashboard.Model.DashboardFormatConditionAboveBelowType) => void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let minimumType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let maximumType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionMinimum: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionMaximum: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionMinMaxBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardFormatConditionValueType = DevExpress.Dashboard.Model.DashboardFormatConditionValueType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
    export abstract class FormatConditionMinMaxBase extends FormatConditionStyleBase {
        minimumType: ko.Observable<DevExpress.Dashboard.Model.DashboardFormatConditionValueType>;
        maximumType: ko.Observable<DevExpress.Dashboard.Model.DashboardFormatConditionValueType>;
        minimum: ko.Observable<number>;
        maximum: ko.Observable<number>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoButStyleSettings(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let barNegativeStyleSettings: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let barCurrentStyleSettingsType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let barCurrentStyleSettings: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionBarSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import StyleSettingsType = DevExpress.Dashboard.Internal.Model.StyleSettingsType;
    import FormatConditionBarOptions = DevExpress.Dashboard.Model.FormatConditionBarOptions;
    import FormatConditionMinMaxBase = DevExpress.Dashboard.Model.FormatConditionMinMaxBase;
    export class FormatConditionBar extends FormatConditionMinMaxBase {
        barOptions: DevExpress.Dashboard.Model.FormatConditionBarOptions;
        negativeStyleSettings: ko.Observable<DevExpress.Dashboard.Model.StyleSettingsBase>;
        currentStyleSettingsType: ko.Observable<string>;
        currentStyleSettings: ko.Computed<DevExpress.Dashboard.Model.StyleSettingsBase>;
        get _isApplyToRowColumnRestricted(): boolean;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoButStyleSettings(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        protected _getStyleSettingsInfo(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
        getSpecificType: () => any;
        setSpecificType: (type: string) => void;
        protected _getDefaultStyleSettingsType(): DevExpress.Dashboard.Internal.Model.StyleSettingsType;
        init(): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import FilterDateType = DevExpress.Dashboard.Model.FilterDateType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let baseDateTypeValues: Array<{
        value: DevExpress.Dashboard.Model.FilterDateType;
        displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }>;
    export let extendedDateTypeValues: Array<{
        value: DevExpress.Dashboard.Model.FilterDateType;
        displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }>;
    export let dateType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionDateOccurringSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import FilterDateType = DevExpress.Dashboard.Model.FilterDateType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
    export class FormatConditionDateOccurring extends FormatConditionStyleBase {
        dateType: ko.Observable<DevExpress.Dashboard.Model.FilterDateType>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoButStyleSettings(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        getSpecificType: () => any;
        setSpecificType: (type: string) => void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let formatConditionExpression: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionFilter: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionExpressionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
    export class FormatConditionExpression extends FormatConditionStyleBase {
        expression: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoButStyleSettings(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        getSpecificType: () => any;
        setSpecificType: (type: string) => void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let rank: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _actualRankType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let topBottom: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionTopBottomSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardFormatConditionTopBottomType = DevExpress.Dashboard.Model.DashboardFormatConditionTopBottomType;
    import DashboardFormatConditionValueType = DevExpress.Dashboard.Model.DashboardFormatConditionValueType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
    export class FormatConditionTopBottom extends FormatConditionStyleBase {
        rank: ko.Observable<number>;
        rankType: ko.Observable<DevExpress.Dashboard.Model.DashboardFormatConditionValueType>;
        topBottom: ko.Observable<DevExpress.Dashboard.Model.DashboardFormatConditionTopBottomType>;
        _actualRankType: ko.PureComputed<DevExpress.Dashboard.Model.DashboardFormatConditionValueType>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoButStyleSettings(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        getSpecificType: () => DevExpress.Dashboard.Model.DashboardFormatConditionTopBottomType;
        setSpecificType: (type: DevExpress.Dashboard.Model.DashboardFormatConditionTopBottomType) => void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let conditionInCondition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionValue1: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionValue2: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatConditionValueSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardFormatCondition = DevExpress.Dashboard.Model.DashboardFormatCondition;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ComplexValue = DevExpress.Dashboard.Model.ComplexValue;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
    export class FormatConditionValue extends FormatConditionStyleBase {
        condition: ko.Observable<DevExpress.Dashboard.Model.DashboardFormatCondition>;
        value1: DevExpress.Dashboard.Model.ComplexValue;
        value2: DevExpress.Dashboard.Model.ComplexValue;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoButStyleSettings(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        getSpecificType: () => DevExpress.Dashboard.Model.DashboardFormatCondition;
        setSpecificType: (type: DevExpress.Dashboard.Model.DashboardFormatCondition) => void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let formatConditionColorRangeBarSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import FormatConditionBarOptions = DevExpress.Dashboard.Model.FormatConditionBarOptions;
    import FormatConditionRangeSet = DevExpress.Dashboard.Model.FormatConditionRangeSet;
    import FormatConditionRangeSetPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
    export class FormatConditionColorRangeBar extends FormatConditionRangeSet {
        barOptions: DevExpress.Dashboard.Model.FormatConditionBarOptions;
        get _isApplyToRowColumnRestricted(): boolean;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getActualPredefinedType(): DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
        setActualPredefinedType(type: DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType): void;
        createStyleSettings(styleListItem: any): any;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let formatConditionGradientRangeBarSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionBarOptions = DevExpress.Dashboard.Model.FormatConditionBarOptions;
    import FormatConditionRangeGradient = DevExpress.Dashboard.Model.FormatConditionRangeGradient;
    import FormatConditionRangeGradientPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
    export class FormatConditionGradientRangeBar extends FormatConditionRangeGradient {
        barOptions: DevExpress.Dashboard.Model.FormatConditionBarOptions;
        get _isApplyToRowColumnRestricted(): boolean;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getActualPredefinedType(): DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
        setActualPredefinedType(type: DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType): void;
        protected _isGradientStop(style: DevExpress.Dashboard.Model.StyleSettingsBase): boolean;
        protected _generateByDefault(segmentNumber: number): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let formatRuleName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let classCaption: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let enabled: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let conditionTypes: Array<DevExpress.Dashboard.Metadata.IDashboardSerializationInfo>;
    export let condition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dashboardItemFormatRuleSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import FormatConditionBase = DevExpress.Dashboard.Model.FormatConditionBase;
    export abstract class DashboardItemFormatRule extends TypedSerializableModel {
        name: ko.Observable<string>;
        enabled: ko.Observable<boolean>;
        condition: ko.Computed<DevExpress.Dashboard.Model.FormatConditionBase>;
        get _classCaption(): string;
        get _classId(): string;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _changeConditionType(propertyName: string): void;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import CardFormatRuleRowElement = DevExpress.Dashboard.Model.CardFormatRuleRowElement;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    export abstract class CardItemFormatRuleBase extends DashboardItemFormatRule {
        applyToCard: ko.Observable<boolean>;
        layoutItemApplyTo: ko.Computed<string>;
        cardLayoutElement: DevExpress.Dashboard.Model.CardFormatRuleRowElement;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let layoutItemApplyTo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardLayoutElement: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardItemFormatRuleSerializationsInfoBase: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let deltaValueType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardId: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardItemDeltaFormatRuleSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DeltaValueType = DevExpress.Dashboard.Model.DeltaValueType;
    import CardItemFormatRuleBase = DevExpress.Dashboard.Model.CardItemFormatRuleBase;
    export class CardItemDeltaFormatRule extends CardItemFormatRuleBase {
        deltaValueType: ko.Observable<DevExpress.Dashboard.Model.DeltaValueType>;
        cardId: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cardItemformatRuleDataItem: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardItemFormatRuleSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import CardItemFormatRuleBase = DevExpress.Dashboard.Model.CardItemFormatRuleBase;
    export class CardItemFormatRule extends CardItemFormatRuleBase {
        dataItemName: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    export abstract class ChartItemFormatRuleBase extends DashboardItemFormatRule {
        showInLegend: ko.Observable<boolean>;
        displayName: ko.Observable<string>;
        dataItemName: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let showInLegend: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let displayName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataItemName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartItemFormatRuleSerializationsInfoBase: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dataItemApplyToName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let applyToChartElement: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartItemFormatRuleSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import FormatRuleChartElement = DevExpress.Dashboard.Model.FormatRuleChartElement;
    import ChartItemFormatRuleBase = DevExpress.Dashboard.Model.ChartItemFormatRuleBase;
    export class ChartItemFormatRule extends ChartItemFormatRuleBase {
        dataItemApplyToName: ko.Observable<string>;
        applyToChartElement: ko.Observable<DevExpress.Dashboard.Model.FormatRuleChartElement>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getDefaultItemType(): string;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let applyToRow: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatRuleDataItem: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataItemApplyTo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cellsItemFormatRuleSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    export abstract class CellsItemFormatRule extends DashboardItemFormatRule {
        applyToRow: ko.Observable<boolean>;
        dataItemName: ko.Observable<string>;
        dataItemApplyToName: ko.Computed<string>;
        private _dataItemApplyToName;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let gridItemFormatRuleSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import CellsItemFormatRule = DevExpress.Dashboard.Model.CellsItemFormatRule;
    export class GridItemFormatRule extends CellsItemFormatRule {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let pivotLevelColumn: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pivotLevelRow: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pivotItemFormatRuleLevelSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class PivotItemFormatRuleLevel extends SerializableModel {
        column: ko.Observable<string>;
        row: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let applyToColumn: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let intersectionLevelModeValues: {
        Auto: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        FirstLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        LastLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        AllLevels: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        SpecificLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
    };
    export let restrictedIntersectionLevelModeValues: {
        Auto: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        FirstLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        LastLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        AllLevels: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
        SpecificLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardWebStringId.FilterElementCheckedComboBoxSelected" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleRangeSetRanges2" | "DashboardStringId.CommandFormatRuleRangeSetRanges3" | "DashboardStringId.CommandFormatRuleRangeSetRanges4" | "DashboardStringId.CommandFormatRuleRangeSetRanges5" | "DashboardStringId.CommandFormatRuleRangeSet2ColorGradientRanges" | "DashboardStringId.CommandFormatRuleRangeSet3ColorGradientRanges" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardWebStringId.Grid.ShowFilterRow" | "DashboardWebStringId.Grid.UpdateTotals" | "DashboardWebStringId.Grid.GridColumnFilter" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.GaugeScaleLabelFormatCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultFederationDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultMongoDBDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardStringId.FormatRuleApplyToChartElement" | "DashboardStringId.ChartElementPointCaption" | "DashboardStringId.ChartElementLineOrAreaCaption" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.FormatRuleApplyToDimensionElement" | "DashboardWebStringId.FormatRuleApplyToTextElement" | "DashboardStringId.FormatRuleDisplayInLegend" | "DashboardStringId.FormatRuleDisplayName" | "DashboardStringId.LegendItemFormatString" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataSource" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.ManageQueries" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.RenameDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardWebStringId.DataSources.Rename" | "DashboardWebStringId.DataSources.NewDataSourceName" | "DashboardWebStringId.DataSources.DataSourceNameExistsMessage" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Filters" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.Chart.Indicator.DashStyle" | "DashboardWebStringId.Chart.Indicator.DashStyle.Empty" | "DashboardWebStringId.Chart.Indicator.DashStyle.Solid" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dash" | "DashboardWebStringId.Chart.Indicator.DashStyle.Dot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDot" | "DashboardWebStringId.Chart.Indicator.DashStyle.DashDotDot" | "DashboardWebStringId.Chart.Indicator.Type" | "DashboardWebStringId.Chart.Indicator.Type.Regression" | "DashboardWebStringId.Chart.Indicator.Type.Trend" | "DashboardWebStringId.Chart.Indicator.LegendText" | "DashboardWebStringId.Chart.Indicator.ShowInLegend" | "DashboardWebStringId.Chart.Indicator.Thickness" | "DashboardWebStringId.Chart.Indicator.ValueLevel" | "DashboardWebStringId.Chart.Indicator.ValueLevel.Value" | "DashboardWebStringId.Chart.Indicator.Visible" | "DashboardWebStringId.Chart.Indicator.Color" | "DashboardWebStringId.Chart.Indicator.Value" | "DashboardWebStringId.Chart.Indicators" | "DashboardWebStringId.Chart.IndicatorSettings" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Map.ShowWeightedLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dialog.Warning" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardStringId.FormatRulePredefinedColor" | "DashboardStringId.FormatRuleCustomColor" | "DashboardWebStringId.FormatConditionPredefinedAppearanceCaption" | "DashboardWebStringId.FormatConditionCustomAppearanceCaption" | "DashboardWebStringId.FormatConditionRangeSetNoStyleCaption" | "DashboardWebStringId.EditorAutomaticValue" | "DashboardWebStringId.ConditionalFormatting.Save" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.CustomStyleSettings" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNone" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEmpty" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringYesterday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringToday" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringTomorrow" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLastWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringNextWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringEarlier" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringPriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringLaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringMonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyond" | "DashboardWebStringId.ConditionalFormatting.DatesOccurringBeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.ConditionalFormatting.InvalidApplyToValue" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.UnsupportedCalculatedField" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.DashboardItemMenu.Bindings.ChangedDataSourceMessage" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.AttemptToLoadAvailableFontFamilies" | "DashboardWebStringId.Notification.AttemptToPerformExport" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.Notification.QueryDoesNotExist" | "DashboardWebStringId.Notification.UnderlyingRequestDataNotLoaded" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardWebStringId.SearchFontFamilies" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.DefaultNameChartIndicator" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionRunningCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowCustomAggregate" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.NumberRangeValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardStringId.DataInspectorButtonClose" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString" | "DashboardWebStringId.AccordionTab.ItemFilter" | "DashboardWebStringId.AccordionTab.VisibleDataFilter" | "DashboardStringId.LayoutDimensionModeAuto" | "DashboardStringId.LayoutDimensionModeFixed" | "DashboardWebStringId.DesignerToolbar.Width" | "DashboardWebStringId.DesignerToolbar.Height" | "DashboardWebStringId.DesignerToolbar.Pixels" | "DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError" | "DataAccessStringId.Wizard_NoDataSourcesForDataFederationMessage";
    };
    export let intersectionLevelMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pivotLevel: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pivotItemFormatRuleSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import FormatConditionIntersectionLevelMode = DevExpress.Dashboard.Model.FormatConditionIntersectionLevelMode;
    import CellsItemFormatRule = DevExpress.Dashboard.Model.CellsItemFormatRule;
    import PivotItemFormatRuleLevel = DevExpress.Dashboard.Model.PivotItemFormatRuleLevel;
    export class PivotItemFormatRule extends CellsItemFormatRule {
        applyToColumn: ko.Observable<boolean>;
        intersectionLevelMode: ko.Observable<DevExpress.Dashboard.Model.FormatConditionIntersectionLevelMode>;
        level: DevExpress.Dashboard.Model.PivotItemFormatRuleLevel;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ChartItemFormatRuleBase = DevExpress.Dashboard.Model.ChartItemFormatRuleBase;
    export class ScatterChartItemFormatRule extends ChartItemFormatRuleBase {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getDefaultItemType(): string;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import PivotState = DevExpress.Dashboard.Internal.Viewer.PivotState;
    export interface IExpandingState {
        rows: Array<Array<any>>;
        columns: Array<Array<any>>;
    }
    export interface IExpandingParams {
        values: Array<any>;
        isColumn: boolean;
    }
    export class ExpandingManager {
        private _expandingParams;
        private _expandingState;
        private _dxPivotState;
        getPivotExpandViewState(): any;
        setExpandingParams(expandingParams: IExpandingParams): any;
        onViewStateChanged(expandingState: IExpandingState, dxPivotState: DevExpress.Dashboard.Internal.Viewer.PivotState): void;
        canProvideExpandingState(): IExpandingState | IExpandingParams;
        calculateExpandingState(): any;
        resetExpandingParams(): void;
        resetColumnViewState(autoExpand: boolean): void;
        resetRowViewState(autoExpand: boolean): void;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    export class ObsoleteDashboardState {
        parameters: {
            [id: string]: any;
        };
        items: {
            [id: string]: DevExpress.Dashboard.Model.ItemState;
        };
    }
    export class ObsoleteItemState {
        static unwrapDilldownValues(values: any[][][]): any[];
        DrillLevels: Array<Array<Array<any>>>;
        Selection: Array<Array<any>>;
        ClientState: any;
        SelectedElementIndex: number;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let showCaption: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showCaptionDefaultFalse: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let parentContainer: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dataSource: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let filterString: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let visibleDataFilterString: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let isMasterFilterCrossDataSource: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let itemColorScheme: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataItemsSerializable: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let hiddenDimensions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let hiddenMeasures: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let formatRules: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let useGlobalColors: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let measuresColoringMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dashboardItemColoringOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ColoringMode = DevExpress.Dashboard.Model.ColoringMode;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class DashboardItemColoringOptions extends SerializableModel {
        useGlobalColors: ko.Observable<boolean>;
        measuresColoringMode: ko.Observable<DevExpress.Dashboard.Model.ColoringMode>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    export interface LimitDataViewModel {
        isReduceMode: boolean;
        isReduced: boolean;
    }
    export class LimitDataState {
        _visible: boolean;
        _enabled: boolean;
        get enabled(): boolean;
        setReduced(): void;
        getViewModel(): LimitDataViewModel;
        toggle(): void;
        reset(): void;
    }
}
declare module DevExpress.Dashboard.Model {
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import itemDataManager = DevExpress.Dashboard.Internal.Data.itemDataManager;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import itemDataTuple = DevExpress.Dashboard.Internal.Data.itemDataTuple;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ClearMasterFilterButtonState = DevExpress.Dashboard.Internal.Data.ClearMasterFilterButtonState;
    import GridClientState = DevExpress.Dashboard.Internal.Viewer.GridClientState;
    import PivotState = DevExpress.Dashboard.Internal.Viewer.PivotState;
    import MapClientState = DevExpress.Dashboard.Internal.Viewer.MapClientState;
    import ColorSchemeDefinition = DevExpress.Dashboard.Model.ColorSchemeDefinition;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import AcceptableShapingType = DevExpress.Dashboard.Model.AcceptableShapingType;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import IFormattableValue = DevExpress.Dashboard.Internal.Model.IFormattableValue;
    import IDataSourceConsumer = DevExpress.Dashboard.Model.IDataSourceConsumer;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import ExpandingManager = DevExpress.Dashboard.Internal.Model.ExpandingManager;
    import IExpandingParams = DevExpress.Dashboard.Internal.Model.IExpandingParams;
    import IExpandingState = DevExpress.Dashboard.Internal.Model.IExpandingState;
    import IColorSignaturesProvider = DevExpress.Dashboard.Internal.Model.IColorSignaturesProvider;
    import IExternalFilter = DevExpress.Dashboard.Internal.Model.IExternalFilter;
    import IMasterFilterItemsProvider = DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import UiStateType = DevExpress.Dashboard.Model.UiStateType;
    import DashboardItemColoringOptions = DevExpress.Dashboard.Model.DashboardItemColoringOptions;
    import IBindingModelProvider = DevExpress.Dashboard.Internal.Model.IBindingModelProvider;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import LimitDataState = DevExpress.Dashboard.Internal.Model.LimitDataState;
    export type MasterFilterValues = Array<Array<DevExpress.Dashboard.Data.PrimitiveType>> | Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
    export abstract class DataDashboardItem extends DashboardItem implements IDataItemProvider, IMasterFilterItemsProvider, IColorSignaturesProvider, IDataSourceConsumer {
        private static _itemTypesMap;
        private static _formatRuleTypesMap;
        private static _createDataItem;
        private static _updateDataItemByField;
        protected static _addColoringMeta: (links: Array<DevExpress.Dashboard.Model.DataItemLink>) => void;
        static _createFormatRule(item: DataDashboardItem, formatRuleJSON: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer): DevExpress.Dashboard.Model.DashboardItemFormatRule;
        static _getAvaliableSummaryTypeInfo(dataField: DevExpress.Dashboard.Internal.Model.IDataField, acceptableShapingType: DevExpress.Dashboard.Model.AcceptableShapingType, dataItem: DevExpress.Dashboard.Model.DataItem): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
        dataSource: ko.Observable<string>;
        dataMember: ko.Observable<string>;
        dataItems: ko.ObservableArray<DevExpress.Dashboard.Model.DataItem>;
        filterString: ko.Observable<string>;
        visibleDataFilterString: ko.Observable<string>;
        private __hiddenDimensions;
        hiddenDimensions: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        private __hiddenMeasures;
        hiddenMeasures: ko.ObservableArray<DevExpress.Dashboard.Model.Measure>;
        colorScheme: ko.ObservableArray<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        formatRules: ko.ObservableArray<DevExpress.Dashboard.Model.DashboardItemFormatRule>;
        isMasterFilterCrossDataSource: ko.Observable<boolean>;
        coloringOptions: DevExpress.Dashboard.Model.DashboardItemColoringOptions;
        _masterFilterMode: ko.Computed<string>;
        _isSingleMasterFilter: ko.Computed<boolean>;
        _isMultipleMasterFilter: ko.Computed<boolean>;
        _isDrillDownEnabled: ko.Computed<boolean>;
        _isIgnoreMasterFilter: ko.Computed<boolean>;
        _isMasterFilter: ko.Computed<boolean>;
        _isVisualInteractivitySupported: ko.Computed<boolean>;
        _clearMasterFilterSupported: ko.Computed<boolean>;
        _colorableItems: ko.Subscribable<DevExpress.Dashboard.Model.DashboardItem[]>;
        _fullRange: ko.Observable<any[]>;
        _selectedElementIndex: ko.Observable<number>;
        _beforeMasterFilterSetByUserInteraction: () => void;
        _afterMasterFilterSetByUserInteraction: () => void;
        _drillDownChangedByUserInteraction: () => void;
        _masterFilterItems: ko.Observable<DataDashboardItem[]>;
        _dataManager: ko.Observable<DevExpress.Dashboard.Internal.Data.itemDataManager>;
        _drillDownValues: ko.ObservableArray<DevExpress.Dashboard.Data.PrimitiveType>;
        _clientState: ko.Observable<DevExpress.Dashboard.Internal.Viewer.GridClientState | DevExpress.Dashboard.Internal.Viewer.MapClientState>;
        protected _dataRequestArgs: ko.Observable<any>;
        protected _expandingManager: DevExpress.Dashboard.Internal.Model.ExpandingManager;
        _selectionValues: ko.Observable<DevExpress.Dashboard.Data.PrimitiveType[][]>;
        protected _supportedUIStates: ko.Observable<Array<DevExpress.Dashboard.Model.UiStateType>>;
        private _componentNameGenerator;
        _outputFilter: ko.Computed<DevExpress.Dashboard.Internal.Model.IExternalFilter>;
        _limitDataState: DevExpress.Dashboard.Internal.Model.LimitDataState;
        get _actualSelectionValues(): DevExpress.Dashboard.Internal.Model.KnockoutEntry<Array<Array<any>>>;
        get _canColorByMeasures(): boolean;
        get _canColorByDimensions(): boolean;
        get _isLocallyColored(): boolean;
        get _isGloballyColored(): boolean;
        get _interactivityDimensions(): Array<DevExpress.Dashboard.Model.Dimension>;
        get _dimensions(): Array<DevExpress.Dashboard.Model.Dimension>;
        get _measures(): Array<DevExpress.Dashboard.Model.Measure>;
        get _uniqueDataItems(): Array<DevExpress.Dashboard.Model.DataItem>;
        _isExcludingAllFilter: ko.Computed<boolean>;
        protected get _multiData(): DevExpress.Dashboard.Internal.Data.itemData;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer, info?: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray);
        private _removeFromFilters;
        _clearBindings(): void;
        _clearInteractivityState(): void;
        _isCalculationSupported(): boolean;
        _isSortingEnabled(): boolean;
        _isTopNEnabled(dataItem: DevExpress.Dashboard.Model.Dimension): boolean;
        _isColoringEnabled(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
        _getDataItem(uniqueName: any): DevExpress.Dashboard.Model.DataItem;
        _getFinalDataType(dataItemId: string): DevExpress.Dashboard.Model.DataFieldType;
        _createDataItem(dataField: DevExpress.Dashboard.Internal.Model.IDataField, binding: DevExpress.Dashboard.Model.IBindingProperty): DevExpress.Dashboard.Model.DataItem;
        _updateDataItem(dataItem: DevExpress.Dashboard.Model.DataItem, binding: DevExpress.Dashboard.Model.IBindingProperty, dataField: DevExpress.Dashboard.Internal.Model.IDataField, acceptableShapingType: DevExpress.Dashboard.Model.AcceptableShapingType): void;
        _removeDataItem(dataItem: DevExpress.Dashboard.Model.DataItem, skipGroups?: boolean): void;
        _attachDataItem(target: Object, propertyName: string, link?: DevExpress.Dashboard.Model.DataItemLink): void;
        protected _subscribeDataItemLinkArrays(...propertyInfos: Array<{
            propertyName: string;
            modelName?: string;
        }>): void;
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getClearMasterFilterSupported(): boolean;
        protected _getIsMasterFilter(): boolean;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        protected _getIsVisualInteractivitySupported(): boolean;
        protected _getCanColorByMeasures(): boolean;
        protected _getCanColorByDimensions(): boolean;
        protected _getAreMeasuresColoredByDefault(): boolean;
        protected _getIsDimensionColoredByDefault(dimension: DevExpress.Dashboard.Model.Dimension): boolean;
        protected _coloredDimensions(): DevExpress.Dashboard.Model.Dimension[];
        protected _coloredByMeasures(): boolean;
        private _getUseGlobalColors;
        protected _getValidatedSelection(selectionValues: Array<Array<any>>): Array<Array<any>>;
        _getClearMasterFilterState(): DevExpress.Dashboard.Internal.Data.ClearMasterFilterButtonState;
        protected _allowAllValue(): boolean;
        protected _validateSelectionByData(selection: Array<Array<any>>): void;
        protected _updateContentData(content: any): void;
        protected _extendContentState(content: any): void;
        private _updateDataManager;
        protected _updateDataManagerByPartialDataSource(content: any, itemDataDTO: any): void;
        protected _getAllSelectionValues(activeDimensions: Array<string>): any;
        protected _getPointsByDimension(dimensionId: string, axisName: DevExpress.Dashboard.Data.ItemDataAxisName): DevExpress.Dashboard.Data.ItemDataAxisPoint[];
        _getColorizableDataItemsInfo(): Array<{
            items: Array<DevExpress.Dashboard.Model.DataItemLink>;
            prefixId: string;
        }>;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
        _getExportingSelection(): DevExpress.Dashboard.Data.PrimitiveType[][];
        _getDisplayFilterValues(limitCount?: number): Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        protected _createFormattableValue(dimension: DevExpress.Dashboard.Model.Dimension, value: any): DevExpress.Dashboard.Internal.Model.IFormattableValue;
        _getDisplayFilterValuesExternal(): Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        _getDisplayDrillDownValues(): Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        _getColoringSignature(): DevExpress.Dashboard.Model.ColorSchemeDefinition;
        _getColoringSignatureOnCurrentDrillDownLevel(): DevExpress.Dashboard.Model.ColorSchemeDefinition;
        _getColoringSignatureBase(coloredDimension: DevExpress.Dashboard.Model.Dimension[]): DevExpress.Dashboard.Model.ColorSchemeDefinition;
        _isAttribute(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
        _getItemDataAxis(): DevExpress.Dashboard.Data.ItemDataAxisName;
        _getDataItemContainerDisplayName(dataItemContainer: DevExpress.Dashboard.Internal.Model.IBindingModelProvider, dataItemDisplayNameGetter?: (d: DevExpress.Dashboard.Model.DataItem) => string): string;
        protected _getDataItemDisplayName(dataItem: DevExpress.Dashboard.Model.DataItem): string;
        protected _getMeasureDisplayName(uniqueName: string): string;
        _getDimensionDisplayName(uniqueName: string): string;
        protected _getOlapDimensionDisplayText(uniqueValue: any, dimensionId: any): any;
        protected _cleanDataItemDependencies(): void;
        protected _setLinkCollectionAcceptableShapingType(links: Array<DevExpress.Dashboard.Model.DataItemLink>, type: DevExpress.Dashboard.Model.AcceptableShapingType): void;
        protected _updateDataQueryParams(params: any): void;
        private _stateSupported;
        private _isHiddenDimension;
        private _isHiddenMeasure;
        _setSelection(stateSelection: Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>): void;
        protected _hasSelection(): boolean;
        protected _performOutputFilterOptimization(filter: DevExpress.Dashboard.Internal.Model.IExternalFilter): DevExpress.Dashboard.Internal.Model.IExternalFilter;
        _setState(parameter: DevExpress.Dashboard.Model.ItemState): void;
        _setClientState(clientState: DevExpress.Dashboard.Internal.Viewer.MapClientState | DevExpress.Dashboard.Internal.Viewer.GridClientState): void;
        _setSelectionData(selection: Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>, forceSetSelection?: boolean): void;
        _processItemSelectionChange: (itemElement: any, mode: string, selection: any) => void;
        _processItemDrillUp: () => void;
        _processItemClearMasterFilter: (itemElement?: any) => void;
        _processItemSetPredefinedPeriod: (periodName: string) => void;
        _processContentElementSelection: (itemName: any, args: any) => void;
        _processDataRequest: () => void;
        _processItemClientStateUpdate: (itemName: any, clientState: DevExpress.Dashboard.Internal.Viewer.MapClientState | DevExpress.Dashboard.Internal.Viewer.GridClientState) => void;
        _processExpandingStateChanged: (expandingParams: DevExpress.Dashboard.Internal.Model.IExpandingState, dxPivotState: DevExpress.Dashboard.Internal.Viewer.PivotState) => void;
        _processItemExpandingChange: (expandingParams: DevExpress.Dashboard.Internal.Model.IExpandingParams) => void;
        _itemInteractivityByColumnAxis(): boolean;
        _getInteractivityAxisDimensionCount(): number;
        protected _removeSelectionFromState(state: DevExpress.Dashboard.Model.ItemState): DevExpress.Dashboard.Model.ItemState;
        protected _setSelectionToState(state: DevExpress.Dashboard.Model.ItemState, selection: Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>): DevExpress.Dashboard.Model.ItemState;
        protected _setPredefinedPeriodToState(itemState: DevExpress.Dashboard.Model.ItemState, periodName: string): DevExpress.Dashboard.Model.ItemState;
        private _unassignDataItem;
        private _removeDataItemCore;
        _getActiveDimensions(): Array<DevExpress.Dashboard.Model.Dimension>;
        _getDimensionIdsByItemName(): Array<string>;
        _getValues(tuples: any): any[];
        _getAvailableTuples(): DevExpress.Dashboard.Internal.Data.itemDataTuple[];
        _getCurrentAxisNameByItemName(): DevExpress.Dashboard.Data.ItemDataAxisName;
        _getSelectedValuesByItemName(): DevExpress.Dashboard.Data.PrimitiveType[][];
        _performSetMasterFilter(values: MasterFilterValues): void;
        _performClearMasterFilter(): void;
        _performDrillDown(values: DevExpress.Dashboard.Data.ItemDataAxisPointTuple | DevExpress.Dashboard.Data.PrimitiveType): void;
        _performDrillUp(): void;
        _getAvailableDrillDownValues(itemName: any): DevExpress.Dashboard.Internal.Data.itemDataTuple[];
        _getCurrentDrillDownValues(): DevExpress.Dashboard.Internal.Data.itemDataTuple;
        _getAvailableFilterValues(itemName: any): DevExpress.Dashboard.Internal.Data.itemDataTuple[];
        _getAvailableActions(): Array<string>;
        _getItemData(): DevExpress.Dashboard.Internal.Data.itemData;
        _getCurrentFilterValues(): DevExpress.Dashboard.Internal.Data.itemDataTuple[];
        _conditionFormattingExpressionEditorFilter(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import TextGroupInterval = DevExpress.Dashboard.Model.TextGroupInterval;
    export function getDimensionExpression(dataMember: string, gateTimeGroupInterval: DevExpress.Dashboard.Model.DateTimeGroupInterval, textGroupInterval: DevExpress.Dashboard.Model.TextGroupInterval, fieldType: DevExpress.Dashboard.Model.DataFieldType): string;
    export function getSummaryExpression(dataMember: string, summaryType: string): string;
}
declare module DevExpress.Dashboard.Internal {
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import SequenceAction = DevExpress.Dashboard.SequenceAction;
    import WorkingModeSwitchingOptions = DevExpress.Dashboard.WorkingModeSwitchingOptions;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    export function getDimensionsExpressions(dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataFieldProvider: DevExpress.Dashboard.Internal.IDataFieldsProvider): JQueryPromise<{
        [dimensionName: string]: string;
    }>;
    export class CancellationToken {
        static get None(): CancellationToken;
        private _source;
        get canceled(): boolean;
        constructor(source: JQuery.Deferred<any>);
    }
    export interface CancelableSequenceAction extends SequenceAction {
        cancelableAction: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions, cancellationToken: CancellationToken) => JQueryPromise<DevExpress.Dashboard.WorkingModeSwitchingOptions>;
    }
    export function toCancelableSequenceAction(action: DevExpress.Dashboard.SequenceAction): CancelableSequenceAction;
    export function combineOptions(previousOptions: DevExpress.Dashboard.WorkingModeSwitchingOptions, options: DevExpress.Dashboard.WorkingModeSwitchingOptions[]): DevExpress.Dashboard.WorkingModeSwitchingOptions;
    export const requestParamsValidator: {
        isValid(requestParams: any): boolean;
    };
}
declare module DevExpress.Dashboard.Internal.Model {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    export function getIconName(typeName: any, icon?: any): any;
    export function getItemIconName(item: DevExpress.Dashboard.Model.DashboardItem): any;
    export function getItemTitle(item: DevExpress.Dashboard.Model.DashboardItem): any;
    export function getItemJson(itemType: string): {
        "@ItemType": string;
        "@CustomItemType": string;
    };
}
declare module DevExpress.Dashboard.Internal.Model {
    import UndoEngine = DevExpress.Analytics.Utils.UndoEngine;
    export class UndoEngineContainer {
        static undoEngine: DevExpress.Analytics.Utils.UndoEngine;
    }
    export function wrapFuncWithUndoRedo<T extends (...a: any[]) => any>(func: T): T;
    export function callFuncWithUndoRedo(func: () => void): void;
    export function wrapWithUndoRedo(target: any, key: string, value: any): {
        value: any;
    };
}
declare module DevExpress.Dashboard.Metadata {
    import ISerializableModelConstructor = DevExpress.Analytics.Utils.ISerializableModelConstructor;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let ignoreMasterFiltersDefaultFalse: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let ignoreMasterFiltersDefaultTrue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let isMasterFilterDefaultFalse: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let isMasterFilterDefaultTrue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let masterFilterMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let isDrillDownEnabled: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let targetDimensions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let commonInteractivityOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export function getInteractivityOptionsPropertyInfo(type: DevExpress.Analytics.Utils.ISerializableModelConstructor): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import TargetDimensions = DevExpress.Dashboard.Model.TargetDimensions;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class FilterableDashboardItemInteractivityOptions extends SerializableModel {
        ignoreMasterFilters: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class DashboardItemGroupInteractivityOptions extends FilterableDashboardItemInteractivityOptions {
        isMasterFilter: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class DashboardItemBaseInteractivityOptions extends SerializableModel {
        ignoreMasterFilters: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class DashboardTabItemInteractivityOptions extends DashboardItemBaseInteractivityOptions {
        isMasterFilter: ko.Observable<boolean>;
        ignoreMasterFilters: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class DashboardItemMasterFilterInteractivityOptions extends DashboardItemBaseInteractivityOptions {
        masterFilterMode: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class DashboardItemDrillDownInteractivityOptions extends DashboardItemBaseInteractivityOptions {
        isDrillDownEnabled: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class DashboardItemInteractivityOptions extends DashboardItemMasterFilterInteractivityOptions {
        isDrillDownEnabled: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class ChartInteractivityOptions extends DashboardItemInteractivityOptions {
        targetDimensions: ko.Observable<DevExpress.Dashboard.Model.TargetDimensions>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export let _filterItemInteractivityOptionsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _groupItemInteractivityOptionsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _tabItemInteractivityOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _baseInteractivityOptionsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _dashboardItemInteractivityOptionsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _masterFilterInteractivityOptionsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _drillDownInteractivityOptionsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _chartItemInteractivityOptionsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let groupItemSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardItemGroupInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemGroupInteractivityOptions;
    export class GroupItem extends DashboardItem {
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemGroupInteractivityOptions;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let showItemAsTabPage: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let tabPageSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardItemGroupInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemGroupInteractivityOptions;
    export class DashboardTabPage extends DashboardItem {
        showItemAsTabPage: ko.Observable<boolean>;
        private _uniqueNamePrefix;
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemGroupInteractivityOptions;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        getUniqueNamePrefix(): string;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let tabPages: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let tabContainerItemSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    export class TabContainerItem extends DashboardItem {
        tabPages: ko.ObservableArray<DevExpress.Dashboard.Model.DashboardTabPage>;
        _activeTabPage: ko.Observable<DevExpress.Dashboard.Model.DashboardTabPage>;
        _activePageChanged: (prevPageName: string, pageName: string) => void;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _setState(itemState: DevExpress.Dashboard.Model.ItemState): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        _addNewPage(): DevExpress.Dashboard.Model.DashboardTabPage;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    export function createDashboardItem(dashboardItemJSON: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer): DevExpress.Dashboard.Model.DashboardItem;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export type DashboardItemJson = {
        "@ItemType": string;
    };
    export let dashboardItem: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let orientation: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layoutWeight: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layoutItemsSerializable: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layoutItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export class DashboardViewerConstants {
        static minPaneHeight: number;
        static minPaneWidth: number;
        static elementsCountAnimationThreshold: number;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export class HashsetWrapper {
        private FNV_prime_32;
        private FNV_offset_basis_32;
        private hashSet;
        constructor(array: any[]);
        contains(item: any): boolean;
        getIntersection(array: any[]): any[];
        indexOf(item: any): number;
        private getItem;
        private getHash;
        private toHash;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let filterDimensions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showAllValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let enableSearch: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let filterElementItemBaseSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IExternalFilter = DevExpress.Dashboard.Internal.Model.IExternalFilter;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import FilterableDashboardItemInteractivityOptions = DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
    export abstract class FilterElementItemBase extends DataDashboardItem {
        private __filterDimensions;
        filterDimensions: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        enableSearch: ko.Observable<boolean>;
        interactivityOptions: DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
        _unselectedValues: ko.Observable<any[][]>;
        _isExcludingAllFilter: ko.Computed<boolean>;
        get _supportParallelRequests(): boolean;
        private get _useCriteriaOptimization();
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _isCalculationSupported(): boolean;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        protected _getMasterFilterMode(): string;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getClearMasterFilterSupported(): boolean;
        protected _getIsMasterFilter(): boolean;
        protected _getIsVisualInteractivitySupported(): boolean;
        protected _isMultiselectable(): boolean;
        protected _updateContentViewModel(content: any): void;
        protected _performOutputFilterOptimization(filter: DevExpress.Dashboard.Internal.Model.IExternalFilter): DevExpress.Dashboard.Internal.Model.IExternalFilter;
        protected _validateSelectionByData(origSelection: Array<Array<any>>): void;
        _setSelectionData(selection: Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>, forceSetSelection?: boolean): void;
        private _correctSelectionValues;
        private _updateUnselectedValues;
        private _arrayContains;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import IEntireRange = DevExpress.Dashboard.Internal.Viewer.IEntireRange;
    import IRange = DevExpress.Dashboard.Internal.Viewer.IRange;
    export class RangeFilterSelectionValidator {
        static validate(range: DevExpress.Dashboard.Internal.Viewer.IRange, isYearGroupInterval: boolean, entireRange?: DevExpress.Dashboard.Internal.Viewer.IEntireRange): DevExpress.Dashboard.Internal.Viewer.IRange;
        static validateLimitsOrder(range: DevExpress.Dashboard.Internal.Viewer.IRange): DevExpress.Dashboard.Internal.Viewer.IRange;
        static isValidValue(value: any): boolean;
        static _validateValues(range: DevExpress.Dashboard.Internal.Viewer.IRange, entireRange: DevExpress.Dashboard.Internal.Viewer.IEntireRange): DevExpress.Dashboard.Internal.Viewer.IRange;
        static _validateOutOfRange(range: DevExpress.Dashboard.Internal.Viewer.IRange, entireRange: DevExpress.Dashboard.Internal.Viewer.IEntireRange): DevExpress.Dashboard.Internal.Viewer.IRange;
        static _prepareYearRangeBeforeSelection(range: DevExpress.Dashboard.Internal.Viewer.IRange, isYearGroupInterval: boolean): DevExpress.Dashboard.Internal.Viewer.IRange;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DayOfWeekNumber = DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
    import DateTimeInterval = DevExpress.Dashboard.Model.DateTimeInterval;
    export interface IRange {
        startValue: any;
        endValue: any;
    }
    export interface IEntireRange {
        minimum: any;
        maximum: any;
    }
    export interface IDateTimePeriod {
        Start: IDateTimePeriodLimit;
        End: IDateTimePeriodLimit;
    }
    export interface IDateTimePeriodLimit {
        Relative: boolean;
        Interval?: DevExpress.Dashboard.Model.DateTimeInterval;
        Offset?: number;
        Date?: Date;
    }
    export class DateTimePeriodConverter {
        static toRange(period: IDateTimePeriod, firstDayOfWeek: DevExpress.Dashboard.Internal.Data.DayOfWeekNumber): IRange;
        static _getDateTime(limit: IDateTimePeriodLimit, now: Date, firstDayOfWeek: DevExpress.Dashboard.Internal.Data.DayOfWeekNumber): Date;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let rangeFilterDefinitionMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeFilterWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import RangeFilterWindowDefinitionMode = DevExpress.Dashboard.Model.RangeFilterWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class RangeFilterWindowDefinition extends MeasureCalculationWindowDefinition {
        definitionMode: ko.Observable<DevExpress.Dashboard.Model.RangeFilterWindowDefinitionMode>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let showPointLabels: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pointLabelOrientation: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let overlappingMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pointLabelOptionsBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let showForZeroValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let position: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let contentType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pointLabelOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import PointLabelContentType = DevExpress.Dashboard.Model.PointLabelContentType;
    import PointLabelOrientation = DevExpress.Dashboard.Model.PointLabelOrientation;
    import PointLabelOverlappingMode = DevExpress.Dashboard.Model.PointLabelOverlappingMode;
    import PointLabelPosition = DevExpress.Dashboard.Model.PointLabelPosition;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class PointLabelOptionsBase extends SerializableModel {
        showPointLabels: ko.Observable<boolean>;
        orientation: ko.Observable<DevExpress.Dashboard.Model.PointLabelOrientation>;
        overlappingMode: ko.Observable<DevExpress.Dashboard.Model.PointLabelOverlappingMode>;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        grabFrom(options: PointLabelOptionsBase): void;
    }
    export class PointLabelOptions extends PointLabelOptionsBase {
        showForZeroValues: ko.Observable<boolean>;
        position: ko.Observable<DevExpress.Dashboard.Model.PointLabelPosition>;
        contentType: ko.Observable<DevExpress.Dashboard.Model.PointLabelContentType>;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        grabFrom(options: PointLabelOptions): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let plotOnSecondaryAxis: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let ignoreEmptyPoints: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showPointMarkers: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartSeriesPointLabelOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartSeriesSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let chartSeriesType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let simpleSeriesType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeSeriesType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let openHighLowCloseSeriesType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartSeriesValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let value1: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let value2: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartSeriesWeight: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let open: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let high: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let low: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let close: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let simpleSeriesSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let rangeSeriesSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let weightedSeriesSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let highLowCloseSeriesSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let openHighLowCloseSeriesSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import OpenHighLowCloseSeriesType = DevExpress.Dashboard.Model.OpenHighLowCloseSeriesType;
    import RangeSeriesType = DevExpress.Dashboard.Model.RangeSeriesType;
    import SimpleSeriesType = DevExpress.Dashboard.Model.SimpleSeriesType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    import PointLabelOptions = DevExpress.Dashboard.Model.PointLabelOptions;
    export abstract class ChartSeries extends DataItemContainer {
        plotOnSecondaryAxis: ko.Observable<boolean>;
        ignoreEmptyPoints: ko.Observable<boolean>;
        showPointMarkers: ko.Observable<boolean>;
        pointLabelOptions: DevExpress.Dashboard.Model.PointLabelOptions;
        constructor(seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        grabFrom(series: ChartSeries): void;
        abstract get _measures(): Array<DevExpress.Dashboard.Model.Measure>;
        _getDataId(): string;
        abstract _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        abstract get _isConditionalFormattingSupported(): boolean;
    }
    export class SimpleSeries extends ChartSeries {
        private __value;
        value: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        seriesType: ko.Observable<DevExpress.Dashboard.Model.SimpleSeriesType>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        _getContainerType(): DevExpress.Dashboard.Model.SimpleSeriesType;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        protected _getDefaultItemType(): string;
        get _measures(): DevExpress.Dashboard.Model.Measure[];
        get _isConditionalFormattingSupported(): boolean;
    }
    export class RangeSeries extends ChartSeries {
        private __value1;
        private __value2;
        value1: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        value2: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        seriesType: ko.Observable<DevExpress.Dashboard.Model.RangeSeriesType>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        _getContainerType(): DevExpress.Dashboard.Model.RangeSeriesType;
        get _measures(): DevExpress.Dashboard.Model.Measure[];
        get _isConditionalFormattingSupported(): boolean;
    }
    export class WeightedSeries extends ChartSeries {
        private __weight;
        private __value;
        weight: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        value: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        get _measures(): DevExpress.Dashboard.Model.Measure[];
        get _isConditionalFormattingSupported(): boolean;
    }
    export class HighLowCloseSeries extends ChartSeries {
        private __high;
        private __low;
        private __close;
        high: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        low: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        close: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        get _measures(): DevExpress.Dashboard.Model.Measure[];
        get _isConditionalFormattingSupported(): boolean;
    }
    export class OpenHighLowCloseSeries extends HighLowCloseSeries {
        private __open;
        open: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        seriesType: ko.Observable<DevExpress.Dashboard.Model.OpenHighLowCloseSeriesType>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        _getContainerType(): DevExpress.Dashboard.Model.OpenHighLowCloseSeriesType;
        get _measures(): DevExpress.Dashboard.Model.Measure[];
        get _isConditionalFormattingSupported(): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import OpenHighLowCloseSeriesType = DevExpress.Dashboard.Model.OpenHighLowCloseSeriesType;
    import RangeSeriesType = DevExpress.Dashboard.Model.RangeSeriesType;
    import SimpleSeriesType = DevExpress.Dashboard.Model.SimpleSeriesType;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import HighLowCloseSeries = DevExpress.Dashboard.Model.HighLowCloseSeries;
    import OpenHighLowCloseSeries = DevExpress.Dashboard.Model.OpenHighLowCloseSeries;
    import RangeSeries = DevExpress.Dashboard.Model.RangeSeries;
    import SimpleSeries = DevExpress.Dashboard.Model.SimpleSeries;
    import WeightedSeries = DevExpress.Dashboard.Model.WeightedSeries;
    export class ChartSeriesCreator {
        static chartSeriesTypesMap: {
            Simple: typeof DevExpress.Dashboard.Model.SimpleSeries;
            Range: typeof DevExpress.Dashboard.Model.RangeSeries;
            Weighted: typeof DevExpress.Dashboard.Model.WeightedSeries;
            OpenHighLowClose: typeof DevExpress.Dashboard.Model.OpenHighLowCloseSeries;
            HighLowClose: typeof DevExpress.Dashboard.Model.HighLowCloseSeries;
        };
        static chartSeriesViewTypesMap: {
            Point: any;
            Bar: any;
            StackedBar: any;
            FullStackedBar: any;
            Line: any;
            StackedLine: any;
            FullStackedLine: any;
            StepLine: any;
            Spline: any;
            Area: any;
            StackedArea: any;
            FullStackedArea: any;
            StepArea: any;
            SplineArea: any;
            StackedSplineArea: any;
            FullStackedSplineArea: any;
        };
        static chartSeriesGroupLocalization: {
            Area: string;
            Bar: string;
            Bubble: string;
            Financial: string;
            "Point / Line": string;
            Range: string;
        };
        static getSeriesCreator(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem): (seriesViewType: DevExpress.Dashboard.Model.SimpleSeriesType | DevExpress.Dashboard.Model.RangeSeriesType | DevExpress.Dashboard.Model.OpenHighLowCloseSeriesType) => DevExpress.Dashboard.Model.ChartSeries;
        static createSeries(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, seriesJSON: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer): DevExpress.Dashboard.Model.ChartSeries;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let seriesDimensions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let seriesDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    export abstract class SeriesItem extends DataDashboardItem {
        protected __seriesDimensions: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        seriesDimensions: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _clearBindings(): void;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
    }
}
declare module DevExpress.Dashboard.Metadata {
    import FixedDateTimePeriodLimit = DevExpress.Dashboard.Model.FixedDateTimePeriodLimit;
    import FlowDateTimePeriodLimit = DevExpress.Dashboard.Model.FlowDateTimePeriodLimit;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DateTimeInterval = DevExpress.Dashboard.Model.DateTimeInterval;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ITypedDashboardSerializationInfo = DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo;
    export let flowIntervalOrderedValues: Array<DevExpress.Dashboard.Model.DateTimeInterval>;
    export let flowIntervalValues: {
        [key in DevExpress.Dashboard.Model.DateTimeInterval]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export function convertDateTimeGroupInterval(groupInterval: DevExpress.Dashboard.Model.DateTimeGroupInterval): DevExpress.Dashboard.Model.DateTimeInterval;
    export let interval: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let offset: DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo<FlowDateTimePeriodLimit>;
    export let flowDateTimePeriodLimitSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let date: DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo<FixedDateTimePeriodLimit>;
    export let fixedDateTimePeriodLimitSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import IDisplayedValue = DevExpress.Analytics.Utils.IDisplayedValue;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DateTimeInterval = DevExpress.Dashboard.Model.DateTimeInterval;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class FixedDateTimePeriodLimit extends SerializableModel {
        date: ko.Observable<Date>;
        isEmpty: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getDateTimeValue(): Date;
    }
    export class FlowDateTimePeriodLimit extends SerializableModel {
        interval: ko.Observable<DevExpress.Dashboard.Model.DateTimeInterval>;
        offset: ko.Observable<number>;
        isEmpty: ko.Observable<boolean>;
        argumentInterval: ko.Observable<DevExpress.Dashboard.Model.DateTimeGroupInterval>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _getAvailableIntervals(): DevExpress.Analytics.Utils.IDisplayedValue[];
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ITypedDashboardSerializationInfo = DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo;
    import LimitContainer = DevExpress.Dashboard.Model.LimitContainer;
    export let fixedDateTimePeriodLimitProperty: DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo<LimitContainer>;
    export let flowDateTimePeriodLimitProperty: DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo<LimitContainer>;
    export let limitContainer: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DateTimeInterval = DevExpress.Dashboard.Model.DateTimeInterval;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import FixedDateTimePeriodLimit = DevExpress.Dashboard.Model.FixedDateTimePeriodLimit;
    import FlowDateTimePeriodLimit = DevExpress.Dashboard.Model.FlowDateTimePeriodLimit;
    export class LimitContainer extends SerializableModel {
        fixed: DevExpress.Dashboard.Model.FixedDateTimePeriodLimit;
        flow: DevExpress.Dashboard.Model.FlowDateTimePeriodLimit;
        mode: ko.Observable<"None" | "Fixed" | "Flow">;
        argumentInterval: ko.Observable<DevExpress.Dashboard.Model.DateTimeGroupInterval>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        isEmpty(): boolean;
        getInterval(): DevExpress.Dashboard.Model.DateTimeInterval;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ITypedDashboardSerializationInfo = DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import LimitContainer = DevExpress.Dashboard.Model.LimitContainer;
    export let startLimit: DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo<DateTimePeriod>;
    export let endLimit: DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo<DateTimePeriod>;
    export let dateTimePeriodSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let mode: DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo<LimitContainer>;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DateTimeFormatInfoType = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfoType;
    import DayOfWeekNumber = DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
    import IRange = DevExpress.Dashboard.Internal.Viewer.IRange;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import LimitContainer = DevExpress.Dashboard.Model.LimitContainer;
    export class DateTimePeriod extends TypedSerializableModel {
        start: DevExpress.Dashboard.Model.LimitContainer;
        end: DevExpress.Dashboard.Model.LimitContainer;
        name: ko.Observable<string>;
        argumentInterval: ko.Observable<DevExpress.Dashboard.Model.DateTimeGroupInterval>;
        _firstDayOfWeek: ko.Observable<DevExpress.Dashboard.Internal.Data.DayOfWeekNumber>;
        _getPeriodTextValue: ko.PureComputed<any>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
        getDateTimeValue(): DevExpress.Dashboard.Internal.Viewer.IRange;
        getDateFormat(): DevExpress.Dashboard.Internal.Data.DateTimeFormatInfoType;
        format(value: Date): string;
        _subscribeToGroupInterval(dimension: DevExpress.Dashboard.Model.Dimension): DevExpress.Dashboard.Model.DisposableType;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let coloringOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let defaultDateTimePeriodName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateTimePeriods: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeSeries: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let argument: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rangeFilterDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Internal.Model {
    import itemDataManager = DevExpress.Dashboard.Internal.Data.itemDataManager;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    export const _subscribeToDimension: (dimension: ko.Observable<DevExpress.Dashboard.Model.Dimension>, dateTimePeriods: ko.ObservableArray<DevExpress.Dashboard.Model.DateTimePeriod>, dataManager: ko.Observable<DevExpress.Dashboard.Internal.Data.itemDataManager>) => void;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let filterType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let arrangementMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let datePickerLocation: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let displayTextPattern: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateFilterDimension: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dateFilterDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import DateFilterArrangementMode = DevExpress.Dashboard.Model.DateFilterArrangementMode;
    import DateFilterType = DevExpress.Dashboard.Model.DateFilterType;
    import DatePickerLocation = DevExpress.Dashboard.Model.DatePickerLocation;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import FilterableDashboardItemInteractivityOptions = DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import RangeStateController = DevExpress.Dashboard.Internal.Model.RangeStateController;
    export class DateFilterItem extends DataDashboardItem {
        private __dimension;
        dimension: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        filterType: ko.Observable<DevExpress.Dashboard.Model.DateFilterType>;
        arrangementMode: ko.Observable<DevExpress.Dashboard.Model.DateFilterArrangementMode>;
        datePickerLocation: ko.Observable<DevExpress.Dashboard.Model.DatePickerLocation>;
        defaultDateTimePeriodName: ko.Observable<string>;
        displayTextPattern: ko.Observable<string>;
        dateTimePeriods: ko.ObservableArray<DevExpress.Dashboard.Model.DateTimePeriod>;
        _defaultDateTimePeriodIndexSubscription: ko.Subscription;
        currentSelectedDateTimePeriodName: ko.Observable<string>;
        _stateController: DevExpress.Dashboard.Internal.Model.RangeStateController;
        interactivityOptions: DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _getSelectionByPeriod(period: DevExpress.Dashboard.Model.DateTimePeriod): any[][];
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _getClearMasterFilterSupported(): boolean;
        protected _getIsMasterFilter(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getIsVisualInteractivitySupported(): boolean;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        _getDisplayFilterValues(limitCount?: number): Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        protected _updateContentViewModel(content: any): void;
        _setState(itemState: DevExpress.Dashboard.Model.ItemState): void;
        protected _removeSelectionFromState(state: DevExpress.Dashboard.Model.ItemState): DevExpress.Dashboard.Model.ItemState;
        protected _setPredefinedPeriodToState(state: DevExpress.Dashboard.Model.ItemState, periodName: string): DevExpress.Dashboard.Model.ItemState;
        protected _setSelectionToState(state: DevExpress.Dashboard.Model.ItemState, selection: Array<Array<number | Date>>): DevExpress.Dashboard.Model.ItemState;
        protected _getValidatedSelection(selectionValues: Array<Array<any>>): Array<Array<any>>;
        protected _extendContentState(content: any): void;
        protected _hasSelection(): boolean;
        _isSortingEnabled(): boolean;
        _isTopNEnabled(dataItem: DevExpress.Dashboard.Model.Dimension): boolean;
        _getEntireRange(): Array<any>;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    export class RangeStateController {
        item: DevExpress.Dashboard.Model.DateFilterItem | DevExpress.Dashboard.Model.RangeFilterItem;
        get defaultDateTimePeriodName(): ko.Observable<string>;
        get currentSelectedDateTimePeriodName(): ko.Observable<string>;
        get dateTimePeriods(): ko.ObservableArray<DevExpress.Dashboard.Model.DateTimePeriod>;
        get _selectionValues(): ko.Observable<DevExpress.Dashboard.Data.PrimitiveType[][]>;
        _getSelectionByPeriod(period: DevExpress.Dashboard.Model.DateTimePeriod): any[][];
        _setSelection(stateSelection: any): void;
        constructor(item: DevExpress.Dashboard.Model.DateFilterItem | DevExpress.Dashboard.Model.RangeFilterItem);
        initialize(): void;
        setState(itemState: DevExpress.Dashboard.Model.ItemState): void;
        removeSelectionFromState(state: DevExpress.Dashboard.Model.ItemState): any;
        setPredefinedPeriodToState(state: DevExpress.Dashboard.Model.ItemState, periodName: string): any;
        setSelectionToState(state: DevExpress.Dashboard.Model.ItemState, selection: Array<Array<number | Date>>): DevExpress.Dashboard.Model.ItemState;
        extendContentState(content: any): void;
        _getDisplayFilterValues(limitCount?: number): Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import FilterableDashboardItemInteractivityOptions = DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
    import SeriesItem = DevExpress.Dashboard.Model.SeriesItem;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import RangeStateController = DevExpress.Dashboard.Internal.Model.RangeStateController;
    export class RangeFilterItem extends SeriesItem {
        static rangeSeriesViewTypesMap: {
            Line: any;
            StackedLine: any;
            FullStackedLine: any;
            Area: any;
            StackedArea: any;
            FullStackedArea: any;
            Bar: any;
            StackedBar: any;
            FullStackedBar: any;
        };
        private __argument;
        argument: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        interactivityOptions: DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
        dateTimePeriods: ko.ObservableArray<DevExpress.Dashboard.Model.DateTimePeriod>;
        series: ko.ObservableArray<DevExpress.Dashboard.Model.ChartSeries>;
        defaultDateTimePeriodName: ko.Observable<string>;
        _defaultDateTimePeriodIndexSubscription: ko.Subscription;
        currentSelectedDateTimePeriodName: ko.Observable<string>;
        _stateController: DevExpress.Dashboard.Internal.Model.RangeStateController;
        get _supportParallelRequests(): boolean;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getClearMasterFilterSupported(): boolean;
        protected _getIsMasterFilter(): boolean;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        protected _getIsVisualInteractivitySupported(): boolean;
        protected _getCanColorByDimensions(): boolean;
        protected _getCanColorByMeasures(): boolean;
        protected _getAreMeasuresColoredByDefault(): boolean;
        protected _getIsDimensionColoredByDefault(dimension: DevExpress.Dashboard.Model.Dimension): boolean;
        _getColorizableDataItemsInfo(): Array<{
            items: Array<DevExpress.Dashboard.Model.DataItemLink>;
            prefixId: string;
        }>;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
        protected _hasSelection(): boolean;
        _getSelectionByPeriod(period: DevExpress.Dashboard.Model.DateTimePeriod): any[][];
        _getDisplayFilterValues(limitCount?: number): Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        _getEntireRange(): Array<any>;
        protected _validateSelectionByData(selection: Array<Array<any>>): void;
        protected _getValidatedSelection(selectionValues: Array<Array<any>>): Array<Array<any>>;
        _setState(itemState: DevExpress.Dashboard.Model.ItemState): void;
        protected _removeSelectionFromState(state: DevExpress.Dashboard.Model.ItemState): DevExpress.Dashboard.Model.ItemState;
        protected _setPredefinedPeriodToState(state: DevExpress.Dashboard.Model.ItemState, periodName: string): DevExpress.Dashboard.Model.ItemState;
        protected _setSelectionToState(state: DevExpress.Dashboard.Model.ItemState, selection: Array<Array<number | Date>>): DevExpress.Dashboard.Model.ItemState;
        protected _extendContentState(content: any): void;
        _isSortingEnabled(): boolean;
        _isTopNEnabled(dataItem: DevExpress.Dashboard.Model.Dimension): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    export function getCategoryContentName(category: DevExpress.Dashboard.Metadata.PropertyCategory): string;
    export class PaneContentHolder {
        private _content;
        private _lastChangeReason;
        get lastChangeReason(): DevExpress.Dashboard.Metadata.PropertyCategory;
        _getContentInfo(category: DevExpress.Dashboard.Metadata.PropertyCategory): {
            category: string;
            content: ko.Observable<any>;
            requestsInProgress: ko.Observable<number>;
            needAnotherRequest: boolean;
        };
        getContent(category: DevExpress.Dashboard.Metadata.PropertyCategory): any;
        valid: ko.Computed<boolean>;
        isValid(category: DevExpress.Dashboard.Metadata.PropertyCategory): boolean;
        isWaitingForContent(category?: DevExpress.Dashboard.Metadata.PropertyCategory): boolean;
        getCompatibleCategories(category: DevExpress.Dashboard.Metadata.PropertyCategory): any;
        needRequestContentFromServer(category: DevExpress.Dashboard.Metadata.PropertyCategory): boolean;
        itemChanged(category?: DevExpress.Dashboard.Metadata.PropertyCategory): void;
        beginRequest(category: DevExpress.Dashboard.Metadata.PropertyCategory): void;
        endRequest(args: {
            category?: DevExpress.Dashboard.Metadata.PropertyCategory;
            response?: any;
        }): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import Notification = DevExpress.Dashboard.Internal.Model.Notification;
    export class NotificationControllerViewModel {
        private _visible;
        private _widget;
        visible: ko.Observable<boolean>;
        type: ko.Observable<string>;
        notifications: ko.ObservableArray<DevExpress.Dashboard.Internal.Model.Notification>;
        suspended: ko.Observable<boolean>;
        displayTime: ko.Computed<number>;
        onHidden: () => void;
        onInitialized: (args: any) => void;
        reset(): void;
        updateNotification(type: string, title: string, detail?: any): void;
    }
}
declare module DevExpress.Dashboard {
    import ErrorInfo = DevExpress.Dashboard.ErrorInfo;
    import IErrorHandler = DevExpress.Dashboard.Internal.IErrorHandler;
    import NotificationControllerViewModel = DevExpress.Dashboard.Internal.NotificationControllerViewModel;
    export class NotificationController implements IErrorHandler {
        static _getErrorTextFromResponse(request: JQueryXHR): any;
        static _getDetailedErrorMessage(errorInfo: DevExpress.Dashboard.ErrorInfo): string;
        _viewModel: DevExpress.Dashboard.Internal.NotificationControllerViewModel;
        suspended(isSuspended: boolean): void;
        showState(message: string): void;
        showSuccess(message: string): void;
        showError(title: string, errorInfo?: DevExpress.Dashboard.ErrorInfo): void;
        reset(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    export class DashboardEvent<TArgs> {
        private handlers;
        add(handler: {
            (args?: TArgs): void;
        }): DevExpress.Dashboard.Model.IDisposable;
        remove(handler: {
            (args?: TArgs): void;
        }): void;
        fire(args?: TArgs): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import ISerializableModel = DevExpress.Analytics.Utils.ISerializableModel;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    export class ModelSubscriber implements IDisposable {
        private _model;
        private static dxSubscription;
        private static dxSubscriptionSuspend;
        static changePropertyQuietly(property: any, func: () => any): void;
        private handlers;
        constructor(_model: DevExpress.Analytics.Utils.ISerializableModel);
        private _unsubscribe;
        private _subscribe;
        _propertyChanged(category: DevExpress.Dashboard.Metadata.PropertyCategory, model: any, propertyName: string, status: PropertyChangedStatus): void;
        registerHandler(handler: (category: DevExpress.Dashboard.Metadata.PropertyCategory, model?: any, propertyName?: string, status?: PropertyChangedStatus) => void): void;
        private _isPropertySerializeModel;
        dispose(): void;
    }
    export type PropertyChangedStatus = "added" | "deleted" | "changed" | "unknown";
}
declare module DevExpress.Dashboard.Internal {
    import ISerializableModel = DevExpress.Analytics.Utils.ISerializableModel;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    import ModelSubscriber = DevExpress.Dashboard.Internal.ModelSubscriber;
    import PropertyChangedStatus = DevExpress.Dashboard.Internal.PropertyChangedStatus;
    export class ItemChangeSubscriber extends DisposableObject {
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
        constructor(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, itemChanged: (category: DevExpress.Dashboard.Metadata.PropertyCategory) => void);
    }
    export abstract class ComponentArraySubscriber extends DisposableObject {
        private _items;
        private _propertyUniqueName;
        private _subscribers;
        constructor(_items: ko.ObservableArray<DevExpress.Analytics.Utils.ISerializableModel>, _propertyUniqueName?: string);
        protected itemAdded(item: DevExpress.Analytics.Utils.ISerializableModel): void;
        protected itemDeleted(item: DevExpress.Analytics.Utils.ISerializableModel): void;
        protected abstract createSubscriber(item: DevExpress.Analytics.Utils.ISerializableModel): DevExpress.Dashboard.Model.IDisposable;
        protected _subscribe(item: DevExpress.Analytics.Utils.ISerializableModel): void;
        protected _unsubscribe(item: DevExpress.Analytics.Utils.ISerializableModel): void;
        dispose(): void;
    }
    export interface ISubscriberOptions {
        itemAdded?: (item: any) => void;
        itemDeleted?: (item: any) => void;
        itemChanged: (item: any, changeCategory: DevExpress.Dashboard.Metadata.PropertyCategory) => void;
    }
    export class ItemsChangeSubscriber extends ComponentArraySubscriber {
        private _options;
        constructor(items: ko.ObservableArray<DevExpress.Dashboard.Model.DashboardItem>, _options: ISubscriberOptions);
        protected itemAdded(item: any): void;
        protected itemDeleted(item: any): void;
        protected createSubscriber(item: DevExpress.Dashboard.Model.DashboardItem): ItemChangeSubscriber;
    }
    export class ColorSchemeSubscriber extends ComponentArraySubscriber {
        private _changed;
        constructor(entries: ko.ObservableArray<DevExpress.Dashboard.Model.ColorSchemeEntry>, _changed: () => void);
        protected createSubscriber(item: any): DevExpress.Dashboard.Internal.ModelSubscriber;
        protected itemAdded(item: any): void;
        protected itemDeleted(item: any): void;
    }
    export class DataSourcesSubscriber extends ComponentArraySubscriber {
        private _onDataSourceChanged;
        constructor(dataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>, _onDataSourceChanged: (args: DataSourceChangedEventArgs) => void);
        protected createSubscriber(dataSource: DevExpress.Analytics.Utils.ISerializableModel): DevExpress.Dashboard.Internal.ModelSubscriber;
        protected itemAdded(dataSource: DevExpress.Analytics.Utils.ISerializableModel): void;
        protected itemDeleted(dataSource: DevExpress.Analytics.Utils.ISerializableModel): void;
    }
    export interface DataSourceChangedEventArgs {
        dataSource: DevExpress.Dashboard.Model.DataSource;
        propertyName?: string;
        model?: any;
        status: DevExpress.Dashboard.Internal.PropertyChangedStatus;
        queryName?: string;
        fieldName?: string;
    }
    export interface DashboardItemChangedEventArgs {
        item: DevExpress.Dashboard.Model.DashboardItem;
        category: DevExpress.Dashboard.Metadata.PropertyCategory;
    }
}
declare module DevExpress.Dashboard.Internal {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    import DataRequestOptions = DevExpress.Dashboard.DataRequestOptions;
    import VisibleItemsProvider = DevExpress.Dashboard.Internal.VisibleItemsProvider;
    import DashboardEvent = DevExpress.Dashboard.Internal.DashboardEvent;
    import DashboardItemChangedEventArgs = DevExpress.Dashboard.Internal.DashboardItemChangedEventArgs;
    import DataSourceChangedEventArgs = DevExpress.Dashboard.Internal.DataSourceChangedEventArgs;
    interface UpdateHubCallbacks {
        getItemData: (item: DevExpress.Dashboard.Model.DashboardItem) => JQueryPromise<{}>;
        getBatchItemData: (items: DevExpress.Dashboard.Model.DashboardItem[]) => JQueryPromise<{}>;
        getMapShapeFile: (item: DevExpress.Dashboard.Model.DashboardItem) => JQueryPromise<{}>;
        clearDimensionValuesCache?: () => void;
    }
    export class DashboardUpdateHub extends DisposableObject {
        private _dashboard;
        private _dataRequestOptions;
        private _callBacks;
        private _requestVisibleItemsProvider?;
        private _timer;
        private _requestQueue;
        private _suspendItem;
        private _visibleItemsProvider;
        private _isUpdating;
        private _dequeueRequest;
        private _enqueueRequest;
        _getDataRequestPriority(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): 0 | 1 | 2;
        _getRequestLockingMasterFilterItems(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): DevExpress.Dashboard.Model.DashboardItem[];
        private visibleItemsFilter;
        private _resolveItems;
        private _processItemChanged;
        private _itemChanged;
        private _resolveItemsDeffered;
        initializeItem: (item: DevExpress.Dashboard.Model.DashboardItem) => void;
        constructor(_dashboard: DevExpress.Dashboard.Model.Dashboard, _dataRequestOptions: DevExpress.Dashboard.DataRequestOptions, _callBacks: UpdateHubCallbacks, _requestVisibleItemsProvider?: () => DevExpress.Dashboard.Internal.VisibleItemsProvider);
        _getItemData: (item: DevExpress.Dashboard.Model.DashboardItem) => JQueryPromise<any>;
        _performServerRequest(item: DevExpress.Dashboard.Model.DashboardItem, category: any): JQueryPromise<any>;
        refreshItems(itemsNames: Array<string>): void;
        reloadAllItems(caterory: DevExpress.Dashboard.Metadata.PropertyCategory): void;
        reloadGlobalColoredItems(caterory: DevExpress.Dashboard.Metadata.PropertyCategory): void;
        initialize(): void;
        itemBeginUpdate: (itemName: string) => void;
        itemEndUpdate: (itemName: string) => void;
        dashboardBeginUpdate: () => void;
        dashboardEndUpdate: () => void;
        dataSourcePropertyChanged: DevExpress.Dashboard.Internal.DashboardEvent<DataSourceChangedEventArgs>;
        dashboardItemPropertyChanged: DevExpress.Dashboard.Internal.DashboardEvent<DashboardItemChangedEventArgs>;
        dispose(): void;
    }
    export {};
}
declare module DevExpress.Dashboard.Model {
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import LayoutDimensionMode = DevExpress.Dashboard.Model.LayoutDimensionMode;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class LayoutDimensionOptions extends SerializableModel {
        mode: ko.Observable<DevExpress.Dashboard.Model.LayoutDimensionMode>;
        value: ko.Observable<number>;
        constructor(model?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Analytics.Utils.ISerializationInfoArray);
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export const _defaultHeight = 800;
    export const _defaultWidth = 1000;
    export let heightOptionsSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let widthOptionsSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let layoutOptionsSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import LayoutDimensionOptions = DevExpress.Dashboard.Model.LayoutDimensionOptions;
    export class LayoutOptions extends SerializableModel {
        width: DevExpress.Dashboard.Model.LayoutDimensionOptions;
        height: DevExpress.Dashboard.Model.LayoutDimensionOptions;
        constructor(model?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Analytics.Utils.ISerializationInfoArray);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export let titleHeight: number;
    export let titleVerticalPadding: number;
    export let contentToolbarHeight: number;
}
declare module DevExpress.Dashboard.Internal {
    export interface ElementAccessorKoComponentArgs {
        onInitialize?: (args: ElementAccessorEventArgs) => void;
        onDisposing?: (args: ElementAccessorEventArgs) => void;
        targetElement?: ko.Observable<HTMLElement>;
    }
    export interface ElementAccessorEventArgs {
        element: HTMLElement;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export let titleTooltipClasses: {
        root: string;
        list: string;
        listText: string;
        subList: string;
        subListItem: string;
    };
    export class FilterIconTooltip {
        private static FILTER_LIST_SPACE;
        private static DEFAULT_LINE_HEIGHT;
        static getTooltipContent(contentElement: JQuery, masterFilterValues: Array<any>): any;
        private static _calcMaxFilterListValues;
        private static _calcMaxFilterValues;
        private static _calcMaxHeight;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export interface TitleViewModel {
        Text: string;
        Visible: boolean;
        ShowParametersButton: boolean;
        IncludeMasterFilterValues: boolean;
        LayoutModel: {
            Alignment: string;
            ImageViewModel: ImageViewModel;
        };
    }
    export interface ImageViewModel {
        SourceBase64String: string;
        MimeType?: string;
        Url: string;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardTitleToolbarOptions = DevExpress.Dashboard.DashboardTitleToolbarOptions;
    import TitleViewModel = DevExpress.Dashboard.Internal.Viewer.TitleViewModel;
    export class DashboardTitleToolbarAdapter {
        static getTitleOptions(titleViewModel: DevExpress.Dashboard.Internal.Viewer.TitleViewModel, masterFilterValues: Array<any>, showExportDialog: (format: any) => void, showParametersDialog: () => void, allowExport: boolean): DevExpress.Dashboard.DashboardTitleToolbarOptions;
        private static _getMasterFilterText;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    export interface ViewerToolbarLocatedItem extends ViewerToolbarItem {
        location: "before" | "center" | "after";
        isSeparator?: boolean;
        disabled?: boolean;
    }
    export function arrangeFloatingToolbarItems(itemOptions: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): Array<ViewerToolbarLocatedItem>;
    export function arrangeHoveredToolbarItems(itemOptions: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions, containerHovered: boolean, disabled: boolean): Array<ViewerToolbarLocatedItem>;
    export function arrangeTitleToolbarItems(itemOptions: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions, showStaticItemsOnCenter: boolean): Array<ViewerToolbarLocatedItem>;
    export function arrangeStaticToolbarItems(itemOptions: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions, disabled: boolean): Array<ViewerToolbarLocatedItem>;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxListOptions = DevExpress.ui.dxList.Properties;
    import dxTileViewOptions = DevExpress.ui.dxTileView.Properties;
    import ViewerToolbarItemMenu = DevExpress.Dashboard.ViewerToolbarItemMenu;
    export class PopupMenuCreator {
        private static _icon_menu_element_size;
        static toggleMenu(element: HTMLElement, menu: DevExpress.Dashboard.ViewerToolbarItemMenu, container: HTMLElement, controlContainer: HTMLElement, onMenuItemClick?: () => void): void;
        private static _createPopoverOptions;
        static _createTileViewOptions(menu: DevExpress.Dashboard.ViewerToolbarItemMenu, onItemClick: (data: any) => void): DevExpress.ui.dxTileView.Properties;
        static _createListOptions(menu: DevExpress.Dashboard.ViewerToolbarItemMenu, onItemClick: (data: any) => void): DevExpress.ui.dxList.Properties;
        private static _getPopupContainer;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import dxToolbarItem = DevExpress.Dashboard.Internal.Viewer.dxToolbarItem;
    export class DashboardCaptionToolbarAdapter {
        private _encodeHtml;
        constructor(_encodeHtml: boolean);
        createToolbarItem(item: DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem, controlContainer?: HTMLElement, popupContainer?: HTMLElement, onMenuItemClick?: () => void): DevExpress.Dashboard.Internal.Viewer.dxToolbarItem;
        private _applyText;
        private _createToolbarItemOptions;
        private _createTooltipOptions;
        private _fillCssClasses;
        private _validate;
        private _createSeparatorItem;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export function calcMaxWidth(itemsWidth: Array<number>, sectionWidth: number, sectionMaxWidth: number): Array<number>;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DxElement = DevExpress.core.DxElement;
    import dxToolbar = DevExpress.ui.dxToolbar;
    import dxToolbarOptions = DevExpress.ui.dxToolbar.Properties;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import DashboardCaptionToolbarAdapter = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarAdapter;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    export interface CaptionToolbar {
        calcHeight: (options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions) => number;
        calcMinWidth: (options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions) => number;
        update: (options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions) => boolean;
        onResize: () => void;
        dispose: () => void;
        element: HTMLElement;
        disabled: boolean;
    }
    export interface dxToolbarItem {
        location: string;
        options?: dxToolbarItemOptions;
        widget?: string;
        template?: () => JQuery | Element | string;
        html?: string;
        text?: string;
    }
    export interface dxToolbarItemOptions {
        elementAttr?: dxToolbarItemElementAttr;
        disabled?: boolean;
        hint?: string;
        html?: string;
        text?: string;
        template?: (buttonData: any, contentElement: DevExpress.core.DxElement) => JQuery | Element | string;
        onClick?: (data: {
            element: DevExpress.core.DxElement;
        }) => void;
        onContentReady?: (data: any) => void;
    }
    export interface dxToolbarItemElementAttr {
        class?: string;
        id?: string;
    }
    export abstract class DashboardCaptionToolbarBase implements CaptionToolbar {
        protected _container: HTMLElement;
        protected _controlContainer: HTMLElement;
        protected _popupContainer: HTMLElement;
        protected encodeHtml: boolean;
        protected _adapter: DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarAdapter;
        protected _toolbar: DevExpress.ui.dxToolbar;
        protected _toolbarDiv: HTMLElement;
        protected _toolbarContainer: HTMLElement;
        protected _options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
        protected _className: string;
        protected _disabled: boolean;
        protected get _initialized(): boolean;
        protected get _staticItemsClass(): string;
        get element(): HTMLElement;
        get disabled(): boolean;
        set disabled(value: boolean);
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml?: boolean);
        update(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): boolean;
        calcHeight(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        calcMinWidth(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): any;
        onResize(): void;
        dispose(): void;
        protected _updateToolbar(): void;
        protected _createInstance(): CaptionToolbar;
        protected _getToolbarOptions(): DevExpress.ui.dxToolbar.Properties;
        protected _getVisibleItems(): Array<DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem>;
        protected _getToolbarItems(items: Array<DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem>): Array<dxToolbarItem>;
        protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
        protected _resizeStaticToolbarItems(toolbarDiv?: HTMLElement): void;
        protected _processToolbarBeforeGettingSize(toolbar: CaptionToolbar): void;
    }
    export interface ItemCaptionToolbarViewOptions {
        hasCaption: boolean;
        encodeHtml: boolean;
        captionToolbarSeparatorRequired: boolean;
        isBottomFloatingToolbarPosition: boolean;
        allowPreview: boolean;
        hiddenToolbar: boolean;
        itemHasOwnContent: boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import DashboardCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarBase;
    export class DashboardTitleToolbar extends DashboardCaptionToolbarBase {
        private allowHideEmptyToolbar;
        private _optionalClass?;
        private _showStaticItemsOnCenter;
        protected get _staticItemsClass(): string;
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, allowHideEmptyToolbar?: boolean, _optionalClass?: any);
        calcHeight(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        update(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions, showStaticItemsOnCenter?: boolean): boolean;
        protected _getVisibleItems(): Array<DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem>;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        private _visible;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardTitleToolbar = DevExpress.Dashboard.Internal.Viewer.DashboardTitleToolbar;
    import TitleViewModel = DevExpress.Dashboard.Internal.Viewer.TitleViewModel;
    export interface DashboardTitleOptions {
        allowExport: boolean;
        showExportDialog: (format: any) => void;
        showParametersDialog: () => void;
    }
    export interface IDashboardTitle {
        onUpdated?: JQueryCallback;
        update: () => void;
    }
    export class DashboardTitleView {
        onUpdated: JQuery.Callbacks<Function>;
        protected _captionToolbar: DevExpress.Dashboard.Internal.Viewer.DashboardTitleToolbar;
        private _options;
        protected _titleViewModel: DevExpress.Dashboard.Internal.Viewer.TitleViewModel;
        protected get _visible(): boolean;
        initialize(container: HTMLElement, controlContainer: HTMLElement, encodeHtml: boolean, options: DashboardTitleOptions, titleViewModel: DevExpress.Dashboard.Internal.Viewer.TitleViewModel): void;
        calcHeight(masterFilterValues: Array<any>): number;
        update(masterFilterValues: Array<any>): void;
        resize(): void;
        private _convertToToolbarOptions;
        private _raiseUpdated;
    }
}
declare module DevExpress.Dashboard.Internal {
    export const devExtremeConstants: {
        materialPopupToolbarHeight: number;
        materialPopupContentPadding: number;
        materialGridBaseHeaderHeight: number;
        materialGridBaseHeaderLineHeight: number;
        materialGridBaseHeaderCellVerticalPadding: number;
        materialGridBaseCellHeight: number;
        materialGridBaseCellLineHeight: number;
        materialGridBaseCellVerticalPadding: number;
        materialButtonHeight: number;
        materialGridBaseCellFontSize: number;
        materialGridBaseRowBorder: number;
        dxPopupTitleBorderBottom: number;
        dxDatagridHeadersBorder: number;
    };
    export const dashboardConstants: {
        materialParametersDialogFormPaddingTop: number;
        materialParametersDialogFormPaddingBottom: number;
    };
}
declare module DevExpress.Dashboard {
    import dxDataGrid = DevExpress.ui.dxDataGrid;
    export interface ParameterDialogContent {
        grid: DevExpress.ui.dxDataGrid;
        submitParameterValues: () => void;
        resetParameterValues: () => void;
        valueChanged: JQueryCallback;
        dispose: () => void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxPopup = DevExpress.ui.dxPopup;
    export let dialogClasses: {
        form: string;
        formWrapper: string;
        simpleDialog: string;
        element: string;
        elementLargeMarginTop: string;
        elementSmallMarginTop: string;
        name: string;
        disabledName: string;
        box: string;
        buttons: string;
        elementTextBox: string;
        elementNumberBox: string;
    };
    export let dialogSizes: {
        width: number;
        height: number;
        minWidth: number;
        minHeight: number;
    };
    export interface DialogFormOptions {
        allowScrolling: boolean;
        fullScreenMode?: boolean;
        dialogContainer: Element;
        title?: string;
        width: number | string;
        height: number | string;
        deferredRendering: boolean;
        buttons: Array<{
            className?: string;
            name?: string;
            hide?: boolean;
            func?: (...args: any[]) => void;
            isDefault?: boolean;
        }>;
        setActualState: (width: number) => void;
        onShowing?: (args: any) => void;
        onHidden?: (args: any) => void;
        onShown?: (args: any) => void;
        renderContent: (args: any) => HTMLElement;
        disposeContent: () => void;
    }
    export class dialogForm {
        options: DialogFormOptions;
        popupInstance: DevExpress.ui.dxPopup;
        scrollableContent: HTMLElement;
        controlCreationCallbacks: JQuery.Callbacks<Function>;
        constructor(options: DialogFormOptions);
        showDialog(): void;
        hideDialog(): void;
        dispose(): void;
        _initialize(): void;
        _renderPopupContent(component: DevExpress.ui.dxPopup): void;
        _setLabelsWidth(): number;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxCheckBox = DevExpress.ui.dxCheckBox;
    import dxDataGrid = DevExpress.ui.dxDataGrid;
    import dxDataGridColumn = DevExpress.ui.dxDataGridColumn;
    import Widget = DevExpress.ui.Widget;
    import DashboardParameterLookUpValue = DevExpress.Dashboard.DashboardParameterLookUpValue;
    import IParameter = DevExpress.Dashboard.Internal.Data.IParameter;
    import Parameter = DevExpress.Dashboard.Internal.Data.Parameter;
    import ParametersCollection = DevExpress.Dashboard.Internal.Data.ParametersCollection;
    import ParameterDialogContent = DevExpress.Dashboard.ParameterDialogContent;
    import dialogForm = DevExpress.Dashboard.Internal.Viewer.dialogForm;
    export let parameterTypes: {
        string: string;
        int: string;
        float: string;
        bool: string;
        dateTime: string;
        selector: string;
        multiselector: string;
        guid: string;
    };
    export class parametersDialog {
        options: ParametersDialogOptions;
        getParametersCollection: () => DevExpress.Dashboard.Internal.Data.ParametersCollection;
        submitParameters: any;
        dialogForm: DevExpress.Dashboard.Internal.Viewer.dialogForm;
        valueChanged: JQuery.Callbacks<Function>;
        _dataGrid: DevExpress.ui.dxDataGrid;
        setActualState: () => void;
        submitParameterValues: () => void;
        resetParameterValues: () => void;
        constructor(options: ParametersDialogOptions);
        _initialize(): void;
        _disposeGrid(): void;
        appendNullGridColumn(gridColumns: Array<DevExpress.ui.dxDataGridColumn>): void;
        allowNullColumn(): any;
        createNullColumn(): DevExpress.ui.dxDataGridColumn;
        createGridColumns(): Array<DevExpress.ui.dxDataGridColumn>;
        private _generateContent;
        generateContent(element: HTMLElement, disposeCallback?: () => void): DevExpress.Dashboard.ParameterDialogContent;
        show(): void;
        hide(): void;
        dispose(): void;
        _getParameterEntity(parameter: DevExpress.Dashboard.Internal.Data.Parameter, controlCreationCallbacks: any): ParameterEntity;
    }
    export interface ParameterEntityOptions {
        name: string;
        type: any;
        description?: any;
        defaultValue: any;
        value: any;
        lookUpValues: Array<any>;
        allowNull: boolean;
        allowMultiselect: boolean;
        createControl: (element: HTMLElement) => DevExpress.ui.Widget<any>;
        valueName: any;
        controlCreationCallbacks: JQueryCallback;
    }
    export class ParameterEntity {
        name: string;
        type: any;
        description: any;
        defaultValue: any;
        value: any;
        lookUpValues: any[];
        allowNull: boolean;
        allowMultiselect: boolean;
        createControl: (element: HTMLElement) => DevExpress.ui.Widget<any>;
        valueName: any;
        controlCreationCallbacks: any;
        divValueEditor: HTMLElement;
        divAllowNull: HTMLElement;
        allowNullControl: DevExpress.ui.dxCheckBox;
        control: DevExpress.ui.Widget<any>;
        valueChanged: JQuery.Callbacks<Function>;
        dispose(): void;
        constructor(options: ParameterEntityOptions);
        getValue(): any;
        setValue(value: any): void;
        setLookUpValues(values: DevExpress.Dashboard.DashboardParameterLookUpValue[]): void;
        wrapParameter(): {
            Name: string;
            Value: any;
        };
        _addControl(): void;
    }
    export interface ParametersDialogOptions {
        parametersDialogContainer: HTMLElement;
        getParametersCollection: () => DevExpress.Dashboard.Internal.Data.ParametersCollection;
        submitParameters: (newParameters: DevExpress.Dashboard.Internal.Data.IParameter[]) => void;
        onShowing?: (args: any) => void;
        onShown?: (args: any) => void;
        onHidden?: (args: any) => void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DashboardOptionChangedArgs = DevExpress.Dashboard.DashboardOptionChangedArgs;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DashboardControlActions = DevExpress.Dashboard.Internal.DashboardControlActions;
    import OptionConsumer = DevExpress.Dashboard.Internal.OptionConsumer;
    export const getEventName: (actionName: string) => string;
    export const getOptionNameByEvent: (eventName: string) => string;
    export const isEventName: (actionName: string) => boolean;
    export type EventSubscriber<TEvents> = <K extends Extract<keyof TEvents, string>>(eventName: K, eventHandler: (ev: TEvents[K]) => any) => void;
    export interface OptionsManagerConfig<TOptions extends Object, TEvents extends Object> {
        defaultOptions: TOptions;
        initOptions: TOptions;
        optionChanged: (args: DevExpress.Dashboard.DashboardOptionChangedArgs<TOptions>) => DevExpress.Dashboard.Internal.DashboardControlActions;
        dashboardControl: DevExpress.Dashboard.DashboardControl;
        eventsHolder?: {
            on: EventSubscriber<TEvents>;
            off: EventSubscriber<TEvents>;
        };
        extensionName: string;
    }
    export class OptionsManager<TOptions extends Object, TEvents extends Object> implements OptionConsumer<TOptions> {
        _internalEvents: EventManager<TEvents>;
        _dashboardControl: DevExpress.Dashboard.DashboardControl;
        _config: OptionsManagerConfig<TOptions, TEvents>;
        initialize(_config: OptionsManagerConfig<TOptions, TEvents>): void;
        getDefaultOptions(): TOptions;
        getInitialOptions(): TOptions;
        dispose(): void;
        optionChanged(args: DevExpress.Dashboard.DashboardOptionChangedArgs<TOptions>): DevExpress.Dashboard.Internal.DashboardControlActions;
        raiseEvent<K extends Extract<keyof TEvents, string>>(eventName: K, eventArgs: TEvents[K]): void;
        get(optionName: Extract<keyof TOptions, string>): any;
        set(optionName: Extract<keyof TOptions, string>, value: any): any;
        silent(optionName: string, value: any): any;
        private _set;
        private _cachedSetters;
        private _merge;
    }
    export let mergeOptions: (target: any, source: any, externalCache?: {}) => void;
    export class EventManager<TEvents> {
        dispose(): void;
        private _handlers;
        raise<K extends Extract<keyof TEvents, string>>(eventName: K, eventArgs: TEvents[K]): void;
        on: EventSubscriber<TEvents>;
        off: EventSubscriber<TEvents>;
    }
}
declare module DevExpress.Dashboard.Internal {
    import IParameterValueViewModel = DevExpress.Dashboard.Internal.Data.IParameterValueViewModel;
    import ParametersCollection = DevExpress.Dashboard.Internal.Data.ParametersCollection;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DynamicListLookUpSettings = DevExpress.Dashboard.Model.DynamicListLookUpSettings;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    export class ParameterDialogViewModel extends DisposableObject {
        private _parameters;
        private _getDashboardParameterType;
        private _getParameterValues;
        private _getParameterDefaultValue;
        constructor(_parameters: ko.ObservableArray<DevExpress.Dashboard.Model.Parameter>, getParameterValues: (parameterType: string, settings: DevExpress.Dashboard.Model.DynamicListLookUpSettings) => ko.ObservableArray<DevExpress.Dashboard.Internal.Data.IParameterValueViewModel>);
        setParameters: (newParameters: any) => void;
        parameterCollection: ko.Computed<DevExpress.Dashboard.Internal.Data.ParametersCollection>;
    }
}
declare module DevExpress.Dashboard {
    import DxElement = DevExpress.core.DxElement;
    import dxPopup = DevExpress.ui.dxPopup;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import ParameterDialogContent = DevExpress.Dashboard.ParameterDialogContent;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    import DashboardParameterCollection = DevExpress.Dashboard.DashboardParameterCollection;
    export interface DashboardParameterDialogArgs {
        component?: DevExpress.ui.dxPopup;
        element?: DevExpress.core.DxElement;
        model?: any;
    }
    export interface DynamicLookUpValuesLoadedArgs {
        parameterName: string;
    }
    /**
     * @docid dxDashboardControlOptions.extensions.dashboardParameterDialog
     * @type object
     * @public
     */
    export interface DashboardParameterDialogExtensionOptions {
        /**
         * @docid dxDashboardControlOptions.extensions.dashboardParameterDialog.onDynamicLookUpValuesLoaded
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onDynamicLookUpValuesLoaded?: (args: DynamicLookUpValuesLoadedArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.dashboardParameterDialog.onShowing
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onShowing?: (args: DashboardParameterDialogArgs) => any;
        /**
         * @docid dxDashboardControlOptions.extensions.dashboardParameterDialog.onShown
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onShown?: (args: DashboardParameterDialogArgs) => any;
        /**
        * @docid dxDashboardControlOptions.extensions.dashboardParameterDialog.onHidden
        * @extends Action
        * @type function(args)
        * @type_function_param1 args:object
        * @action
        * @public
        */
        onHidden?: (args: DashboardParameterDialogArgs) => any;
    }
    export type DashboardParameterDialogExtensionEvents = {
        dynamicLookUpValuesLoaded: DynamicLookUpValuesLoadedArgs;
        showing: DashboardParameterDialogArgs;
        shown: DashboardParameterDialogArgs;
        hidden: DashboardParameterDialogArgs;
    };
    export class DashboardParameterDialogExtension extends DisposableObject implements ISupportOptionExtension<DashboardParameterDialogExtensionOptions> {
        private _parameterDialog;
        private _customDialogContent;
        private _viewModel;
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<DashboardParameterDialogExtensionOptions, DashboardParameterDialogExtensionEvents>;
        name: string;
        _dashboardControl: DevExpress.Dashboard.DashboardControl;
        _onShowing: ((e: DashboardParameterDialogArgs) => any);
        _onShown: ((e: DashboardParameterDialogArgs) => any);
        _onHidden: ((e: DashboardParameterDialogArgs) => any);
        get onShowing(): ((e: DashboardParameterDialogArgs) => any);
        set onShowing(value: ((e: DashboardParameterDialogArgs) => any));
        get onShown(): ((e: DashboardParameterDialogArgs) => any);
        set onShown(value: ((e: DashboardParameterDialogArgs) => any));
        get onHidden(): ((e: DashboardParameterDialogArgs) => any);
        set onHidden(value: ((e: DashboardParameterDialogArgs) => any));
        showDialogButton: ko.Observable<boolean>;
        on: DevExpress.Dashboard.Internal.EventSubscriber<DashboardParameterDialogExtensionEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<DashboardParameterDialogExtensionEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: DashboardParameterDialogExtensionOptions);
        start(): void;
        stop(): void;
        show(): void;
        hide(): void;
        subscribeToContentChanges(callback: (newValue: DevExpress.Dashboard.DashboardParameterCollection) => void): ko.Subscription;
        getParameters(): DevExpress.Dashboard.DashboardParameterCollection;
        private _getParameters;
        renderContent(element: JQuery | Element): DevExpress.Dashboard.ParameterDialogContent;
        private _createParameterDialog;
        private _clearContent;
        private _clear;
        private _subscribeDynamicLookUpValuesLoaded;
        protected _updateViewModel: (dashboard: any) => void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export class listSource {
        dataSource: any;
        dataMembers: any;
        rowCount: any;
        columnCount: any;
        constructor(dataSource: any, dataMembers: any);
        _wrapIfRequired(dataSource: any, dataMembers: any): any;
        getRowValue(rowIndex: any, dataMember: any): any;
        getFormattedRowValue(rowIndex: any, dataMember: any, formatInfo: any): string;
        getFormattedArgumentRowValue(rowIndex: any, dataMember: any, formatInfo: any): string;
        getColumnIndex(dataMember: any): any;
        getRowCount(): any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemUnderlyingData = DevExpress.Dashboard.Data.ItemUnderlyingData;
    export class DrillThroughDataWrapper implements ItemUnderlyingData {
        _data: any;
        _drillThroughData: any;
        _errorMessage: any;
        constructor(drillThroughData: any);
        initialize(): void;
        getRowCount(): any;
        getRowValue(rowIndex: any, columnName: any): any;
        getDataMembers(): any;
        getDisplayNames(): any;
        isDataReceived(): boolean;
        getRequestDataError(): any;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let chartDefinitionMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ChartWindowDefinitionMode = DevExpress.Dashboard.Model.ChartWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class ChartWindowDefinition extends MeasureCalculationWindowDefinition {
        definitionMode: ko.Observable<DevExpress.Dashboard.Model.ChartWindowDefinitionMode>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartArgumentsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartItemBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import TargetDimensions = DevExpress.Dashboard.Model.TargetDimensions;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartInteractivityOptions = DevExpress.Dashboard.Model.ChartInteractivityOptions;
    import SeriesItem = DevExpress.Dashboard.Model.SeriesItem;
    export abstract class ChartItemBase extends SeriesItem {
        protected __arguments: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        arguments: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        interactivityOptions: DevExpress.Dashboard.Model.ChartInteractivityOptions;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _clearBindings(): void;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        protected _getTargetDimensions(): DevExpress.Dashboard.Model.TargetDimensions;
        _getItemDataAxis(): DevExpress.Dashboard.Data.ItemDataAxisName;
        _getCurrentFilterValues(): any[];
        _itemInteractivityByColumnAxis(): boolean;
        _getInteractivityAxisDimensionCount(): number;
        protected _getCanColorByMeasures(): boolean;
        protected _getCanColorByDimensions(): boolean;
        _getColorizableDataItemsInfo(): Array<{
            items: Array<DevExpress.Dashboard.Model.DataItemLink>;
            prefixId: string;
        }>;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let reverse: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let axisVisible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let titleVisibleBaseInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let title: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartAxisSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let enableZooming: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let limitVisiblePoints: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let visiblePointsCount: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartAxisXSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let alwaysShowZeroLevelTemplate: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartAlwaysShowZeroLevel: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let alwaysShowZeroLevelScatter: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showGridLinesBaseInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let logarithmic: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let logarithmicBase: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartAxisYBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
    export let chartAxisYSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let chartSecondaryAxisYSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let scatterChartAxisYSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DataItemDateTimeFormat = DevExpress.Dashboard.Model.DataItemDateTimeFormat;
    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    import LogarithmicBase = DevExpress.Dashboard.Model.LogarithmicBase;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class ChartAxis extends SerializableModel {
        reverse: ko.Observable<boolean>;
        visible: ko.Observable<boolean>;
        titleVisible: ko.Observable<boolean>;
        title: ko.Observable<string>;
        numericFormat: DevExpress.Dashboard.Model.DataItemNumericFormat;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class ChartAxisX extends ChartAxis {
        enableZooming: ko.Observable<boolean>;
        limitVisiblePoints: ko.Observable<boolean>;
        visiblePointsCount: ko.Observable<number>;
        dateTimeFormat: DevExpress.Dashboard.Model.DataItemDateTimeFormat;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class ChartAxisY extends ChartAxis {
        alwaysShowZeroLevel: ko.Observable<boolean>;
        showGridLines: ko.Observable<boolean>;
        logarithmic: ko.Observable<boolean>;
        logarithmicBase: ko.Observable<DevExpress.Dashboard.Model.LogarithmicBase>;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class ScatterChartAxisY extends ChartAxisY {
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class ChartSecondaryAxisY extends ChartAxisY {
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IBindingModelProvider = DevExpress.Dashboard.Internal.Model.IBindingModelProvider;
    export function getDataItemContainerDisplayName(dataSourceBrowser: DevExpress.Dashboard.Internal.IDataFieldsProvider, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataItemContainer: DevExpress.Dashboard.Internal.Model.IBindingModelProvider): string;
    export function getDataItemDisplayName(dataFieldProvider: DevExpress.Dashboard.Internal.IDataFieldsProvider, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataItem: DevExpress.Dashboard.Model.DataItem): string;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let chartSeries: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let primaryAxisY: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let secondaryAxisY: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartPaneName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartPaneSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DashStyle = DevExpress.Dashboard.Model.DashStyle;
    import IndicatorType = DevExpress.Dashboard.Model.IndicatorType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dashStyleMap: {
        [key in DevExpress.Dashboard.Model.DashStyle]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let indicatorTypeMap: {
        [key in DevExpress.Dashboard.Model.IndicatorType]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let chartIndicatorColor: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorDashStyle: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorIgnoreEmptyArgument: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorLegendText: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorShowInLegend: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorThickness: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorVisible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorValueLevel: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorDisplayName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorTypeName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicatorSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Internal.Model {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import ChartIndicator = DevExpress.Dashboard.Model.ChartIndicator;
    export function getChartCFSeries(dashboardItem: DevExpress.Dashboard.Model.ChartItem): DevExpress.Dashboard.Model.ChartSeries[];
    export function getChartApplyToDataItems(dashboardItem: DevExpress.Dashboard.Model.ChartItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, getChartSeries?: (dashboardItem: DevExpress.Dashboard.Model.ChartItem) => DevExpress.Dashboard.Model.ChartSeries[]): () => {
        uniqueName: string | ko.Observable<string>;
        displayName: string | ko.Observable<string>;
    }[];
    export function getChartSeries(dashboardItem: DevExpress.Dashboard.Model.ChartItem): DevExpress.Dashboard.Model.ChartSeries[];
    export function getAvailableValueLevels(seriesDataId: string, dashboardItem: DevExpress.Dashboard.Model.ChartItem): {
        value: string;
        displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }[];
    export function getIndicatorDisplayNameFromSeries(model: DevExpress.Dashboard.Model.ChartIndicator, dashboardItem: DevExpress.Dashboard.Model.ChartItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): string;
    export function getDefaultSeriesDataId(model: DevExpress.Dashboard.Model.ChartIndicator, dashboardItem: DevExpress.Dashboard.Model.ChartItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): void;
}
declare module DevExpress.Dashboard.Internal.Model {
    export class DefaultDashboardPalette {
        static colors: string[];
        static getColor(index: number): string;
        static getNextColor(currentColorIndex: number, existedColors: string[]): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    export class ChartIndicator extends SerializableModel {
        name: ko.Observable<string>;
        displayName: ko.Observable<string>;
        itemType: ko.Observable<string>;
        legendText: ko.Observable<string>;
        value: ko.Observable<string>;
        valueLevel: ko.Observable<string>;
        color: ko.Observable<string>;
        dashStyle: ko.Observable<string>;
        customTypeName: ko.Observable<string>;
        showInLegend: ko.Observable<boolean>;
        visible: ko.Observable<boolean>;
        thickness: ko.Observable<number>;
        _typeName: ko.Observable<string>;
        constructor(model?: any, serializer?: any, info?: any);
        static _createNew(chartItem: DevExpress.Dashboard.Model.ChartItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): ChartIndicator;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _updateItemType(): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let outsidePosition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let insidePosition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let isInsideDiagram: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartLegendVisible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartLegendSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ChartLegendInsidePosition = DevExpress.Dashboard.Model.ChartLegendInsidePosition;
    import ChartLegendOutsidePosition = DevExpress.Dashboard.Model.ChartLegendOutsidePosition;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class ChartLegend extends SerializableModel {
        outsidePosition: ko.Observable<DevExpress.Dashboard.Model.ChartLegendOutsidePosition>;
        insidePosition: ko.Observable<DevExpress.Dashboard.Model.ChartLegendInsidePosition>;
        isInsideDiagram: ko.Observable<boolean>;
        visible: ko.Observable<boolean>;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ChartAxisY = DevExpress.Dashboard.Model.ChartAxisY;
    import ChartSecondaryAxisY = DevExpress.Dashboard.Model.ChartSecondaryAxisY;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    export class ChartPane extends SerializableModel {
        name: ko.Observable<string>;
        series: ko.ObservableArray<DevExpress.Dashboard.Model.ChartSeries>;
        primaryAxisY: DevExpress.Dashboard.Model.ChartAxisY;
        secondaryAxisY: DevExpress.Dashboard.Model.ChartSecondaryAxisY;
        createSeriesByViewType: (seriesViewType: string) => DevExpress.Dashboard.Model.ChartSeries;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartRotated: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let panes: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartIndicators: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartLegend: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartAxisX: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chartItemSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import TargetDimensions = DevExpress.Dashboard.Model.TargetDimensions;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartItemBase = DevExpress.Dashboard.Model.ChartItemBase;
    import ChartAxisX = DevExpress.Dashboard.Model.ChartAxisX;
    import ChartIndicator = DevExpress.Dashboard.Model.ChartIndicator;
    import ChartLegend = DevExpress.Dashboard.Model.ChartLegend;
    import ChartPane = DevExpress.Dashboard.Model.ChartPane;
    export class ChartItem extends ChartItemBase {
        rotated: ko.Observable<boolean>;
        axisX: DevExpress.Dashboard.Model.ChartAxisX;
        legend: DevExpress.Dashboard.Model.ChartLegend;
        panes: ko.ObservableArray<DevExpress.Dashboard.Model.ChartPane>;
        indicators: ko.ObservableArray<DevExpress.Dashboard.Model.ChartIndicator>;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _updateContentViewModel(content: any): void;
        protected _getTargetDimensions(): DevExpress.Dashboard.Model.TargetDimensions;
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getCanColorByDimensions(): boolean;
        protected _getAreMeasuresColoredByDefault(): boolean;
        protected _getIsDimensionColoredByDefault(dimension: DevExpress.Dashboard.Model.Dimension): boolean;
        private _addNewPane;
        private _coloredSeries;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let gaugeWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class GaugeWindowDefinition extends MeasureCalculationWindowDefinition {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let kpiDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ContentArrangementMode = DevExpress.Dashboard.Model.ContentArrangementMode;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItemInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
    import SeriesItem = DevExpress.Dashboard.Model.SeriesItem;
    export abstract class KpiItem extends SeriesItem {
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
        contentArrangementMode: ko.Observable<DevExpress.Dashboard.Model.ContentArrangementMode>;
        contentLineCount: ko.Observable<number>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DeltaValueType = DevExpress.Dashboard.Model.DeltaValueType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let deltaValueTypeMap: {
        [key in DevExpress.Dashboard.Model.DeltaValueType]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let valueType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let resultIndicationMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let resultIndicationThresholdType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let resultIndicationThreshold: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardDeltaOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let deltaOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DeltaIndicationMode = DevExpress.Dashboard.Model.DeltaIndicationMode;
    import DeltaIndicationThresholdType = DevExpress.Dashboard.Model.DeltaIndicationThresholdType;
    import DeltaValueType = DevExpress.Dashboard.Model.DeltaValueType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class CardDeltaOptions extends SerializableModel {
        resultIndicationMode: ko.Observable<DevExpress.Dashboard.Model.DeltaIndicationMode>;
        resultIndicationThresholdType: ko.Observable<DevExpress.Dashboard.Model.DeltaIndicationThresholdType>;
        resultIndicationThreshold: ko.Observable<number>;
        constructor(modelJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class DeltaOptions extends CardDeltaOptions {
        valueType: ko.Observable<DevExpress.Dashboard.Model.DeltaValueType>;
        constructor(modelJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let kpiItemdeltaOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let kpiItemActualValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let kpiItemTargetValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let kpiElementSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import AbsoluteVariationNumericFormat = DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
    import PercentOfTargetNumericFormat = DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
    import PercentVariationNumericFormat = DevExpress.Dashboard.Model.PercentVariationNumericFormat;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DeltaOptions = DevExpress.Dashboard.Model.DeltaOptions;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    export abstract class KpiElement extends DataItemContainer {
        protected __actualValue: DevExpress.Dashboard.Model.DataItemLink;
        protected __targetValue: DevExpress.Dashboard.Model.DataItemLink;
        actualValue: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        targetValue: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        deltaOptions: DevExpress.Dashboard.Model.DeltaOptions;
        absoluteVariationNumericFormat: DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
        percentVariationNumericFormat: DevExpress.Dashboard.Model.PercentVariationNumericFormat;
        percentOfTargetNumericFormat: DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
        _getDataId(): string;
        _displayNameSeparator: string;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let minimum: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let maximum: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let scaleLabelNumericFormat: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gaugeSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import KpiElement = DevExpress.Dashboard.Model.KpiElement;
    export class Gauge extends KpiElement {
        minimum: ko.Observable<number>;
        maximum: ko.Observable<number>;
        scaleLabelNumericFormat: DevExpress.Dashboard.Model.DataItemNumericFormat;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let gauges: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gaugeViewType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showGaugeCaptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gaugeDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import GaugeViewType = DevExpress.Dashboard.Model.GaugeViewType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import KpiItem = DevExpress.Dashboard.Model.KpiItem;
    import Gauge = DevExpress.Dashboard.Model.Gauge;
    export class GaugeItem extends KpiItem {
        gauges: ko.ObservableArray<DevExpress.Dashboard.Model.Gauge>;
        viewType: ko.Observable<DevExpress.Dashboard.Model.GaugeViewType>;
        showGaugeCaptions: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        _itemInteractivityByColumnAxis(): boolean;
        _getInteractivityAxisDimensionCount(): number;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _getLayersCount(): number;
        protected _getLayerName(): string;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let gridDefinitionMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import GridWindowDefinitionMode = DevExpress.Dashboard.Model.GridWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class GridWindowDefinition extends MeasureCalculationWindowDefinition {
        definitionMode: ko.Observable<DevExpress.Dashboard.Model.GridWindowDefinitionMode>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    export class ClientFilterManager {
        private _updateTotals;
        private _filterParams;
        private _filterState;
        constructor(_updateTotals: ko.Observable<boolean>);
        getFilterParams(): string;
        setFilterParams(clientFilter: string): void;
        clearFilterParams(): void;
        setFilterState(filterValue: any): void;
        getFilterState(): any;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let showFilterRow: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let updateTotals: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridColumnFilterOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class GridColumnFilterOptions extends SerializableModel {
        showFilterRow: ko.Observable<boolean>;
        updateTotals: ko.Observable<boolean>;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _getViewModel(): Object;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let viewType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let highlightMinMaxPoints: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let highlightStartEndPoints: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sparklineOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SparklineViewType = DevExpress.Dashboard.Model.SparklineViewType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class SparklineOptions extends SerializableModel {
        viewType: ko.Observable<DevExpress.Dashboard.Model.SparklineViewType>;
        highlightMinMaxPoints: ko.Observable<boolean>;
        highlightStartEndPoints: ko.Observable<boolean>;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import GridColumnTotalType = DevExpress.Dashboard.Model.GridColumnTotalType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    export class GridColumnTotal extends TypedSerializableModel {
        totalType: ko.Observable<DevExpress.Dashboard.Model.GridColumnTotalType>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        static getDisplayValue(totalType: string): string;
        static getLocalization(totalType: string): string;
        protected _getDefaultItemType(): string;
    }
    export let _totalTypeTemplate: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let _gridColumnTotalSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDisplayedValue = DevExpress.Analytics.Utils.IDisplayedValue;
    export let totalTypeValues: {
        commonCountTypes: DevExpress.Analytics.Utils.IDisplayedValue[];
        commonMinMaxTypes: DevExpress.Analytics.Utils.IDisplayedValue[];
        numericTypes: DevExpress.Analytics.Utils.IDisplayedValue[];
        autoTypes: DevExpress.Analytics.Utils.IDisplayedValue[];
    };
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let columnType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let displayMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let columnWeight: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let fixedWidth: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let widthType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let totalsTemplate: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridColumnBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dimension: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dimensionDisplayMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridDimensionColumnSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let alwaysShowZeroLevel: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let measure: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridMeasureColumnSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let gridColumnDeltaOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridColumnActualValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridColumnTargetValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridDeltaColumnSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let showStartEndValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sparkline: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sparklineOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridSparklineColumnSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let uri: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let displayValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export function checkGridUriPattern(value: any): string;
    export function validateGridUriPattern(value: any): boolean;
    export function gridValidateUriPattern(uriPattern: any): boolean;
    export let uriPatternValidationRules: {
        type: string;
        validationCallback: (options: any) => boolean;
        message: string;
    }[];
    export let gridColumnUriPattern: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridHyperlinkColumnSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import IDisplayedValue = DevExpress.Analytics.Utils.IDisplayedValue;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import AbsoluteVariationNumericFormat = DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
    import PercentOfTargetNumericFormat = DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
    import PercentVariationNumericFormat = DevExpress.Dashboard.Model.PercentVariationNumericFormat;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import GridColumnFixedWidthType = DevExpress.Dashboard.Model.GridColumnFixedWidthType;
    import GridColumnValueBarDisplayMode = DevExpress.Dashboard.Model.GridColumnValueBarDisplayMode;
    import GridDimensionColumnDisplayMode = DevExpress.Dashboard.Model.GridDimensionColumnDisplayMode;
    import GridMeasureColumnDisplayMode = DevExpress.Dashboard.Model.GridMeasureColumnDisplayMode;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DeltaOptions = DevExpress.Dashboard.Model.DeltaOptions;
    import SparklineOptions = DevExpress.Dashboard.Model.SparklineOptions;
    import GridColumnTotal = DevExpress.Dashboard.Model.GridColumnTotal;
    export enum GridColumnType {
        Dimension = 0,
        Measure = 1,
        Delta = 2,
        Sparkline = 3,
        Hyperlink = 4
    }
    export abstract class GridColumn extends DataItemContainer {
        weight: ko.Observable<number>;
        fixedWidth: ko.Observable<number>;
        widthType: ko.Observable<DevExpress.Dashboard.Model.GridColumnFixedWidthType>;
        totals: ko.ObservableArray<DevExpress.Dashboard.Model.GridColumnTotal>;
        _displayNameSeparator: string;
        get actualDataItem(): DevExpress.Dashboard.Model.DataItem;
        get _actualDataItemLink(): DevExpress.Dashboard.Model.DataItemLink;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        grabFrom(column: GridColumn): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getColumnType(): GridColumnType;
        abstract _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        protected abstract _getActualDataItemLink(): DevExpress.Dashboard.Model.DataItemLink;
        _getDataId(): string;
        _isAttribute(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
        _getViewModel(): {
            Weight: number;
            FixedWidth: number;
            WidthType: DevExpress.Dashboard.Model.GridColumnFixedWidthType;
        };
        _getAvailableTotalTypes(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider): DevExpress.Analytics.Utils.IDisplayedValue[];
        protected _getTotalTypes(dataType: DevExpress.Dashboard.Model.DataFieldType): Array<DevExpress.Analytics.Utils.IDisplayedValue>;
    }
    export class GridDimensionColumn extends GridColumn {
        private __dimension;
        dimension: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        displayMode: ko.Observable<DevExpress.Dashboard.Model.GridDimensionColumnDisplayMode>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getColumnType(): GridColumnType;
        protected _getActualDataItemLink(): DevExpress.Dashboard.Model.DataItemLink;
        _getAvailableTotalTypes(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider): DevExpress.Analytics.Utils.IDisplayedValue[];
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
    }
    export class GridMeasureColumn extends GridColumn {
        private __measure;
        measure: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        displayMode: ko.Observable<DevExpress.Dashboard.Model.GridMeasureColumnDisplayMode>;
        alwaysShowZeroLevel: ko.Observable<boolean>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getColumnType(): GridColumnType;
        protected _getActualDataItemLink(): DevExpress.Dashboard.Model.DataItemLink;
        _getAvailableTotalTypes(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider): DevExpress.Analytics.Utils.IDisplayedValue[];
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
    }
    export class GridDeltaColumn extends GridColumn {
        private __actualValue;
        private __targetValue;
        actualValue: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        targetValue: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        deltaOptions: DevExpress.Dashboard.Model.DeltaOptions;
        displayMode: ko.Observable<DevExpress.Dashboard.Model.GridColumnValueBarDisplayMode>;
        alwaysShowZeroLevel: ko.Observable<boolean>;
        absoluteVariationNumericFormat: DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
        percentVariationNumericFormat: DevExpress.Dashboard.Model.PercentVariationNumericFormat;
        percentOfTargetNumericFormat: DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getColumnType(): GridColumnType;
        protected _getActualDataItemLink(): DevExpress.Dashboard.Model.DataItemLink;
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
    }
    export class GridSparklineColumn extends GridColumn {
        private __measure;
        measure: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        showStartEndValues: ko.Observable<boolean>;
        sparklineOptions: DevExpress.Dashboard.Model.SparklineOptions;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getColumnType(): GridColumnType;
        protected _getActualDataItemLink(): DevExpress.Dashboard.Model.DataItemLink;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
    }
    export class GridHyperlinkColumn extends GridColumn {
        private __uriAttribute;
        private __displayValue;
        displayValue: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        uriPattern: ko.Observable<string>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getColumnType(): GridColumnType;
        protected _getActualDataItemLink(): DevExpress.Dashboard.Model.DataItemLink;
        protected _getDefaultItemType(): string;
        _isAttribute(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        _getAvailableTotalTypes(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider): DevExpress.Analytics.Utils.IDisplayedValue[];
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let allowCellMerge: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let columnWidthMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let enableBandedRows: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showVerticalLines: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showHorizontalLines: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showColumnHeaders: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let wordWrap: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import GridColumnWidthMode = DevExpress.Dashboard.Model.GridColumnWidthMode;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class GridOptions extends SerializableModel {
        allowCellMerge: ko.Observable<boolean>;
        columnWidthMode: ko.Observable<DevExpress.Dashboard.Model.GridColumnWidthMode>;
        enableBandedRows: ko.Observable<boolean>;
        showVerticalLines: ko.Observable<boolean>;
        showHorizontalLines: ko.Observable<boolean>;
        showColumnHeaders: ko.Observable<boolean>;
        wordWrap: ko.Observable<boolean>;
        constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _getViewModel(): Object;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let gridOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridColumnFilter: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let gridColumns: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sparklineArgument: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dashboardGridItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import GridClientState = DevExpress.Dashboard.Internal.Viewer.GridClientState;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
    import GridColumnFilterOptions = DevExpress.Dashboard.Model.GridColumnFilterOptions;
    import GridColumn = DevExpress.Dashboard.Model.GridColumn;
    import GridDeltaColumn = DevExpress.Dashboard.Model.GridDeltaColumn;
    import GridDimensionColumn = DevExpress.Dashboard.Model.GridDimensionColumn;
    import GridHyperlinkColumn = DevExpress.Dashboard.Model.GridHyperlinkColumn;
    import GridMeasureColumn = DevExpress.Dashboard.Model.GridMeasureColumn;
    import GridSparklineColumn = DevExpress.Dashboard.Model.GridSparklineColumn;
    import GridOptions = DevExpress.Dashboard.Model.GridOptions;
    export class GridItem extends DataDashboardItem {
        static _gridColumnTypesMap: {
            GridDimensionColumn: {
                constructor: typeof DevExpress.Dashboard.Model.GridDimensionColumn;
                displayName: string;
                icon: string;
            };
            GridMeasureColumn: {
                constructor: typeof DevExpress.Dashboard.Model.GridMeasureColumn;
                displayName: string;
                icon: string;
            };
            GridDeltaColumn: {
                constructor: typeof DevExpress.Dashboard.Model.GridDeltaColumn;
                displayName: string;
                icon: string;
            };
            GridSparklineColumn: {
                constructor: typeof DevExpress.Dashboard.Model.GridSparklineColumn;
                displayName: string;
                icon: string;
            };
            GridHyperlinkColumn: {
                constructor: typeof DevExpress.Dashboard.Model.GridHyperlinkColumn;
                displayName: string;
                icon: string;
            };
        };
        private __sparklineArgument;
        sparklineArgument: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
        gridOptions: DevExpress.Dashboard.Model.GridOptions;
        columnFilterOptions: DevExpress.Dashboard.Model.GridColumnFilterOptions;
        columns: ko.ObservableArray<DevExpress.Dashboard.Model.GridColumn>;
        private readonly _gridClientFilterManager;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        private _canUpdateTotals;
        _clearBindings(): void;
        _createGridColumn(columnJSON: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer): DevExpress.Dashboard.Model.GridColumn;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        protected _cleanDataItemDependencies(): void;
        protected _updateContentViewModel(content: any): void;
        protected _updateDataQueryParams(params: any): void;
        protected _updateDataManagerByPartialDataSource(content: any, itemDataDTO: any): void;
        protected _extendContentState(content: any): void;
        _isAttribute(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
        _setColumnWidthOptions(clientState: DevExpress.Dashboard.Internal.Viewer.GridClientState): void;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
        _setClientState(clientState: DevExpress.Dashboard.Internal.Viewer.GridClientState): void;
        _getInteractivityAxisDimensionCount(): number;
        _processClientFilterChanged: (clientFilter: string) => void;
        _processClientFilterStateChanged: (clientFilterState: any) => void;
    }
}
declare module DevExpress.Dashboard {
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import ItemDataDelta = DevExpress.Dashboard.Data.ItemDataDelta;
    import ItemDataDimension = DevExpress.Dashboard.Data.ItemDataDimension;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import ItemUnderlyingData = DevExpress.Dashboard.Data.ItemUnderlyingData;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import DashboardTitleToolbarOptions = DevExpress.Dashboard.DashboardTitleToolbarOptions;
    export interface DashboardItemBaseEventArgs {
        itemName: string;
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
    }
    export interface ItemElementCustomColorEventArgs extends DashboardItemBaseEventArgs {
        getTargetElement: () => DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
        getMeasures: () => Array<DevExpress.Dashboard.Data.ItemDataMeasure>;
        getColor: () => string;
        setColor: (color: string) => void;
    }
    export type DashboardSelectionMode = "None" | "Single" | "Multiple";
    export interface ItemVisualInteractivityEventArgs extends DashboardItemBaseEventArgs {
        getSelectionMode: () => DashboardSelectionMode;
        setSelectionMode: (value: DashboardSelectionMode) => void;
        isHighlightingEnabled: () => boolean;
        enableHighlighting: (value: boolean) => void;
        getTargetAxes: () => DevExpress.Dashboard.Data.ItemDataAxisName[];
        setTargetAxes: (value?: DevExpress.Dashboard.Data.ItemDataAxisName[]) => void;
        getDefaultSelection(): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        setDefaultSelection(selection: Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>): void;
    }
    export interface ItemClickEventArgs extends DashboardItemBaseEventArgs {
        getData: () => DevExpress.Dashboard.Data.ItemData;
        getAxisPoint: (axis?: DevExpress.Dashboard.Data.ItemDataAxisName) => DevExpress.Dashboard.Data.ItemDataAxisPoint;
        getMeasures: () => Array<DevExpress.Dashboard.Data.ItemDataMeasure>;
        getDeltas: () => Array<DevExpress.Dashboard.Data.ItemDataDelta>;
        getDimensions: () => Array<DevExpress.Dashboard.Data.ItemDataDimension>;
        requestUnderlyingData: (onCompleted: (data: DevExpress.Dashboard.Data.ItemUnderlyingData) => void, dataMembers: string[]) => void;
    }
    export interface ItemMasterFilterStateChangedEventArgs extends DashboardItemBaseEventArgs {
        values: Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>;
    }
    export interface ItemDrillDownStateChangedEventArgs extends DashboardItemBaseEventArgs {
        values: Array<DevExpress.Dashboard.Data.PrimitiveType>;
        action: "Down" | "Up";
    }
    export interface ItemActionAvailabilityChangedEventArgs extends DashboardItemBaseEventArgs {
    }
    export interface ItemSelectionChangedEventArgs extends DashboardItemBaseEventArgs {
        getCurrentSelection: () => Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
    }
    export interface SelectedTabPageChangedEventArgs {
        tabContainerName: string;
        selectedPage: string;
        previousPage: string;
    }
    export interface ItemCaptionToolbarUpdatedEventArgs extends DashboardItemBaseEventArgs {
        options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    }
    export interface DashboardTitleToolbarUpdatedEventArgs {
        dashboard: DevExpress.Dashboard.Model.Dashboard;
        options: DevExpress.Dashboard.DashboardTitleToolbarOptions;
    }
}
declare module DevExpress.Dashboard {
    import GridBaseColumn = DevExpress.ui.GridBaseColumn;
    import Widget = DevExpress.ui.Widget;
    import dxCircularGaugeOptions = DevExpress.viz.dxCircularGaugeOptions;
    import dxChartSeries = DevExpress.viz.dxChartSeries;
    import dxLinearGaugeOptions = DevExpress.viz.dxLinearGaugeOptions;
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import Gauge = DevExpress.Dashboard.Model.Gauge;
    import GaugeItem = DevExpress.Dashboard.Model.GaugeItem;
    import GridColumn = DevExpress.Dashboard.Model.GridColumn;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import DashboardItemBaseEventArgs = DevExpress.Dashboard.DashboardItemBaseEventArgs;
    export interface ItemWidgetBaseEventArgs extends DashboardItemBaseEventArgs {
        itemData: DevExpress.Dashboard.Data.ItemData;
        chartContext?: ChartContext;
        gridContext?: GridContext;
        gaugeContext?: GaugeContext;
    }
    export interface ItemWidgetOptionEventArgs extends ItemWidgetBaseEventArgs {
        options: Object;
    }
    export interface ItemWidgetEventArgs extends ItemWidgetBaseEventArgs {
        getWidget: () => DevExpress.ui.Widget<any> | Element;
    }
    export class ChartContext {
        private _dashboardItem;
        constructor(_dashboardItem: DevExpress.Dashboard.Model.ChartItem);
        getDashboardItemSeries(seriesOptions: DevExpress.viz.dxChartSeries): DevExpress.Dashboard.Model.ChartSeries;
    }
    export class GridContext {
        private _dashboardItem;
        constructor(_dashboardItem: DevExpress.Dashboard.Model.GridItem);
        getDashboardItemColumn(columnOptions: DevExpress.ui.GridBaseColumn): DevExpress.Dashboard.Model.GridColumn;
    }
    export class GaugeContext {
        private _dashboardItem;
        constructor(_dashboardItem: DevExpress.Dashboard.Model.GaugeItem);
        getDashboardItemGauge(gaugeOptions: DevExpress.viz.dxLinearGaugeOptions | DevExpress.viz.dxCircularGaugeOptions): DevExpress.Dashboard.Model.Gauge;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import Widget = DevExpress.ui.Widget;
    import ItemUnderlyingData = DevExpress.Dashboard.Data.ItemUnderlyingData;
    import RequestUnderlyingDataParameters = DevExpress.Dashboard.Data.RequestUnderlyingDataParameters;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import ItemClickEventArgs = DevExpress.Dashboard.ItemClickEventArgs;
    import ItemElementCustomColorEventArgs = DevExpress.Dashboard.ItemElementCustomColorEventArgs;
    import ItemSelectionChangedEventArgs = DevExpress.Dashboard.ItemSelectionChangedEventArgs;
    import ItemVisualInteractivityEventArgs = DevExpress.Dashboard.ItemVisualInteractivityEventArgs;
    import ItemWidgetEventArgs = DevExpress.Dashboard.ItemWidgetEventArgs;
    import ItemWidgetOptionEventArgs = DevExpress.Dashboard.ItemWidgetOptionEventArgs;
    export const createItemClickEventArgs: (dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataPoint: DevExpress.Dashboard.Internal.Viewer.DataPoint, requestUnderlyingDataFunc: (itemName: string, args: DevExpress.Dashboard.Data.RequestUnderlyingDataParameters, onCompleted: (result: DevExpress.Dashboard.Data.ItemUnderlyingData) => void) => void) => DevExpress.Dashboard.ItemClickEventArgs;
    export const createItemSelectionChangedEventArgs: (dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, tuples: any) => DevExpress.Dashboard.ItemSelectionChangedEventArgs;
    export const createItemElementCustomColorEventArgs: (dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, eventArgs: any) => DevExpress.Dashboard.ItemElementCustomColorEventArgs;
    export const createItemInteractivityEventArgs: (dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, interactivityOptions: any) => DevExpress.Dashboard.ItemVisualInteractivityEventArgs;
    export const createWidgetEventArgs: (dashboardItem: DevExpress.Dashboard.Model.DashboardItem, widget: DevExpress.ui.Widget<any> | Element) => DevExpress.Dashboard.ItemWidgetEventArgs;
    export const createWidgetOptionsEventArgs: (dashboardItem: DevExpress.Dashboard.Model.DashboardItem, options: Object) => DevExpress.Dashboard.ItemWidgetOptionEventArgs;
}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import RequestUnderlyingDataParameters = DevExpress.Dashboard.Data.RequestUnderlyingDataParameters;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
    export interface RawUnderlyingData {
        Data: Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>;
        DataMembers: Array<string>;
        DataMembersDisplayNames: Array<string>;
        ErrorMessage?: string;
    }
    export interface IUnderlyingDataProvider {
        requestUnderlyingData(dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, args: DevExpress.Dashboard.Data.RequestUnderlyingDataParameters): JQueryPromise<RawUnderlyingData>;
    }
    export class UnderlyingDataProvider {
        private _serviceClient;
        constructor(_serviceClient: DevExpress.Dashboard.Internal.IDataServiceClient);
        _getValidDataQueryParamsValues(values: Array<any>, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem): any;
        _getUnderlyingDataArgsAxisPoints(data: DevExpress.Dashboard.Internal.Data.itemData, args: DevExpress.Dashboard.Data.RequestUnderlyingDataParameters): DevExpress.Dashboard.Data.ItemDataAxisPoint[];
        requestUnderlyingData(dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, args: DevExpress.Dashboard.Data.RequestUnderlyingDataParameters): JQueryPromise<RawUnderlyingData>;
    }
}
declare module DevExpress.Dashboard {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import ItemUnderlyingData = DevExpress.Dashboard.Data.ItemUnderlyingData;
    import RangeFilterSelection = DevExpress.Dashboard.Data.RangeFilterSelection;
    import RequestUnderlyingDataParameters = DevExpress.Dashboard.Data.RequestUnderlyingDataParameters;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import MasterFilterValues = DevExpress.Dashboard.Model.MasterFilterValues;
    import DashboardTitleToolbarUpdatedEventArgs = DevExpress.Dashboard.DashboardTitleToolbarUpdatedEventArgs;
    import ItemActionAvailabilityChangedEventArgs = DevExpress.Dashboard.ItemActionAvailabilityChangedEventArgs;
    import ItemCaptionToolbarUpdatedEventArgs = DevExpress.Dashboard.ItemCaptionToolbarUpdatedEventArgs;
    import ItemClickEventArgs = DevExpress.Dashboard.ItemClickEventArgs;
    import ItemDrillDownStateChangedEventArgs = DevExpress.Dashboard.ItemDrillDownStateChangedEventArgs;
    import ItemElementCustomColorEventArgs = DevExpress.Dashboard.ItemElementCustomColorEventArgs;
    import ItemMasterFilterStateChangedEventArgs = DevExpress.Dashboard.ItemMasterFilterStateChangedEventArgs;
    import ItemSelectionChangedEventArgs = DevExpress.Dashboard.ItemSelectionChangedEventArgs;
    import ItemVisualInteractivityEventArgs = DevExpress.Dashboard.ItemVisualInteractivityEventArgs;
    import SelectedTabPageChangedEventArgs = DevExpress.Dashboard.SelectedTabPageChangedEventArgs;
    import ItemWidgetEventArgs = DevExpress.Dashboard.ItemWidgetEventArgs;
    import ItemWidgetOptionEventArgs = DevExpress.Dashboard.ItemWidgetOptionEventArgs;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    /**
     * @docid dxDashboardControlOptions.extensions.viewerApi
     * @type object
     * @public
     */
    export interface ViewerApiExtensionOptions {
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemClick
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemClick?: (args: DevExpress.Dashboard.ItemClickEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemSelectionChanged
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemSelectionChanged?: (args: DevExpress.Dashboard.ItemSelectionChangedEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemWidgetCreated
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemWidgetCreated?: (args: DevExpress.Dashboard.ItemWidgetEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemWidgetUpdating
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemWidgetUpdating?: (args: DevExpress.Dashboard.ItemWidgetEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemWidgetUpdated
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemWidgetUpdated?: (args: DevExpress.Dashboard.ItemWidgetEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemWidgetOptionsPrepared
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemWidgetOptionsPrepared?: (args: DevExpress.Dashboard.ItemWidgetOptionEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemElementCustomColor
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemElementCustomColor?: (args: DevExpress.Dashboard.ItemElementCustomColorEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemVisualInteractivity
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemVisualInteractivity?: (args: DevExpress.Dashboard.ItemVisualInteractivityEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemMasterFilterStateChanged
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemMasterFilterStateChanged?: (args: DevExpress.Dashboard.ItemMasterFilterStateChangedEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemDrillDownStateChanged
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemDrillDownStateChanged?: (args: DevExpress.Dashboard.ItemDrillDownStateChangedEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemActionAvailabilityChanged
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemActionAvailabilityChanged?: (args: DevExpress.Dashboard.ItemActionAvailabilityChangedEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onItemCaptionToolbarUpdated
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onItemCaptionToolbarUpdated?: (args: DevExpress.Dashboard.ItemCaptionToolbarUpdatedEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onDashboardTitleToolbarUpdated
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onDashboardTitleToolbarUpdated?: (args: DevExpress.Dashboard.DashboardTitleToolbarUpdatedEventArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.viewerApi.onSelectedTabPageChanged
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onSelectedTabPageChanged?: (args: DevExpress.Dashboard.SelectedTabPageChangedEventArgs) => void;
    }
    export type ViewerApiExtensionEvents = {
        itemClick: DevExpress.Dashboard.ItemClickEventArgs;
        itemSelectionChanged: DevExpress.Dashboard.ItemSelectionChangedEventArgs;
        itemWidgetCreated: DevExpress.Dashboard.ItemWidgetEventArgs;
        itemWidgetUpdating: DevExpress.Dashboard.ItemWidgetEventArgs;
        itemWidgetUpdated: DevExpress.Dashboard.ItemWidgetEventArgs;
        itemWidgetOptionsPrepared: DevExpress.Dashboard.ItemWidgetOptionEventArgs;
        itemElementCustomColor: DevExpress.Dashboard.ItemElementCustomColorEventArgs;
        itemVisualInteractivity: DevExpress.Dashboard.ItemVisualInteractivityEventArgs;
        itemMasterFilterStateChanged: DevExpress.Dashboard.ItemMasterFilterStateChangedEventArgs;
        itemDrillDownStateChanged: DevExpress.Dashboard.ItemDrillDownStateChangedEventArgs;
        itemActionAvailabilityChanged: DevExpress.Dashboard.ItemActionAvailabilityChangedEventArgs;
        itemCaptionToolbarUpdated: DevExpress.Dashboard.ItemCaptionToolbarUpdatedEventArgs;
        dashboardTitleToolbarUpdated: DevExpress.Dashboard.DashboardTitleToolbarUpdatedEventArgs;
        selectedTabPageChanged: DevExpress.Dashboard.SelectedTabPageChangedEventArgs;
    };
    export class ViewerApiExtension extends DisposableObject implements ISupportOptionExtension<ViewerApiExtensionOptions> {
        name: string;
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<ViewerApiExtensionOptions, ViewerApiExtensionEvents>;
        private _viewerApi;
        on: DevExpress.Dashboard.Internal.EventSubscriber<ViewerApiExtensionEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<ViewerApiExtensionEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: ViewerApiExtensionOptions);
        start(): void;
        stop(): void;
        requestUnderlyingData: (itemName: string, args: DevExpress.Dashboard.Data.RequestUnderlyingDataParameters, onCompleted: (result: DevExpress.Dashboard.Data.ItemUnderlyingData) => void) => void;
        getCurrentRange(itemName: string): DevExpress.Dashboard.Data.RangeFilterSelection;
        getEntireRange(itemName: string): DevExpress.Dashboard.Data.RangeFilterSelection;
        setRange(itemName: string, range: DevExpress.Dashboard.Data.RangeFilterSelection): void;
        setPredefinedRange(itemName: string, dateTimePeriodName: string): void;
        getAvailablePredefinedRanges(itemName: string): Array<string>;
        getCurrentPredefinedRange(itemName: string): string;
        getCurrentSelection(itemName: string): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        canSetMasterFilter(itemName: string): boolean;
        canClearMasterFilter(itemName: string): boolean;
        canPerformDrillDown(itemName: string): boolean;
        canPerformDrillUp(itemName: string): boolean;
        getItemData(itemName: string): DevExpress.Dashboard.Data.ItemData;
        getCurrentFilterValues(itemName: string): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        getAvailableFilterValues(itemName: string): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        getCurrentDrillDownValues(itemName: string): DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
        getAvailableDrillDownValues(itemName: string): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        setMasterFilter(itemName: string, values: DevExpress.Dashboard.Model.MasterFilterValues): void;
        clearMasterFilter(itemName: string): void;
        performDrillDown(itemName: string, value: DevExpress.Dashboard.Data.PrimitiveType | DevExpress.Dashboard.Data.ItemDataAxisPointTuple): void;
        performDrillUp(itemName: string): void;
        getAvailableActions(itemName: string): Array<string>;
        updateItemCaptionToolbar(itemName?: string): void;
        updateDashboardTitleToolbar(): void;
        setSelectedTabPage(tabPageName: string): void;
        setSelectedTabPageIndex(tabContainerName: string, index: number): void;
        getSelectedTabPageIndex(tabContainerName: string): number;
        getSelectedTabPage(tabContainerName: string): string;
    }
}
declare module DevExpress.Dashboard.Internal {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    export function findItemForApi<T extends DevExpress.Dashboard.Model.DashboardItem>(dashboard: DevExpress.Dashboard.Model.Dashboard, itemName: string, expectedItemClass?: any): T;
}
declare module DevExpress.Dashboard.Internal {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import ItemUnderlyingData = DevExpress.Dashboard.Data.ItemUnderlyingData;
    import RangeFilterSelection = DevExpress.Dashboard.Data.RangeFilterSelection;
    import RequestUnderlyingDataParameters = DevExpress.Dashboard.Data.RequestUnderlyingDataParameters;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import MasterFilterValues = DevExpress.Dashboard.Model.MasterFilterValues;
    import IDashboardTitle = DevExpress.Dashboard.Internal.Viewer.IDashboardTitle;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ViewerApiExtensionEvents = DevExpress.Dashboard.ViewerApiExtensionEvents;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    export type ViewerApiEvents = DevExpress.Dashboard.ViewerApiExtensionEvents;
    export let viewerApiEventsNames: Array<keyof ViewerApiEvents>;
    export class ViewerApi extends DisposableObject {
        private dashboardControl;
        private _viewerItems;
        private _dashboardDisposables;
        private _internalEvents;
        title: ko.Observable<DevExpress.Dashboard.Internal.Viewer.IDashboardTitle>;
        on: DevExpress.Dashboard.Internal.EventSubscriber<ViewerApiEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<ViewerApiEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        private _checkIsRangeFilterItem;
        private _viewerItemCreated;
        private _viewerItemDispose;
        private _beforeApplyViewerItemOptions;
        private _raiseItemActionAvailabilityChanged;
        private _raiseItemClick;
        private _raiseItemSelectionChanged;
        private _raiseItemWidgetCreated;
        private _raiseItemWidgetUpdating;
        private _raiseItemWidgetUpdated;
        private _raiseItemWidgetOptionsPrepared;
        private _raiseItemCaptionToolbarUpdated;
        private _raiseTitleToolbarUpdated;
        private _raiseSelectedTabPageChanged;
        private _raiseItemElementCustomColor;
        private _raiseItemVisualInteractivity;
        private _raiseClearMasterFilter;
        start(): void;
        stop(): void;
        private _getItemCore;
        private _getItem;
        private _getDataItem;
        requestUnderlyingData: (itemName: string, args: DevExpress.Dashboard.Data.RequestUnderlyingDataParameters, onCompleted: (result: DevExpress.Dashboard.Data.ItemUnderlyingData) => void) => void;
        getCurrentRange(itemName: string): DevExpress.Dashboard.Data.RangeFilterSelection;
        getEntireRange(itemName: string): DevExpress.Dashboard.Data.RangeFilterSelection;
        setRange(itemName: string, range: DevExpress.Dashboard.Data.RangeFilterSelection): void;
        setPredefinedRange(itemName: string, dateTimePeriodName: string): void;
        getAvailablePredefinedRanges(itemName: string): Array<string>;
        getCurrentPredefinedRange(itemName: string): string;
        getCurrentSelection(itemName: string): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        canSetMasterFilter(itemName: string): boolean;
        canClearMasterFilter(itemName: string): boolean;
        canPerformDrillDown(itemName: string): boolean;
        canPerformDrillUp(itemName: string): boolean;
        getItemData(itemName: string): DevExpress.Dashboard.Data.ItemData;
        getCurrentFilterValues(itemName: string): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        getAvailableFilterValues(itemName: string): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        getCurrentDrillDownValues(itemName: string): DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
        getAvailableDrillDownValues(itemName: string): Array<DevExpress.Dashboard.Data.ItemDataAxisPointTuple>;
        setMasterFilter(itemName: string, values: DevExpress.Dashboard.Model.MasterFilterValues): void;
        clearMasterFilter(itemName: string): void;
        performDrillDown(itemName: string, value: DevExpress.Dashboard.Data.PrimitiveType | DevExpress.Dashboard.Data.ItemDataAxisPointTuple): void;
        performDrillUp(itemName: string): void;
        getAvailableActions(itemName: string): Array<string>;
        updateItemCaptionToolbar(itemName?: string): void;
        updateDashboardTitleToolbar(): void;
        setSelectedTabPage(tabPageName: string): void;
        setSelectedTabPageIndex(tabContainerName: string, index: number): void;
        getSelectedTabPageIndex(tabContainerName: string): number;
        getSelectedTabPage(tabContainerName: string): string;
        private _findParentTabContainer;
        private _getViewerItem;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardExportExtension = DevExpress.Dashboard.DashboardExportExtension;
    import DashboardParameterDialogExtension = DevExpress.Dashboard.DashboardParameterDialogExtension;
    import ViewerApi = DevExpress.Dashboard.Internal.ViewerApi;
    import TitleComponentOptions = DevExpress.Dashboard.Internal.TitleComponentOptions;
    export class DashboardTitleContext extends DisposableObject implements IDashboardTitleContext {
        constructor(encodeHtml: boolean, findExtension: (name: string) => DevExpress.Dashboard.IExtension, allowExport: boolean, viewerApi: DevExpress.Dashboard.Internal.ViewerApi);
        encodeHtml: boolean;
        parametersExtension: ko.Computed<DevExpress.Dashboard.DashboardParameterDialogExtension>;
        exportExtension: ko.Computed<DevExpress.Dashboard.DashboardExportExtension>;
        viewerApi: DevExpress.Dashboard.Internal.ViewerApi;
    }
    export interface IDashboardTitleContext {
        encodeHtml: boolean;
        parametersExtension: ko.Computed<DevExpress.Dashboard.DashboardParameterDialogExtension>;
        exportExtension: ko.Computed<DevExpress.Dashboard.DashboardExportExtension>;
        viewerApi: DevExpress.Dashboard.Internal.ViewerApi;
    }
    export type DashboardTitleKoComponentArgs = {
        options: ko.Subscribable<DevExpress.Dashboard.Internal.TitleComponentOptions>;
        width: ko.Subscribable<number>;
        height: ko.Subscribable<number>;
        encodeHtml: boolean;
        className?: string;
    };
    export class DashboardTitleComponent extends DisposableObject {
        private params;
        private container;
        private controlContainer;
        constructor(params: DashboardTitleKoComponentArgs, container: HTMLElement, controlContainer: HTMLElement);
        initialize(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IDashboardTitle = DevExpress.Dashboard.Internal.Viewer.IDashboardTitle;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import DashboardTitleToolbarOptions = DevExpress.Dashboard.DashboardTitleToolbarOptions;
    import IDashboardTitleContext = DevExpress.Dashboard.Internal.IDashboardTitleContext;
    export let maxFilterValuesCount: number;
    export interface TitleComponentOptions {
        toolbarOptions: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
        centerAligned?: boolean;
        allowHideEmptyToolbar: boolean;
    }
    export function masterFilterValues(dashboard: DevExpress.Dashboard.Model.Dashboard): any[];
    export class DashboardTitleModel extends DisposableObject implements IDashboardTitle {
        private context;
        private dashboard;
        private customizeToolbarOptions?;
        onUpdated: JQuery.Callbacks<Function>;
        toolbarOptions: ko.Observable<TitleComponentOptions>;
        showTitle: ko.Computed<boolean>;
        private viewModel;
        private masterFilterValues;
        private parametersExtension;
        private exportExtension;
        private viewerApi;
        private allowShowExportDialog;
        constructor(context: DevExpress.Dashboard.Internal.IDashboardTitleContext, dashboard: DevExpress.Dashboard.Model.Dashboard, customizeToolbarOptions?: (options: DevExpress.Dashboard.DashboardTitleToolbarOptions) => void);
        update(): void;
        dispose(): void;
        private _raiseUpdated;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export const VALUE_EXPR = "value";
    export const KEY_EXPR = "key";
    export interface dataSourceItem {
        [KEY_EXPR]: number;
        [VALUE_EXPR]: any;
        text?: string;
        html?: string;
        isAll?: boolean;
    }
    export class filterElementDataController extends dataControllerBase {
        dataSource: dataSourceItem[];
        selection: dataSourceItem[];
        fullSelection: dataSourceItem[];
        constructor(options: any);
        getAllItemIndex(): number;
        getDataSourceItemKey(item: dataSourceItem): number;
        getDataSourceItemByKey(key: number): dataSourceItem;
        isAllSelected(): boolean;
        update(selectedValues: any, encodeHtml: any, selectionOnly?: boolean): void;
        getInteractionValues(elements: any, selectedValues: any): any[];
        _getDataValue(wrappedValue: any): any;
        _reset(selectionOnly?: boolean): void;
    }
    export class listViewDataController extends filterElementDataController {
        ListBoxType: {
            Checked: string;
            Radio: string;
        };
        ComboBoxType: {
            Standard: string;
            Checked: string;
        };
        constructor(options: any);
        isMultiselectable(): boolean;
    }
    export class treeViewDataController extends filterElementDataController {
        constructor(options: any);
        isMultiselectable(): boolean;
        getAllItemIndex(): number;
        isAllSelected(): boolean;
        update(selectedValues: any, encodeHtml: any, selectionOnly?: boolean): void;
        getInteractionValues(elements: any, selectedValues: any): any;
        private _updateSelection;
        private _getDataNullChildCount;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export let dashboardSelectionMode: {
        none: string;
        single: string;
        multiple: string;
    };
    export let interactivityController: any;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DataSource = DevExpress.data.DataSource;
    import filterElementDataController = DevExpress.Dashboard.Internal.Data.filterElementDataController;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    export abstract class filterElementBaseItem extends baseItem {
        widget: any;
        protected abstract get filterDataController(): DevExpress.Dashboard.Internal.Data.filterElementDataController;
        constructor(container: HTMLElement, options: any);
        dispose(): void;
        protected _setSelectionUnsafe(values: any): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected _createWidgetDiv(): HTMLDivElement;
        protected _initializeData(newOptions: any): void;
        get allowMultiselection(): boolean;
        set allowMultiselection(value: boolean);
        protected get isMultiSelectable(): boolean;
        protected _isPaneEmpty(): boolean;
        updateInteractivityOptions(): void;
        getDataSource(): DevExpress.data.DataSource;
        protected get _enableSearch(): boolean;
        protected get _isBottomFloatingToolbarPosition(): boolean;
        _isBorderRequired(): boolean;
        _getDisplayExpr(): "text" | "html";
        _getOptions(includeActions: any): Object;
        _hasToggleSelectionModeButton(): boolean;
        protected _resizeUnsafe(): void;
        _raiseItemClick(elements: any[]): void;
        _mustSelectingFired(values: any): boolean;
        _isUpdating(widget: any): boolean;
        protected _applySelectionUnsafe(): void;
        _selectTuples(tuplesToSelect: any, unaffectedTuples: any, isSelect: any): void;
        _getWidget(): any;
        _getWidgetName(): string;
        _createWidget(div: HTMLElement, opts: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxSelectBox = DevExpress.ui.dxSelectBox;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import filterElementDataController = DevExpress.Dashboard.Internal.Data.filterElementDataController;
    import listViewDataController = DevExpress.Dashboard.Internal.Data.listViewDataController;
    import filterElementBaseItem = DevExpress.Dashboard.Internal.Viewer.filterElementBaseItem;
    export let cssComboBoxClassNames: {
        item: string;
        multiText: string;
        margins: string;
    };
    export class comboBoxFilterElement extends filterElementBaseItem {
        _dataController: DevExpress.Dashboard.Internal.Data.listViewDataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        protected get filterDataController(): DevExpress.Dashboard.Internal.Data.filterElementDataController;
        protected get _shouldApplySelectionOnInitialRender(): boolean;
        constructor(container: HTMLElement, options: any);
        protected _setSelectionUnsafe(values: any): void;
        protected _clearSelectionUnsafe(): void;
        protected get _isBottomFloatingToolbarPosition(): boolean;
        protected get _allowPreview(): boolean;
        _getWidgetName(): "dxSelectBox" | "dxTagBox";
        protected _createWidgetDiv(): HTMLDivElement;
        _createWidget(div: HTMLElement, opts: any): DevExpress.ui.dxSelectBox<any>;
        _getMinContentHeight(): any;
        _generateInnerBorderClassesUnsafe(element: HTMLElement): string[];
        _getSelectedKeys(): number | number[] | null;
        _getOptions(includeActions: any): Object;
        protected _resizeUnsafe(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    export type CalendarZoomLevel = "century" | "decade" | "month" | "year";
    export class CalendarHelper {
        static getCalendarMaxZoomLevel(groupInterval: DevExpress.Dashboard.Model.DateTimeGroupInterval): CalendarZoomLevel;
        static getCalendarType(groupInterval: DevExpress.Dashboard.Model.DateTimeGroupInterval): "date" | "datetime" | "time";
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DateTimeFormatViewModel = DevExpress.Dashboard.Internal.Data.DateTimeFormatViewModel;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    export type DateFilterType = "Between" | "After" | "Before" | "Exact";
    export type DateFilterArrangementMode = "AutoHeight" | "Horizontal" | "Vertical";
    export type DatePickerLocation = "Far" | "Near" | "Hidden";
    export type VisibleComponents = "All" | "DatePicker" | "QuickFilters";
    export let dateFilterWidgetClassNames: {
        widget: string;
        buttons: string;
        buttonsNoPaddings: string;
        buttonsLeftToRight: string;
        buttonsTopDown: string;
        button: string;
        datePickerButtonEmpty: string;
        overlayWrapper: string;
        overlay: string;
        mobile: string;
        overlayCalendarContainer: string;
        overlayCalendar: string;
        overlayTextBox: string;
        overlayButton: string;
    };
    export interface DateFilterViewModel {
        FilterType: DateFilterType;
        ArrangementMode: DateFilterArrangementMode;
        DatePickerLocation: DatePickerLocation;
        DisplayTextPattern: string;
        DateTimePeriods: Array<DateTimePeriodViewModel>;
        GroupInterval: any;
        DateTimeFormat: DevExpress.Dashboard.Internal.Data.DateTimeFormatViewModel;
        MinimumId: string;
        MaximumId: string;
    }
    export interface DateTimePeriodViewModel {
        Name: string;
    }
    export class DateFilterWidgetOptions {
        filterType?: DateFilterType;
        arrangementMode?: DateFilterArrangementMode;
        datePickerLocation?: DatePickerLocation;
        displayTextPattern?: string;
        groupInterval?: DevExpress.Dashboard.Model.DateTimeGroupInterval;
        format?: (value: any) => string;
        valueChanged?: (values: any[]) => void;
        buttonClick?: (name: string) => void;
        buttonsInfo?: string[];
        startDate?: Date;
        endDate?: Date;
        minimum?: Date;
        maximum?: Date;
        clearAction?: () => void;
        hasOuterMargin?: boolean;
        mobileLayout?: boolean;
    }
    export class DatePickerButtonElement {
        text?: string;
        icon?: string;
        key: string;
    }
    export class DatePickerButtons {
        private dropDownButton;
        checkButton: DatePickerButtonElement;
        showDropDown: boolean;
        get text(): string;
        set text(value: string);
        constructor();
        getButtons(): DatePickerButtonElement[];
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import Widget = DevExpress.ui.Widget;
    export class PopupCalendarWidgets {
        calendarWidget: DevExpress.ui.Widget<any>;
        private _widgetsToDispose;
        constructor(calendarWidget: DevExpress.ui.Widget<any>, ..._widgetsToDispose: DevExpress.ui.Widget<any>[]);
        dispose(): void;
    }
}
declare module DevExpress.Dashboard {
    import DxElement = DevExpress.core.DxElement;
    import dxButtonGroup = DevExpress.ui.dxButtonGroup;
    import dxCalendar = DevExpress.ui.dxCalendar;
    import dxOverlay = DevExpress.ui.dxOverlay;
    import dxOverlayOptions = DevExpress.ui.dxOverlayOptions;
    import DateFilterWidgetOptions = DevExpress.Dashboard.Internal.Viewer.DateFilterWidgetOptions;
    import DatePickerButtons = DevExpress.Dashboard.Internal.Viewer.DatePickerButtons;
    import PopupCalendarWidgets = DevExpress.Dashboard.Internal.Viewer.PopupCalendarWidgets;
    export class DateFilterWidget {
        private boundaryElementContainer;
        private _defaultButtonText;
        private _dropDownContentDiv;
        private _datePickerDiv;
        private _widgetDiv;
        private _scrollableContent;
        private _overlayShown;
        private _lockSelectionEvents;
        private _updateScrollableContainer;
        private _getBtnsContainerScrollWidth;
        private _parent;
        _datePickerContent: DevExpress.Dashboard.Internal.Viewer.DatePickerButtons;
        _options: DevExpress.Dashboard.Internal.Viewer.DateFilterWidgetOptions;
        _startDate: Date;
        _endDate: Date;
        _overlay: DevExpress.ui.dxOverlay<dxOverlayOptions<any>>;
        quickButtons: Array<DevExpress.ui.dxButtonGroup>;
        datePickerButton: DevExpress.ui.dxButtonGroup;
        get calendarFrom(): DevExpress.ui.dxCalendar;
        get calendarTo(): DevExpress.ui.dxCalendar;
        _calendarWidgetsFrom: DevExpress.Dashboard.Internal.Viewer.PopupCalendarWidgets;
        _calendarWidgetsTo: DevExpress.Dashboard.Internal.Viewer.PopupCalendarWidgets;
        constructor(element: HTMLElement, viewerOptions: any, boundaryElementContainer: HTMLElement);
        element(): DevExpress.core.DxElement;
        _update(widgetOptions: DevExpress.Dashboard.Internal.Viewer.DateFilterWidgetOptions): void;
        _getHeight(): number;
        _updateSize(width: number, height: number): void;
        _setSelectedValues(values: any[]): void;
        _setPeriod(periodIndex: number): void;
        _clearSelectedPeriods(): void;
        _clearSelectedValues(): void;
        _submit(): void;
        private _applyValues;
        private _addDatePicker;
        private _getStartCalendarValue;
        private _getEndCalendarValue;
        private _createDiv;
        private _createButtonsDiv;
        private _createDropDownContent;
        private _createDatePicker;
        private _createDesktopCalendar;
        private _createMobileCalendar;
        private _createCalendar;
        private _createTextBox;
        private _createSubmitButton;
        private _processItemClick;
        private _updateDropDownButtonText;
        private _getDefaultOptions;
        private _addClass;
        private _removeClass;
        private _dispose;
        _disposeWithElement(): void;
        dispose(): void;
        private _getOverlayOptions;
        private _getOverlayWidth;
        private _setDatePickerText;
        private _selectQuickButton;
        private _showPopup;
        private _setDatePickerBtnState;
        private _onDatePickerUnchecked;
        private _performWithLockedEvents;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import DateFilterWidget = DevExpress.Dashboard.DateFilterWidget;
    import DateFilterWidgetOptions = DevExpress.Dashboard.Internal.Viewer.DateFilterWidgetOptions;
    export let cssDateFilterClassNames: {
        item: string;
    };
    export class dateFilterElement extends baseItem {
        static readonly MinMeasureId: string;
        static readonly MaxMeasureId: string;
        widget: DevExpress.Dashboard.DateFilterWidget;
        timePeriodMenuSelectedIndex: number;
        predefinedRangeChanged: (rangeName: any) => void;
        protected get _allowPreview(): boolean;
        constructor(container: HTMLElement, options: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions);
        _getMinContentHeight(): number;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected getInfoUnsafe(): {
            selectedPeriodName: any;
            name: string;
            headerHeight: number;
            position: JQuery.Coordinates;
            width: number;
            height: number;
            virtualSize: any;
            scroll: any;
        };
        protected _setSelectionUnsafe(values: any): void;
        protected _clearSelectionUnsafe(): void;
        protected _initializeData(newOptions: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions): void;
        _clearSelectedValues(): void;
        _applySelectionToWidget(): void;
        getWidgetOptions(): DevExpress.Dashboard.Internal.Viewer.DateFilterWidgetOptions;
        _mobileLayout(): boolean;
        _convertSelectedValues(value: any): Date;
        _getCurrentPredefinedRange(): any;
        _setPredefinedRange(dateTimePeriodName: string): void;
        _ensureYearValue(value: any): any;
        _updateContentSizeUnsafe(): void;
        protected _getWidget(): DevExpress.Dashboard.DateFilterWidget;
        _isBorderRequired(): boolean;
        protected _isPaneEmpty(): boolean;
        _isTransparentBackground(): boolean;
        _generateInnerBorderClassesUnsafe(element: HTMLElement): string[];
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxList = DevExpress.ui.dxList;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import dataSourceItem = DevExpress.Dashboard.Internal.Data.dataSourceItem;
    import filterElementDataController = DevExpress.Dashboard.Internal.Data.filterElementDataController;
    import filterElementBaseItem = DevExpress.Dashboard.Internal.Viewer.filterElementBaseItem;
    export let cssListBoxClassNames: {
        borderVisible: string;
        separatorHidden: string;
        list: string;
        item: string;
        emptyMessage: string;
    };
    export class listFilterElement extends filterElementBaseItem {
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        protected get filterDataController(): DevExpress.Dashboard.Internal.Data.filterElementDataController;
        constructor(container: HTMLElement, options: any);
        protected _setSelectionUnsafe(values: any): void;
        protected _clearSelectionUnsafe(): void;
        _generateInnerBorderClassesUnsafe(element: HTMLElement): string[];
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _getWidgetName(): string;
        _createWidget(div: HTMLElement, opts: any): DevExpress.ui.dxList<any, any>;
        _getSelection(): DevExpress.Dashboard.Internal.Data.dataSourceItem[];
        _getOptions(includeActions: any): Object;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxTreeList = DevExpress.ui.dxTreeList;
    import dxTreeView = DevExpress.ui.dxTreeView;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import filterElementDataController = DevExpress.Dashboard.Internal.Data.filterElementDataController;
    import filterElementBaseItem = DevExpress.Dashboard.Internal.Viewer.filterElementBaseItem;
    export let cssTreeViewClassNames: {
        borderVisible: string;
        topBorder: string;
        item: string;
    };
    export class treeViewFilterElement extends filterElementBaseItem {
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        protected get filterDataController(): DevExpress.Dashboard.Internal.Data.filterElementDataController;
        protected _setSelectionUnsafe(values: any): void;
        _generateInnerBorderClassesUnsafe(element: HTMLElement): string[];
        protected _clearSelectionUnsafe(): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _getWidgetName(): "dxTreeView" | "dxTreeList";
        _createWidget(div: HTMLElement, opts: any): DevExpress.ui.dxTreeView<any> | DevExpress.ui.dxTreeList<any, any>;
        _getOptions(includeActions: any): Object;
        private _fillChildren;
        private _getSelectedBranches;
        private _onScrollChanged;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export let types: {
        group: string;
        page: string;
        tabPage: string;
        tabContainer: string;
        rangeFilter: string;
        chart: string;
        scatter: string;
        pie: string;
        card: string;
        grid: string;
        pivot: string;
        gauge: string;
        text: string;
        image: string;
        boundImage: string;
        map: string;
        choroplethMap: string;
        geoPointMap: string;
        bubbleMap: string;
        pieMap: string;
        comboBox: string;
        listBox: string;
        treeView: string;
        treemap: string;
        dateFilter: string;
        custom: string;
    };
    export type ViewerItemType = typeof types[keyof typeof types];
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    export type WidgetsViewerArrangerMethod = "auto" | "row" | "column";
    export type WidgetsViewerWidgetType = "card" | "chart" | "pieChart" | "lineargauge" | "circulargauge";
    export type WidgetsViewerArrangerAlign = "left" | "center";
    export interface WidgetsViewerViewerOptions {
        hoverEnabled?: boolean;
        align?: WidgetsViewerArrangerAlign;
        overflow?: "auto";
        method?: WidgetsViewerArrangerMethod;
        count?: number;
        widgetType?: WidgetsViewerWidgetType;
        redrawOnResize?: boolean;
        onclick?: (e: any) => void;
        onhover?: (e: any) => void;
        onRenderComplete?: (e: any) => void;
        onAllItemsRenderComplete?: () => void;
        bulkTimesRenderingTimeInterval?: number;
        useNativeScrolling?: "auto" | boolean;
        ignorePadding?: boolean;
        supportAnimation?: boolean;
    }
    export interface WidgetsViewerItemOptions {
        encodeHtml: boolean;
        minWidth: number;
        proportions: number;
        ignoreProportions: boolean;
        itemMargin: {
            width: number;
            height: number;
        };
        borderWidth: number;
        hasSparkline: boolean;
        widgetType?: WidgetsViewerWidgetType;
        hoverEnabled?: boolean;
        isSelected?: boolean;
        cursor?: any;
        tag?: any;
        parentRootElement?: HTMLElement;
        layouts?: DevExpress.Dashboard.Internal.Viewer.cardLayout[];
    }
    export interface WidgetsViewerOptions {
        dataSource?: Array<any>;
        viewer?: WidgetsViewerViewerOptions;
        itemOptions?: WidgetsViewerItemOptions;
        useFlex?: boolean;
    }
    export abstract class WidgetsViewerBase {
        element(): HTMLElement;
        private _optionManager;
        option(): WidgetsViewerOptions;
        option(name: string): any;
        option(name: string, value: any): any;
        option(args: WidgetsViewerOptions): any;
        get _option(): WidgetsViewerOptions;
        _element: HTMLElement;
        protected _initalized: boolean;
        constructor(element: HTMLElement, options?: WidgetsViewerOptions);
        abstract _getDefaultOptions(): WidgetsViewerOptions;
        abstract _init(): any;
        abstract _update(): any;
        abstract redraw(): any;
        itemsList: any[];
        abstract clearSelections(): any;
        abstract getSizeParams(): any;
        abstract clear(): any;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardItemStyleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider;
    import IWidgetItemDataAccessor = DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor;
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
    import cardIndicatorElement = DevExpress.Dashboard.Internal.Viewer.cardIndicatorElement;
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    import cardRow = DevExpress.Dashboard.Internal.Viewer.cardRow;
    import cardRowElement = DevExpress.Dashboard.Internal.Viewer.cardRowElement;
    import cardRowElementBase = DevExpress.Dashboard.Internal.Viewer.cardRowElementBase;
    import cardSparklineElement = DevExpress.Dashboard.Internal.Viewer.cardSparklineElement;
    export class cardPainter {
        private data;
        private controlContainer;
        _styleSettingsProvider: DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider;
        _cardStyle: any;
        layout: DevExpress.Dashboard.Internal.Viewer.cardLayout;
        constructor(data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor, controlContainer: HTMLElement);
        draw(cardArrangements: DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo, layout: DevExpress.Dashboard.Internal.Viewer.cardLayout, _styleSettingsProvider: DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider): JQuery;
        createCardContent(cardArrangements: DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo, layout: DevExpress.Dashboard.Internal.Viewer.cardLayout): JQuery;
        createRows(rowModels: DevExpress.Dashboard.Internal.Viewer.cardRow[], contentWidth: number): JQuery[];
        createRow(elementModels: DevExpress.Dashboard.Internal.Viewer.cardRowElementBase[], rowDiv: JQuery, contentWidth: number): void;
        createElements(elements: DevExpress.Dashboard.Internal.Viewer.cardRowElementBase[], contentWidth: number): JQuery[];
        createIndicatorElement(indicatorElement: DevExpress.Dashboard.Internal.Viewer.cardIndicatorElement): JQuery;
        createSparklineElement(sparklineElement: DevExpress.Dashboard.Internal.Viewer.cardSparklineElement, contentWidth: number): any;
        createDataElement(textElement: DevExpress.Dashboard.Internal.Viewer.cardRowElement): any;
        setElementColor(element: DevExpress.Dashboard.Internal.Viewer.cardRowElement, elementDiv: JQuery, elementProperties: Array<{
            propertyName: string;
            propertyValue: any;
        }>): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardItemStyleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
    export let newCardMeasurements: {
        margin: number;
        padding: number;
        borderWidth: number;
    };
    export class newCardItem {
        private cardPainter;
        private clickHandler;
        private hoverHandler;
        private properties;
        private tag;
        index: number;
        itemDiv: JQuery;
        constructor(properties: DevExpress.Dashboard.Internal.Viewer.widgetItemCore, cardIndex: number, viewerOptions: {
            clickHandler: any;
            hoverHandler: any;
            controlContainer: HTMLElement;
        });
        dispose(): void;
        selected(): boolean;
        setHoverEnabledState(hoverEnabled: boolean): void;
        draw(container: JQuery, cardArrangements: DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo, styleSettingsProvider: DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider): JQuery;
        clearSelection(): void;
        select(): void;
        private hover;
        private setClickHandler;
        private setHoverHandler;
        private afterDraw;
        private applyExtraStyles;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export let margins: number, paddings: number, borders: number;
    export class cardArrangementInfo {
        private etalonWidth;
        private etalonHeight;
        arrangementDirection: string;
        columnCount: number;
        rowCount: number;
        cellHeight: number;
        cellWidth: number;
        viewerHeight: number;
        viewerWidth: number;
        itemsCount: number;
        ignorePadding: boolean;
        getMarginOffset(): number;
        getScrollableHeight(): number;
        getScrollableWidth(): number;
        proportionFactor(): number;
        getCardContentHeight(): number;
        getCardContentWidth(): number;
        getCardWidth(): number;
        getCardHeight(): number;
        hasVerticalScroll(): boolean;
        hasHorizontalScroll(): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    export interface ICardSizeProvider {
        calcMinHeight(layout: DevExpress.Dashboard.Internal.Viewer.cardLayout): any;
    }
    export class cardMeasurer implements ICardSizeProvider {
        readonly DEFAULT_MIN_HEIGHT: number;
        static readonly DIGITS_STRING: string;
        static _getImageSpanHeight(width: string, height: string): number;
        static _getTextSpanHeight(fontSize: string, fontFamily: string): number;
        calcMinHeight(layout: DevExpress.Dashboard.Internal.Viewer.cardLayout): number;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    import ICardSizeProvider = DevExpress.Dashboard.Internal.Viewer.ICardSizeProvider;
    export abstract class ArrangementStrategy {
        static createInstance(method: string, lineCount?: number): ArrangementStrategy;
        cardMeasurer: DevExpress.Dashboard.Internal.Viewer.ICardSizeProvider;
        getArrangeMethod(): string;
        getLineCount(): number;
        constructor();
        arrange(viewerHeight: number, viewerWidth: number, itemsCount: number, layouts: DevExpress.Dashboard.Internal.Viewer.cardLayout[], ignorePadding?: boolean): DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
        calcBestProportions(calcArrangementInfo: (nextColumnCount?: number) => DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo): DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
        private getCardMinWidthWithMargin;
        private getCardMinHeightWithMargin;
        checkEmptyRows(columnCount: number, itemsCount: number): number;
        abstract getColumnCount(itemsCount: any, actualViewerWidth: any, cardMinWidth: any): any;
        abstract getRowCount(itemsCount: any, columnCount?: any): any;
        getArrangementDirection(): string;
    }
    export class AutoArrangementStrategy extends ArrangementStrategy {
        constructor();
        getArrangeMethod(): string;
        getLineCount(): number;
        getColumnCount(itemsCount: any, actualViewerWidth: any, cardMinWidth: any): number;
        checkEmptyRows(columnCount: number, itemsCount: number): number;
        calcBestProportions(calcArrangementInfo: (nextColumnCount?: number) => DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo): DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
        getRowCount(itemsCount: any, columnCount?: any): number;
    }
    export class ColumnArrangementStrategy extends ArrangementStrategy {
        private columnCount;
        constructor(columnCount: number);
        getArrangeMethod(): string;
        getLineCount(): number;
        getColumnCount(itemsCount: any, actualViewerWidth: any, cardMinWidth: any): number;
        getRowCount(itemsCount: any, columnCount?: any): number;
    }
    export class RowArrangementStrategy extends ArrangementStrategy {
        private rowCount;
        constructor(rowCount: number);
        getArrangementMethod(): string;
        getLineCount(): number;
        getColumnCount(itemsCount: any, actualViewerWidth: any, cardMinWidth: any): number;
        getRowCount(itemsCount: any, columnCount?: any): number;
        getArrangementDirection(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
    export class cardArrangementTableGenerator {
        cells: JQuery[];
        cardArrangements: DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
        generateTable(container: JQuery, cardArrangements: DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo): void;
        drawCellContent(startIndex: any, endIndex: any, drawHandler: (container: JQuery, cardArrangements: DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo, cardIndex: number) => JQuery): void;
        private reset;
        private generateCells;
        private createRow;
        private createCell;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
    export interface ICardScrollable {
        option: (name: string, value: any) => void;
        scrollOffset: () => {
            top?: number;
            left?: number;
        };
        scrollTo: (args: any) => void;
    }
    export class CardVirtualizationController {
        private table;
        private scrollView;
        private scrollTimeout;
        drawHandler: (startIndex: number, endIndex: number) => void;
        cardArrangements: DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
        constructor(table: JQuery, scrollView: ICardScrollable);
        init(cardArrangements: DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo, drawHandler: (startIndex: number, endIndex: number) => void): void;
        drawByScroll(offset: number): void;
        onScroll(args: any): void;
        getSizeParams(): {
            virtualSize: {
                width: number;
                height: number;
            };
            scroll: {
                top: number;
                left: number;
                size: number;
                horizontal: boolean;
                vertical: boolean;
            };
            itemMargin: {
                width: number;
                height: number;
            };
            layoutMeasurement: {
                margin: number;
                contentPadding: number;
            };
        };
        updateScrollableContent(action: () => void): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import WidgetsViewerBase = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerBase;
    import WidgetsViewerOptions = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions;
    import newCardItem = DevExpress.Dashboard.Internal.Viewer.newCardItem;
    export class CardsViewer extends WidgetsViewerBase {
        private content;
        private _viewerID;
        private arranger;
        private tableStruct;
        private virtualizer;
        private tableGenerator;
        private container;
        itemsList: DevExpress.Dashboard.Internal.Viewer.newCardItem[];
        private get _styleSettingsProvider();
        constructor(element: HTMLElement, options: DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions);
        redraw(): void;
        _getDefaultOptions(): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions;
        getSelectedItems(): DevExpress.Dashboard.Internal.Viewer.newCardItem[];
        clearSelections(): void;
        getSizeParams(): {
            virtualSize: {
                width: number;
                height: number;
            };
            scroll: {
                top: number;
                left: number;
                size: number;
                horizontal: boolean;
                vertical: boolean;
            };
            itemMargin: {
                width: number;
                height: number;
            };
            layoutMeasurement: {
                margin: number;
                contentPadding: number;
            };
        };
        clear(): void;
        dispose(): void;
        _init(): void;
        _update(): void;
        private initContainer;
        private createItems;
        protected _render(drawOptions?: any): void;
        private invalidateContent;
        private drawCards;
        private drawCardsByIndices;
        private createArranger;
        private shouldRecreateArranger;
    }
}
declare module DevExpress.Dashboard {
    import DxElement = DevExpress.core.DxElement;
    export interface CardWidget {
        onCustomizeText: (args: {
            getValue: () => any;
            getDefaultText: () => string;
        }) => string;
        cardBackColor: string;
        element: () => DevExpress.core.DxElement;
    }
}
declare module DevExpress.Dashboard {
    export type DashboardExportPaperKind = "Letter" | "Legal" | "Executive" | "A5" | "A4" | "A3";
    export type DashboardExportPageLayout = "Portrait" | "Landscape";
    export type DashboardMapSizeMode = "None" | "Zoom";
    export type DashboardRangeFilterExportSizeMode = "None" | "Stretch" | "Zoom";
    export type DashboardChartExportSizeMode = "None" | "Stretch" | "Zoom";
    export type DashboardExcelFormat = "Csv" | "Xls" | "Xlsx";
    export type DashboardExportImageFormat = "Png" | "Jpeg" | "Gif";
    export type DashboardTreemapExportSizeMode = "None" | "Zoom";
    export type DashboardExportDocumentScaleMode = "None" | "UseScaleFactor" | "AutoFitToPagesWidth";
    export type DashboardStateExportPosition = "Below" | "SeparatePage";
    export type DashboardStateExcelExportPosition = "Below" | "SeparateSheet";
    export interface DashboardPdfExportOptions {
        Title?: string;
        AutoFitPageCount?: number;
        CardAutoArrangeContent?: boolean;
        ChartAutomaticPageLayout?: boolean;
        ChartSizeMode?: DashboardChartExportSizeMode;
        ExportFilters?: boolean;
        ExportParameters?: boolean;
        DashboardStatePosition?: DashboardStateExportPosition;
        GaugeAutoArrangeContent?: boolean;
        GridFitToPageWidth?: boolean;
        GridPrintHeadersOnEveryPage?: boolean;
        MapAutomaticPageLayout?: boolean;
        MapSizeMode?: DashboardMapSizeMode;
        PageLayout?: DashboardExportPageLayout;
        PaperKind?: DashboardExportPaperKind | string;
        PieAutoArrangeContent?: boolean;
        PivotPrintHeadersOnEveryPage?: boolean;
        RangeFilterAutomaticPageLayout?: boolean;
        RangeFilterSizeMode?: DashboardRangeFilterExportSizeMode;
        ScaleFactor?: number;
        DocumentScaleMode?: DashboardExportDocumentScaleMode;
        ShowTitle?: boolean;
        TreemapAutomaticPageLayout?: boolean;
        TreemapSizeMode?: DashboardTreemapExportSizeMode;
        DashboardAutomaticPageLayout?: boolean;
        IncludeHiddenParameters?: boolean;
        FontInfo?: ExportFontInfo;
    }
    export interface DashboardImageExportOptions {
        Title?: string;
        Format?: DashboardExportImageFormat;
        Resolution?: number;
        ExportFilters?: boolean;
        ExportParameters?: boolean;
        ScaleFactor?: number;
        ShowTitle?: boolean;
        IncludeHiddenParameters?: boolean;
        FontInfo?: ExportFontInfo;
    }
    export interface DashboardExcelExportOptions {
        CsvValueSeparator?: string;
        ExportFilters?: boolean;
        ExportParameters?: boolean;
        DashboardStatePosition?: DashboardStateExcelExportPosition;
        Format?: DashboardExcelFormat;
        IncludeHiddenParameters?: boolean;
    }
    export interface ExportFontInfo {
        Name?: string;
        GdiCharSet?: number;
        UseCustomFontInfo?: boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export interface TabHeadersViewModel {
        widths: Array<number>;
        leftVisibleIndex: number;
        rightVisibleIndex: number;
    }
    export function calcTabHeadersWidth(tabsWidth: Array<number>, containerWidth: number, leftIndex: number, showCaption: boolean): TabHeadersViewModel;
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxToast = DevExpress.ui.dxToast;
    export interface IItemLoadingElement {
        show(container: HTMLElement): any;
        hide(): any;
        resize(): any;
    }
    export class ItemLoadingElement implements IItemLoadingElement {
        _overlay: DevExpress.ui.dxToast;
        show(container: HTMLElement): void;
        hide(): void;
        resize(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export type ChartSeriesTypeInternal = "area" | "bar" | "bubble" | "candlestick" | "fullstackedarea" | "fullstackedbar" | "fullstackedline" | "fullstackedspline" | "fullstackedsplinearea" | "line" | "rangearea" | "rangebar" | "scatter" | "spline" | "splinearea" | "stackedarea" | "stackedbar" | "stackedline" | "stackedspline" | "stackedsplinearea" | "steparea" | "stepline" | "stock" | "";
    export type PieSeriesType = "doughnut" | "pie";
    export let chartHelper: {
        SelectionMode: {
            Argument: string;
            Series: string;
            Points: string;
        };
        ChartLegendInsidePosition: {
            TopLeftVertical: string;
            TopLeftHorizontal: string;
            TopCenterVertical: string;
            TopCenterHorizontal: string;
            TopRightVertical: string;
            TopRightHorizontal: string;
            BottomLeftVertical: string;
            BottomLeftHorizontal: string;
            BottomCenterVertical: string;
            BottomCenterHorizontal: string;
            BottomRightVertical: string;
            BottomRightHorizontal: string;
        };
        ChartLegendOutsidePosition: {
            TopLeftVertical: string;
            TopLeftHorizontal: string;
            TopCenterHorizontal: string;
            TopRightVertical: string;
            TopRightHorizontal: string;
            BottomLeftVertical: string;
            BottomLeftHorizontal: string;
            BottomCenterHorizontal: string;
            BottomRightVertical: string;
            BottomRightHorizontal: string;
        };
        convertSeriesType: (viewSeriesType: any) => ChartSeriesTypeInternal | PieSeriesType;
        convertPresentationUnit: (argumentViewModel: any) => "day" | "hour" | "minute" | "month" | "second" | "quarter" | "week";
        convertLegendInsidePosition: (position: any) => {
            verticalAlignment: string;
            horizontalAlignment: string;
            orientation: string;
        };
        convertLegendOutsidePosition: (position: any) => {
            verticalAlignment: string;
            horizontalAlignment: string;
            orientation: string;
        };
        convertPointLabelRotationAngle: (orientation: any) => 0 | 90 | 270;
        convertPointLabelPosition: (position: any) => "inside" | "outside";
        allowArgumentAxisMargins: (panes: any) => any;
        isFinancialType: (type: any) => boolean;
        isTransparentColorType: (type: any) => boolean;
        isSeriesColorSupported: (type: ChartSeriesTypeInternal) => boolean;
        isStackedAreaType: (type: ChartSeriesTypeInternal) => boolean;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import StyleSettingsModel = DevExpress.Dashboard.Internal.Data.StyleSettingsModel;
    export class ChartItemStyleSettingsProvider {
        cfModel: any;
        initialize(cfModel: any): void;
        getDefaultBackColor(): any;
        getBackColor(styleSettingsInfo: any): any;
        getBackColorFromStyleSettingsModel(styleSettingsModel: DevExpress.Dashboard.Internal.Data.StyleSettingsModel): any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import itemDataDimension = DevExpress.Dashboard.Internal.Data.itemDataDimension;
    import ItemDataAxis = DevExpress.Dashboard.Data.ItemDataAxis;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    export class itemDataAxis implements ItemDataAxis {
        _dimensions: DevExpress.Dashboard.Internal.Data.itemDataDimension[];
        _axisPoint: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        constructor(dimensions: DevExpress.Dashboard.Internal.Data.itemDataDimension[], axisPoint: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint);
        getDimensions(): Array<DevExpress.Dashboard.Internal.Data.itemDataDimension>;
        getRootPoint(): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        getPoints(ignoreRootPoint?: boolean): Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>;
        getAvaliableLeafPoints(): Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>;
        getPointsByDimension(dimensionId: string): Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>;
        getPointByUniqueValues(values: Array<DevExpress.Dashboard.Data.PrimitiveType>): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        getPointByUniqueValueAndDimension(value: any, dimensionId: string): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        getPointByValues(values: Array<DevExpress.Dashboard.Data.PrimitiveType>): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import FormatRuleChartElement = DevExpress.Dashboard.Model.FormatRuleChartElement;
    import ChartItemStyleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.ChartItemStyleSettingsProvider;
    import ChartItemFormatRuleModelBase = DevExpress.Dashboard.Internal.Data.ChartItemFormatRuleModelBase;
    import itemDataDimension = DevExpress.Dashboard.Internal.Data.itemDataDimension;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import itemDataAxis = DevExpress.Dashboard.Internal.Data.itemDataAxis;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class chartDataControllerBase extends dataControllerBase {
        static _getLegendSeriesName(seriesName: string): void;
        static _getLegendSeriesDisplayName(seriesName: string): void;
        elementCustomColor: any;
        styleSettingsProvider: DevExpress.Dashboard.Internal.Viewer.ChartItemStyleSettingsProvider;
        constructor(options: DevExpress.Dashboard.Internal.Data.DataControllerOptions);
        getArgument(argumentAxisPoint: any): any;
        getArgumentAxisPoints(argumentId?: any): Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>;
        getSeriesAxisPoints(seriesId?: any): Array<DevExpress.Dashboard.Data.ItemDataAxisPoint>;
        getSingleArgumentDimensionFormat(): DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
        getColor(argumentAxisPoint: any, seriesAxisPoint: any, measuesIds: any, colorMeasureId: any): any;
        getConditionalFormattingColorCore(argumentAxisPoint: any, seriesAxisPoint: any, seriesMeasureId: any, seriesElement: DevExpress.Dashboard.Model.FormatRuleChartElement): any;
        getConditionalFormattingSeriesColor(seriesAxisPoint: any, seriesMeasureId: any): any;
        getConditionalFormattingPointColor(argumentAxisPoint: any, seriesAxisPoint: any, seriesMeasureId: any): any;
        isDiscreteArgument(): boolean;
        isQualitativeArgument(): boolean;
        isSingleArgument(): boolean;
        hasSeriesPoints(): boolean;
        _getElementCustomColor(argumentAxisPoint: any, seriesAxisPoint: any, measuesIds: any, color: any): any;
        _getColorFromData(argumentAxisPoint: any, seriesAxisPoint: any, colorMeasureId: any): any;
        protected _getStyleSettingsInfo(argumentAxisPoint: any, seriesAxisPoint: any, seriesMeasureId: string, chartElement: DevExpress.Dashboard.Model.FormatRuleChartElement): any;
        protected _getStyleIndexes(rule: DevExpress.Dashboard.Internal.Data.ChartItemFormatRuleModelBase, seriesInfo: any, points: any): Array<number>;
        private findStylesForDimension;
        private findStylesOnPointIntersection;
        private findStylesOnPointPath;
        private findStylesOnPointPathsIntersection;
        private getStyleIndexesOnArgumentAxis;
        protected _getCrossSlice(argumentAxisPoint: any, seriesAxisPoint: any): DevExpress.Dashboard.Internal.Data.itemData;
        _getArgumentAxis(): DevExpress.Dashboard.Internal.Data.itemDataAxis;
        _getSeriesAxis(): DevExpress.Dashboard.Internal.Data.itemDataAxis;
        _getArgumentAxisDimensions(): Array<DevExpress.Dashboard.Internal.Data.itemDataDimension>;
        _getSingleArgumentDimension(): DevExpress.Dashboard.Internal.Data.itemDataDimension;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import PointLabelContentType = DevExpress.Dashboard.Model.PointLabelContentType;
    import ChartItemFormatRuleModelBase = DevExpress.Dashboard.Internal.Data.ChartItemFormatRuleModelBase;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ChartSeriesTypeInternal = DevExpress.Dashboard.Internal.Data.ChartSeriesTypeInternal;
    import PieSeriesType = DevExpress.Dashboard.Internal.Data.PieSeriesType;
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    import chartDataControllerBase = DevExpress.Dashboard.Internal.Data.chartDataControllerBase;
    export abstract class chartDataControllerProto extends chartDataControllerBase {
        _legendSeriesPrefix: string;
        _argumentAxisPoints: Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>;
        _argumentFormat: any;
        _axisXFormat: any;
        constructor(options: DevExpress.Dashboard.Internal.Data.DataControllerOptions);
        getLegendSeriesName(seriesName: string): string;
        getLegendSeriesDisplayName(seriesName: string): string;
        getDataSourceAndSeries(encodeHtml: any): {
            dataSource: Array<ChartDataSourceItem>;
            series: Array<any>;
            argumentAxis: {
                categories: Array<Number | String | Date>;
            };
        };
        protected getDataSourceAndCategories(seriesInfoList: Array<SeriesInfo>): {
            dataSource: Array<ChartDataSourceItem>;
            categories?: Array<Number | String | Date>;
        };
        protected getDataDefinedDataSourceAndCategories(seriesInfoList: Array<SeriesInfo>): {
            dataSource: Array<ChartDataSourceItem>;
            categories?: Array<Number | String | Date>;
        };
        protected abstract getArgumentBindingValue(argumentPoint: any, pointIndex: number): any;
        generatePaneName(paneName: any, paneIndex: any): any;
        _getSeriesInfo(encodeHtml: any): Array<SeriesInfo>;
        customizeTooltipText(series: any, point: any, seriesFormats: any, encodeHtml: any): Element;
        _getTooltipHtml(series: any, point: any, seriesFormats: any, encodeHtml: any, color: any): Element;
        _getTooltipSpanInternal(series: any, point: any, seriesFormats: any, encodeHtml: any): HTMLElement;
        getTooltipArgumentText(obj: any): any;
        getZoomArguments(): {
            start: number;
            end: number;
        } | undefined;
        getArgumentUniquePath(value: any): Array<DevExpress.Dashboard.Data.PrimitiveType>;
        _getArgumentAutoFormat(): DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
        _createArgumentFormat(): DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
        _createAxisXFormat(): DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
        getArgumentFormat(): DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
        getAxisXFormat(): DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
        getArgumentText(argument: any): any;
        getAxisXLabelText(axisValue: any): any;
        _getArgumentText(argumentValue: any, formatGetter: () => DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo): any;
        _validatePoint(point: any, seriesType: any): boolean;
        _getCustomizeTooltipTextColor(point: any): any;
        _getLegendInfo(): any[];
        _getConditionalFormattingLegendItems(): Array<any>;
        _getConditionalFormattingRangeLegendItems(rule: DevExpress.Dashboard.Internal.Data.ChartItemFormatRuleModelBase): any[];
        _getConditionalFormattingLegendItem(desription: string, color: any): {
            name: string;
            color: any;
        };
        _getRuleColors(rule: DevExpress.Dashboard.Internal.Data.ChartItemFormatRuleModelBase): Array<any>;
        _valuesContainsValueSet(values: any, valueSet: any): boolean;
        _getLastSeriesType(colorMeasureId: any): DevExpress.Dashboard.Internal.Data.ChartSeriesTypeInternal | DevExpress.Dashboard.Internal.Data.PieSeriesType;
        _getDisplayTextBySeriesTemplates(): string;
        _iterateSeriesTemplates(proc: any): void;
        _isSelectionTagsRequired(): boolean;
        _createSeriesItem(seriesInfo: SeriesInfo, includeTags: any, encodeHtml: any): any;
        _customizePointLabelText(valueContainer: any, pointLabel: any, seriesInfo: any): string;
        _getPercentSupported(seriesInfo: any): boolean;
        _formatOpenHighLowCloseValues(values: any, formats: any, hasOpenValueField: any, encodeHtml: any, delimiter: any): HTMLElement[];
        _formatValuesList(valuesList: any, formats: any, encodeHtml: any): string;
        _formatValue(value: any, format: any, encodeHtml: any): string;
        _isNumericDataType(type: any): boolean;
        _convertContentType(typeModel: any): DevExpress.Dashboard.Model.PointLabelContentType;
        _showPointMarker(seriesTemplate: any): boolean;
        checkSeriesTemplatePointLabels(seriesTemplateViewModel: any): boolean;
        protected showPointLabels(pointLabelInfo: any): boolean;
        private _getPointLabelInfo;
    }
    export const allowedTypesForShowPointMarkers: string[];
    export interface SeriesInfo {
        name: string;
        dataId: string;
        paneName: string;
        pointVisible: boolean;
        seriesType: any;
        originalSeriesType: any;
        plotOnSecondaryAxis: any;
        ignoreEmptyPoints: boolean;
        axisPoint: DevExpress.Dashboard.Data.ItemDataAxisPoint;
        dataMembers: Array<string>;
        colorMeasureId: string;
        valueFormats: any;
        pointLabel: any;
        seriesItem?: any;
        title?: any;
        parentTitle?: any;
        width?: number;
        staticColor?: string;
        dashStyle?: string;
        showInLegend?: boolean;
        visible?: boolean;
        legendText?: string;
        valueFields: Array<{
            name: string;
            getValue: {
                (axisPoint: DevExpress.Dashboard.Data.ItemDataAxisPoint): any;
            };
        }>;
    }
    export interface ChartDataSourceItem {
        x: any;
        tag?: any;
        nullColumn?: any;
        [measureName: string]: any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import ChartSeriesTypeInternal = DevExpress.Dashboard.Internal.Data.ChartSeriesTypeInternal;
    import PieSeriesType = DevExpress.Dashboard.Internal.Data.PieSeriesType;
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    import chartDataControllerProto = DevExpress.Dashboard.Internal.Data.chartDataControllerProto;
    export class rangeFilterDataController extends chartDataControllerProto {
        constructor(options: DevExpress.Dashboard.Internal.Data.DataControllerOptions);
        getArgument(argumentAxisPoint: any): any;
        _iterateSeriesTemplates(proc: any): void;
        _isSelectionTagsRequired(): boolean;
        _getLastSeriesType(colorMeasureId: any): DevExpress.Dashboard.Internal.Data.ChartSeriesTypeInternal | DevExpress.Dashboard.Internal.Data.PieSeriesType;
        _createArgumentFormat(): DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
        protected showPointLabels(pointLabelInfo: any): boolean;
        protected getArgumentBindingValue(argumentPoint: any, pointIndex: number): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxDateBox = DevExpress.ui.dxDateBox;
    import DayOfWeekNumber = DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
    import rangeFilterSelection = DevExpress.Dashboard.Internal.Viewer.rangeFilterSelection;
    import CalendarZoomLevel = DevExpress.Dashboard.Internal.Viewer.CalendarZoomLevel;
    import dialogForm = DevExpress.Dashboard.Internal.Viewer.dialogForm;
    export interface CustomTimePeriodDialogOptions {
        range: DevExpress.Dashboard.Internal.Viewer.rangeFilterSelection;
        isIntYearGroupInterval: boolean;
        groupInterval: any;
        displayFormat: any;
        firstDayOfWeek: DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
    }
    export class customTimePeriodDialog {
        options: {
            container: HTMLElement;
            setRange: (range: any) => void;
        };
        setRange: any;
        range: any;
        format: "date" | "datetime" | "time";
        displayFormatFunc: any;
        maxZoomLevel: DevExpress.Dashboard.Internal.Viewer.CalendarZoomLevel;
        leftCalendar: DevExpress.ui.dxDateBox;
        rightCalendar: DevExpress.ui.dxDateBox;
        disabledDates: ((data: {
            component?: DevExpress.ui.dxDateBox;
            date?: Date;
            view?: string;
        }) => boolean);
        dialogForm: DevExpress.Dashboard.Internal.Viewer.dialogForm;
        constructor(options: {
            container: HTMLElement;
            setRange: (range: any) => void;
        });
        _initialize(): void;
        show(options: CustomTimePeriodDialogOptions): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxRangeSelector = DevExpress.viz.dxRangeSelector;
    import dxRangeSelectorOptions = DevExpress.viz.dxRangeSelector.Properties;
    import ChartDataSourceItem = DevExpress.Dashboard.Internal.Data.ChartDataSourceItem;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import customTimePeriodDialog = DevExpress.Dashboard.Internal.Viewer.customTimePeriodDialog;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import IEntireRange = DevExpress.Dashboard.Internal.Viewer.IEntireRange;
    import IRange = DevExpress.Dashboard.Internal.Viewer.IRange;
    export class rangeSelectorItem extends baseItem {
        itemElementCustomColor: any;
        timePeriodMenuSelectedIndex: number | undefined;
        rangeSelectorViewer: DevExpress.viz.dxRangeSelector;
        _customTimePeriodDialog: DevExpress.Dashboard.Internal.Viewer.customTimePeriodDialog;
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        protected get _isBottomFloatingToolbarPosition(): boolean;
        constructor(container: HTMLElement, options: any);
        private _getCustomTimePeriodDialog;
        protected _initializeData(newOptions: any): void;
        protected _clearSelectionUnsafe(): void;
        protected _clearSelectionBase(): void;
        protected _setSelectionUnsafe(values: Array<Array<any>>): void;
        _getCurrentRange(): rangeFilterSelection;
        getEntireRange(): rangeFilterSelection;
        dispose(): void;
        _setRange(range: Array<Date | number>): void;
        _setPredefinedRange(dateTimePeriodName: string): void;
        _getAvailablePredefinedRanges(): any;
        predefinedRangeChanged: (rangeName: any) => void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _isBorderRequired(): boolean;
        protected _getContainerPositionUnsafe(): {
            left: any;
            top: any;
            width: any;
            height: any;
            offsetX: number;
            offsetY: number;
        };
        private _getFirstDayOfWeek;
        _getRangeSelectorViewerOptions(): DevExpress.viz.dxRangeSelector.Properties;
        protected _getEntireRange(): DevExpress.Dashboard.Internal.Viewer.IRange;
        protected _getEntireRangeByDataSource(dataSource: Array<DevExpress.Dashboard.Internal.Data.ChartDataSourceItem>): DevExpress.Dashboard.Internal.Viewer.IRange;
        private _checkAxisXValue;
        protected _getSelectedValues(): any[];
        _isValidValues(values: Array<any>): boolean;
        _getSliderMarkerFormat(): DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
        private static _getScaleType;
        private static _getStringScaleTypeByGroupInterval;
        private static _getDateTimeScaleType;
        _getSelectedRangeChangedHandler(): (e: any) => void;
        protected _resizeUnsafe(): void;
        _getWidget(): DevExpress.viz.dxRangeSelector;
        _elementCustomColor(eventArgs: any): void;
        _hasTimePeriods(): boolean;
        _isDateTimePeriodSupported(): any;
        _getSpecificActionToolbarItems(): Array<DevExpress.Dashboard.ViewerToolbarItem>;
        _raisePredefinedPeriodSelected(index: number): void;
        _showCustomTimePeriodDialog(): void;
        _isIntYearGroupInterval(): boolean;
    }
    export class rangeFilterSelection implements IEntireRange {
        minimum: number | Date;
        maximum: number | Date;
        constructor(range: DevExpress.Dashboard.Internal.Viewer.IRange);
        getMaximum(): number | Date;
        setMaximum(value: any): void;
        getMinimum(): number | Date;
        setMinimum(value: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class imageDataController extends dataControllerBase {
        _imageAxisPoints: any;
        constructor(options: any);
        _getImageAxisPoints(): Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>;
        getImageData(): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DxElement = DevExpress.core.DxElement;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import imageDataController = DevExpress.Dashboard.Internal.Data.imageDataController;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    export class imageItem extends baseItem {
        imgSrc: any;
        img: JQuery;
        _initialHeight: any;
        _initialWidth: any;
        protected _dataController: DevExpress.Dashboard.Internal.Data.imageDataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions);
        protected _initializeData(newOptions: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _loadImage(): void;
        _clearImgTag(): void;
        _loadedImgProcessing(): void;
        _setHorizontalAlignment($img: any, horizontalAlignment: any): void;
        _setVerticalAlignment($img: any, verticalAlignment: any): void;
        _setImgSizeWithProportions($img: any, containerProportion: any): "horizontalCentering" | "verticalCentering";
        _getImageSource(imageViewModel: any): any;
        protected _resizeUnsafe(): void;
        _getWidget(): DevExpress.core.DxElement;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import imageItem = DevExpress.Dashboard.Internal.Viewer.imageItem;
    export class boundImageItem extends imageItem {
        constructor(container: HTMLElement, options: any);
        protected _initializeData(newOptions: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import mapItem = DevExpress.Dashboard.Internal.Viewer.mapItem;
    export abstract class geoPointMapItemBase extends mapItem {
        raiseTimerClusterizationDataRequest: any;
        timer: any;
        constructor(container: HTMLElement, options: any);
        initialDataRequestUnsafe(): void;
        protected selectTupleUnsafe(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected _setSelectionUnsafe(values: any): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected renderPartialContentUnsafe(): void;
        protected resetClientViewport(): void;
        protected updateContentStateUnsafe(): void;
        forceUpdateClientState(): void;
        private _getGeoPointMapViewerOptions;
        _getMarkerLayers(): any;
        _configureLayers(viewModel: any): any;
        _configureMarkerLayers(viewModel: any): any;
        _updateMarkerLayers(viewModel: any): void;
        _getMarker(viewModel: any, markerDataSource: any): any;
        _getArea(viewModel: any): {
            hoverEnabled: boolean;
            selectionMode: string;
            label: {
                enabled: any;
                dataField: string;
            };
        };
        _getLegends(viewModel: any): any[];
        _getColorLegend(viewModel: any): any;
        _getWeightLegend(viewModel: any): any;
        _getMinMaxValues(markerDataSource: any): {
            min: any;
            max: any;
        };
        _pointsCountTooltip(count: any): string;
        _getElementInteractionValue(element: any, viewModel: any): any[];
        _getDimensionsTooltipHtml(tooltipDimensions: any): string;
        _getMeasuresTooltipHtml(tooltipMeasures: any): string;
        _getDataPoint(element: any): DevExpress.Dashboard.Internal.Viewer.DataPoint;
        _getDataPointMeasureIds(): any[];
        protected _updateContentSizeUnsafe(): void;
        _raiseClusterizationDataRequest(): void;
        _onViewPortChanged(): void;
        _onInitialExtentUnsafe(viewport?: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import MapLayer = DevExpress.viz.MapLayer;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import geoPointMapItemBase = DevExpress.Dashboard.Internal.Viewer.geoPointMapItemBase;
    export class bubbleMapItem extends geoPointMapItemBase {
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        _getMarkerLayers(): DevExpress.viz.MapLayer[];
        _configureMarkerLayers(viewModel: any): any[];
        _getMarkerDataSource(): any[];
        _getMarker(viewModel: any, markerDataSource: any): any;
        _getColorLegend(viewModel: any): any;
        _getWeightLegend(viewModel: any): any;
        _getBubbleTooltip(viewModel: any, weight: any, color: any, pointsCount: any): string;
        _getBubbleRangeStops(colorizer: any, markerDataSource: any): any[];
        _getBubbleWeightRangeStops(markerDataSource: any): any[];
        _getBubbleColors(colorModels: any, defaultColorsCount: any): any;
        _getDefaultBubbleColorizerColors(count: any): any[];
        _getDataPointMeasureIds(): any[];
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import chartDataControllerProto = DevExpress.Dashboard.Internal.Data.chartDataControllerProto;
    export class chartDataController extends chartDataControllerProto {
        protected getArgumentBindingValue(argumentPoint: any, pointIndex: number): any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export class selectionHelper {
        static setSelectedArguments(widget: any, values: any, state: any): void;
        static setSelectedSeries(widget: any, values: any, state: any): void;
        static setSelectedPoint(widget: any, seriesValue: any, argumentValue: any, state: any): void;
        static setSelectedWidgetViewer(widget: any, values: any, state: any): void;
        static selectWholePie(widgetViewer: any, state: any): void;
        static _selectSeries(widget: any, seriesValue: any, state: any): void;
        static _selectArgument(widget: any, argumentValue: any, state: any): void;
        static _selectSeriesPoints(series: any, argumentValue: any, state: any): void;
        static _selectValue(widget: any, value: any, state: any): void;
        static _selectWidget(widget: any, state: any): void;
        static _checkWidgetCorrespondsToValue(widget: any, value: any): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxChart = DevExpress.viz.dxChart;
    import dxChartOptions = DevExpress.viz.dxChart.Properties;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    import ChartItemStyleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.ChartItemStyleSettingsProvider;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import ViewerItemInfo = DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
    export class chartItem extends baseItem {
        itemElementCustomColor: JQuery.Callbacks<Function>;
        chartViewer: DevExpress.viz.dxChart;
        static _maxTooltipValues: number;
        _styleSettingsProvider: DevExpress.Dashboard.Internal.Viewer.ChartItemStyleSettingsProvider;
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        dispose(): void;
        protected _initializeData(newOptions: any): void;
        protected _clearSelectionUnsafe(): void;
        protected selectTupleUnsafe(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected _setSelectionUnsafe(values: any): void;
        protected updateContentStateUnsafe(): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected getInfoUnsafe(): DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
        _elementCustomColor(eventArgs: any): void;
        _getZoomAndPanOption(viewModel: any): {
            argumentAxis: string;
        };
        _getViewOptions(): any;
        _getCommonOptions(): DevExpress.viz.dxChart.Properties;
        protected _applySelectionUnsafe(): void;
        _getDataPoint(element: any): DevExpress.Dashboard.Internal.Viewer.DataPoint;
        _getMeasuresIds(elementSeriesTag: any): any;
        _isMultiDataSupported(): boolean;
        _getElementInteractionValue(element: any, viewModel: any): any;
        _isAxisInPercentFormat(pane: any, isSecondaryAxis: any): boolean;
        _isAxisInScientificFormat(pane: any, isSecondaryAxis: any): boolean;
        _isFullStackedSeriesType(seriesType: any): boolean;
        _convertHoverMode(selectionMode: any): "none" | "allArgumentPoints" | "allSeriesPoints";
        _convertPointHoverMode(selectionMode: any): "none" | "allArgumentPoints" | "allSeriesPoints" | "onlyPoint";
        protected _resizeUnsafe(): void;
        _getWidget(): DevExpress.viz.dxChart;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemDataDeltaValue = DevExpress.Dashboard.Data.ItemDataDeltaValue;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import ItemDataMeasureValue = DevExpress.Dashboard.Data.ItemDataMeasureValue;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class choroplethMapDataController extends dataControllerBase {
        axisCache: {
            [value: string]: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        };
        isEmpty: any;
        constructor(options: any);
        _prepare(): void;
        hasRecords(): boolean;
        getDeltaValue(attribute: any, deltaId: any): DevExpress.Dashboard.Data.ItemDataDeltaValue;
        getValue(attribute: any, measureName: any): number;
        getDisplayText(attribute: any, measureName: any): string;
        getUniqueValue(attribute: any): DevExpress.Dashboard.Data.PrimitiveType;
        getMinMax(measureName: any): {
            min: any;
            max: any;
        };
        getMeasureDescriptorById(valueId: any): DevExpress.Dashboard.Data.ItemDataMeasure;
        _getMeasureValue(attribute: any, measureName: any): DevExpress.Dashboard.Data.ItemDataMeasureValue;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxVectorMapOptions = DevExpress.viz.dxVectorMap.Properties;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import ItemDataDeltaValue = DevExpress.Dashboard.Data.ItemDataDeltaValue;
    import ItemDataMeasureValue = DevExpress.Dashboard.Data.ItemDataMeasureValue;
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    import DeltaValueType = DevExpress.Dashboard.Model.DeltaValueType;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import mapItem = DevExpress.Dashboard.Internal.Viewer.mapItem;
    export interface MapDeltaColorizerViewModel {
        AttributeName: string;
        ActualValueName: string;
        TargetValueName: string;
        DeltaValueName: string;
        ActualValueId: string;
        TargetValueId: string;
        DeltaValueId: string;
        DeltaValueType: DevExpress.Dashboard.Model.DeltaValueType;
    }
    export class choroplethMapItem extends mapItem {
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        selectTuple(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected _setSelectionUnsafe(values: any): void;
        protected updateContentStateUnsafe(): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _getChoroplethMapViewerOptions(): DevExpress.viz.dxVectorMap.Properties;
        _getColorLegend(legendViewModel: any, measureDescriptor: any): any;
        _fillMeasureToolTip(mapDataSourceItem: any, attribute: any, tooltipMeasures: any): void;
        _fillValueMapDataSourceAttrs(mapDataSource: any, choroplethColorizer: any, tooltipMeasures: any, mapItems: any): void;
        _fillDeltaMapDataSourceAttrs(mapDataSource: any, choroplethColorizer: MapDeltaColorizerViewModel, tooltipMeasures: any, mapItems: any): void;
        _correctAttributesTitle(attributes: any, displayText: any): void;
        _getDeltaValue(deltaValue: DevExpress.Dashboard.Data.ItemDataDeltaValue, deltaValueType: DevExpress.Dashboard.Model.DeltaValueType): DevExpress.Dashboard.Data.ItemDataMeasureValue;
        _findAttributeValueByName(attributes: any, attributeName: any): any;
        _getRangeStops(choroplethColorizer: any): any[];
        _convertIndicatorType(type: any): string;
        _getDeltaColorValue(indicatorType: any, isGood: any): -1 | 0.5 | 2.5 | 1.5;
        _getArea(viewModel: any, colors: any, rangeStops: any): {
            colorGroupingField: string;
            colorGroups: any;
            palette: any;
            customize: (items: any) => void;
            selectionMode: string;
            label: {
                enabled: any;
                dataField: string;
            };
        };
        _getDataPoint(element: any): DevExpress.Dashboard.Internal.Viewer.DataPoint;
        _getElementInteractionValue(element: any, viewModel?: any): any[];
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    export class customFakeItem extends baseItem {
        constructor(container: HTMLElement, options: any);
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _ensureToolbarIsRendered(): any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export class gaugeRangeCalculator {
        _values: any;
        _gaugeViewType: any;
        _customMin: any;
        _customMax: any;
        _minDefined: any;
        _maxDefined: any;
        _minTickCount: any;
        _maxTickCount: any;
        _min: any;
        _max: any;
        _equalSign: any;
        constructor(options: any);
        getGaugeRange(): {
            minorTickCount: any;
            majorTickCount: any;
            min: any;
            max: any;
        };
        _getLeft(left: any, step: any): number;
        _getRight(right: any, step: any): number;
        _isFit(left: any, right: any, step: any, tickCount: any): boolean;
        _extendRange(): void;
        _setRangeStart(): void;
        _defineMinMax(): void;
        _signsEqual(number1: any, number2: any): boolean;
        _defineMinMaxTicks(): void;
        _chooseMultiplier(delta: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import kpiDataController = DevExpress.Dashboard.Internal.Data.kpiDataController;
    export class gaugeDataController extends kpiDataController {
        _gaugeRanges: any;
        _gaugeViewType: any;
        constructor(options: any);
        _iterateKpiItems(delegate: any): void;
        _getGaugeRange(element: any): any;
        _getGaugeValues(element: any): any[];
        _initialize(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export class BaseWidgetItem {
        _options: any;
        _type: any;
        _isSelected: any;
        tag: any;
        _hoverEnabled: any;
        _itemDiv: HTMLElement;
        index: any;
        constructor(options?: any);
        _getDefaultOptions(): {
            cursor: string;
            isSelected: boolean;
            hoverEnabled: boolean;
            style: {
                backgroundColor: string;
                borderStyle: string;
                borderColor: string;
            };
            selectionStyle: {
                backgroundColor: string;
                borderStyle: string;
                borderColor: string;
            };
            hoverStyle: {
                backgroundColor: string;
                borderStyle: string;
                borderColor: string;
            };
        };
        dispose(): void;
        _getStyle(isSelected: any): any;
        select(): void;
        _hover(isHover: any): void;
        clearSelection(): void;
        _disposeClickEvent(): void;
        _disposeHoverEvent(): void;
        setClickHandler(handler: any): void;
        setHoverHandler(handler: any): void;
        draw(width: any, height: any, index: any, commonItemsOptions?: any): HTMLElement;
        initDraw(width?: any, height?: any, index?: any): HTMLElement;
        _applyExtraStyles(): void;
        toggleSelection(): void;
        getWidget(): any;
        finishRender(params?: any): void;
        getItemContainer(): HTMLElement;
        _formStyle(selector: any, cssProperties: any): string;
        getCssStyle(width: any, height: any, _commonItemsOptions: any, prefix: any): string;
        calcCommonItemSpecificOptions(width: any, height: any): any;
        resize(width: any, height: any, index: any, commonItemsOptions?: any): any;
        rerender(drawOptions: any): any;
        detachItem(): any;
        setHoverEnabledState(hoverEnabled: boolean): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxSparklineOptions = DevExpress.viz.dxSparkline.Properties;
    import BaseWidgetItem = DevExpress.Dashboard.Internal.Viewer.BaseWidgetItem;
    export let cardValue1Counter: number;
    export class CardItem extends BaseWidgetItem {
        data: any;
        title: any;
        subTitle: any;
        sparklineOptions: DevExpress.viz.dxSparkline.Properties;
        variableValue1: any;
        variableValue2: any;
        mainValue: any;
        indicator: any;
        subtitleDotsIndex: any;
        _subtitleDotsIndex: any;
        static ensureOptions(options: any): any;
        constructor(item: any, options: any);
        draw(widthCard: any, heightCard: any, cardIndex: any, commonItemsOptions: any): HTMLElement;
        resize(width: any, height: any, index: any, commonItemsOptions: any): HTMLElement;
        getCssStyle(width: any, height: any, commonItemsOptions: any, prefix: any): string;
        private static calcFonts;
        static __calcFonts: typeof CardItem.calcFonts;
        calcCommonItemSpecificOptions(width: any, height: any): {
            paddings: any;
            sparklineHeight: number;
            fontSizes: {
                title: number;
                subTitle: number;
                mainValue: number;
                variableValue1: number;
                variableValue2: number;
            };
            oneRowHeight: any;
        };
        dispose(): void;
        _addTooltip(itemDiv: HTMLElement, containerId: any, tooltipPrefix: any, text: any, index: any): void;
        _getDefaultOptions(): any;
        _getText(classText: any): any;
        _getClassFromIndicator(type: any, hasPositiveMeaning: any, useDefaultColor: any): any;
        _getCardStyle(isSelected: any): any;
        _getValueClassName(classText: any): any;
        _setSubtitleDotsIndex(index: any): void;
        _getEllipsisText(inputText: any, commonItemsOptions: any, containerWidth: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export let positioningDirection: {
        Vertical: string;
        Horizontal: string;
    };
    export class ArrangementInfo {
        totalItemCount: any;
        itemsOnRowCount: any;
        itemWidth: any;
        itemHeight: any;
        direction: any;
        itemMargin: any;
        options: any;
        itemsOnColumnCount: any;
        constructor(totalItemCount: any, itemsOnRowCount: any, itemWidth: any, itemHeight: any, itemMargin: any, direction: any, options: any);
        getHeight(useMargin: any): number;
        getWidth(useMargin: any): number;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DOMComponent = DevExpress.DOMComponent;
    export let widgetItemFactory: {
        createWidget: (widgetType: string, container: HTMLElement, options: Object) => DevExpress.DOMComponent;
        getAdditionalOptions: (widgetType: any, container: any, options: any) => any;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DOMComponent = DevExpress.DOMComponent;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    import BaseWidgetItem = DevExpress.Dashboard.Internal.Viewer.BaseWidgetItem;
    export class WidgetItem extends BaseWidgetItem {
        static ensureOptions(options: any): any;
        _widgetType: any;
        _itemData: any;
        _widget: DevExpress.DOMComponent;
        constructor(itemData?: DevExpress.Dashboard.Internal.Viewer.widgetItemCore, options?: any);
        dispose(): void;
        _disposeWidget(): void;
        _getDefaultOptions(): any;
        detachItem(): void;
        initDraw(width?: any, height?: any, index?: any): HTMLElement;
        draw(width?: any, height?: any, index?: any): HTMLElement;
        resize(width: any, height: any, index?: any): HTMLElement;
        rerender(drawOptions: any): void;
        getWidget(): DevExpress.DOMComponent;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxScrollView = DevExpress.ui.dxScrollView;
    import ArrangementInfo = DevExpress.Dashboard.Internal.Viewer.ArrangementInfo;
    import BaseWidgetItem = DevExpress.Dashboard.Internal.Viewer.BaseWidgetItem;
    import WidgetsViewerArrangerAlign = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerArrangerAlign;
    import WidgetsViewerBase = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerBase;
    import WidgetsViewerOptions = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions;
    export class dxWidgetsViewer extends WidgetsViewerBase {
        _viewerID: any;
        _content: HTMLElement;
        _scrollBarWidth: number;
        _resizeHandler: () => void;
        totalMarginsAndBorders: {
            width: number;
            height: number;
        };
        _drawTimer: number;
        itemsList: DevExpress.Dashboard.Internal.Viewer.BaseWidgetItem[];
        _widgetType: any;
        _styleTag: () => void;
        _hasVerticalScroll: 0 | 1;
        _hasHorizontalScroll: 0 | 1;
        align: DevExpress.Dashboard.Internal.Viewer.WidgetsViewerArrangerAlign;
        minItemWidth: number;
        curItemWidth: number;
        _itemProportions: any;
        _needVerticalCentering: boolean;
        minItemHeight: number;
        curItemHeight: number;
        _firstDraw: boolean;
        innerContainer: HTMLElement;
        _viewerParams: any;
        countCallInternalProcessBatchItems: number;
        private container;
        constructor(element: HTMLElement, options?: DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions);
        _getDefaultOptions(): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions;
        _init(): void;
        _update(): void;
        private initContainer;
        clear(): void;
        dispose(): void;
        _getScrollable(): DevExpress.ui.dxScrollView;
        _updateScrollable(): void;
        _scrollTo(left: any, top: any): void;
        _scrollOffset(): any;
        _rootContent(): HTMLElement;
        _parentHeight(): number;
        _parentWidth(): number;
        _parentWidthWithoutScroll(): number;
        _parentHeightWithoutScroll(): number;
        _getResizeHandler(): () => void;
        _updateByOptions(): void;
        getSizeParams(): {
            virtualSize: {
                width: any;
                height: any;
            };
            scroll: {
                top: any;
                left: any;
                size: number;
                horizontal: boolean;
                vertical: boolean;
            };
            itemMargin: {
                width: number;
                height: number;
            };
        };
        getSelectedItems(): DevExpress.Dashboard.Internal.Viewer.BaseWidgetItem[];
        clearSelections(): void;
        _createItems(): void;
        _refresh(): void;
        _calcTotalMarginsAndBorders(): {
            width: number;
            height: number;
        };
        _render(drawOptions?: any): void;
        _verticalCentering(table: any): void;
        redraw(): void;
        _calcItemIndex(i: any, j: any, direction: any, rowCount: any, columnCount: any): any;
        _calcVisibleRow(cardHeight: any): number;
        _calcVisibleColumn(cardWidth: any): number;
        _getPartArray(array: any, count: any, indexOfPart: any): any[];
        _createTable(arrangementInfo: any, enableAnimation: any): HTMLElement;
        _getItemProportions(): any;
        _calcViewerParams(parentWidth: any, parentHeight: any, itemCount: any, method: any): any;
        _createArrangementInfo(width: any, lineCount: any, itemMinWidth: any, proportions: any, direction: any): DevExpress.Dashboard.Internal.Viewer.ArrangementInfo;
        _calculateArrangementInfo(width: any, height: any, itemCount: any, method: any): any;
        _drawItems(method?: any, itemCount?: any, enableAnimation?: any): HTMLElement;
        getItemByIndex(index?: any): any;
        _getScrollBarWidth(): number;
        _processBatchItems(functionName?: any, startIndex?: any, enableAnimation?: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import WidgetsViewerBase = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerBase;
    import WidgetsViewerOptions = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions;
    import WidgetsViewerWidgetType = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerWidgetType;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemInfo = DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
    import IWidgetItemDataAccessor = DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    export abstract class widgetViewerItem<TWidgetOptions extends DevExpress.Dashboard.Internal.Viewer.widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore> extends baseItem {
        widgetsViewer: DevExpress.Dashboard.Internal.Viewer.WidgetsViewerBase;
        constructor(container: HTMLElement, options: any);
        protected _clearSelectionUnsafe(): void;
        protected getInfoUnsafe(): DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected createWidgetViewer(element: HTMLElement, options: any): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerBase;
        protected _getContainerPositionUnsafe(): {
            left: any;
            top: any;
            width: any;
            height: any;
            offsetX: number;
            offsetY: number;
        };
        _getSpecificWidgetViewerOptions(): {
            itemOptions: {
                encodeHtml: any;
                itemWidgetOptionsPrepared: (options: Object) => void;
            };
        };
        _getWidgetType(): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerWidgetType;
        _isHoverEnabled(): boolean;
        _configureHover(selectionValues: any): {
            hoverEnabled: boolean;
            cursor: string;
        };
        _getWidgetViewerOptions(): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions;
        _supportAnimation(): boolean;
        _getDataSource(): any;
        _getElementInteractionValue(element: any, viewModel?: any): any;
        _getOnClickHandler(): (e: any) => void;
        _getOnHoverHandler(): (e: any) => void;
        _convertContentArrangementMode(contentArrangementMode: any): "auto" | "column" | "row";
        protected _resizeUnsafe(): void;
        protected updateContentStateUnsafe(): void;
        _setSourceItemProperties(sourceItem: TWidgetOptions, elementModel: any, props: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor): void;
        _isMultiDataSupported(): boolean;
        _ensureOptions(options: any): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    import widgetViewerItem = DevExpress.Dashboard.Internal.Viewer.widgetViewerItem;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    export abstract class kpiItem<TWidgetOptions extends DevExpress.Dashboard.Internal.Viewer.widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore> extends widgetViewerItem<TWidgetOptions> {
        constructor(container: HTMLElement, options: any);
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _showTitle(): boolean;
        _getElementsName(): any;
        protected selectTupleUnsafe(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected _setSelectionUnsafe(values: any): void;
        _getDataPoint(element: any): {
            getValues: (name: any) => any;
            getDeltaIds: () => any[];
            getMeasureIds: () => any[];
            getSelectionValues: () => any;
        };
        _isMultiDataSupported(): boolean;
        _setSourceItemProperties(sourceItem: TWidgetOptions, elementModel: any, props: any): void;
        protected _applySelectionUnsafe(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxCircularGaugeOptions = DevExpress.viz.dxCircularGaugeOptions;
    import dxLinearGaugeOptions = DevExpress.viz.dxLinearGauge.Properties;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import WidgetsViewerOptions = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions;
    import WidgetsViewerWidgetType = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerWidgetType;
    import kpiItem = DevExpress.Dashboard.Internal.Viewer.kpiItem;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    export class gaugesItem extends kpiItem<DevExpress.viz.dxLinearGauge.Properties & DevExpress.viz.dxCircularGaugeOptions & DevExpress.Dashboard.Internal.Viewer.widgetItemCore> {
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        _getWidgetViewerOptions(): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerOptions;
        _getSpecificWidgetViewerOptions(): any;
        _supportAnimation(): boolean;
        _getWidgetType(): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerWidgetType;
        _getElementsName(): string;
        _showTitle(): any;
        _getWidget(): any[];
        _setSourceItemProperties(sourceItem: DevExpress.Dashboard.Internal.Viewer.widgetItemCore, gaugeModel: any, props: any): void;
        _setVisualProperties(sourceItem: DevExpress.viz.dxLinearGauge.Properties | DevExpress.viz.dxCircularGaugeOptions, gaugeModel: any, range: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import geoPointMapDataControllerBase = DevExpress.Dashboard.Internal.Data.geoPointMapDataControllerBase;
    export class geoPointMapDataController extends geoPointMapDataControllerBase {
        constructor(options: any);
        getPoint(index: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import MapLayer = DevExpress.viz.MapLayer;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import geoPointMapItemBase = DevExpress.Dashboard.Internal.Viewer.geoPointMapItemBase;
    export class geoPointMapItem extends geoPointMapItemBase {
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        _getMarkerLayers(): DevExpress.viz.MapLayer[];
        _configureMarkerLayers(viewModel: any): any[];
        _getMarkerDataSource(): {
            dotDataSource: any[];
            bubbleDataSource: any[];
        };
        _getDorMarker(viewModel: any, markerDataSource: any): any;
        _getBubbleMarker(viewModel: any, markerDataSource: any): any;
        _getColorLegend(viewModel: any): void;
        _getWeightLegend(viewModel: any): void;
        _getClusterBubbleColor(value: any): "rgb(27, 73, 165)" | "rgb(63, 136, 48)" | "rgb(228, 124, 2)" | "rgb(214, 5, 5)";
        _getClusterBubbleSizeIndex(value: any): number;
        _getDataPointMeasureIds(): any[];
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import ISize = DevExpress.Dashboard.Internal.Viewer.ISize;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    export class groupItem extends baseItem {
        constructor(container: HTMLElement, options: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions);
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _itemHasOwnContent(): boolean;
        _toggleLoadingPanel(): void;
        getOffset(): DevExpress.Dashboard.Internal.Viewer.ISize;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import chartDataControllerBase = DevExpress.Dashboard.Internal.Data.chartDataControllerBase;
    export class pieDataController extends chartDataControllerBase {
        _measures: any;
        _argumentAxisPoints: any;
        settingsType: any;
        constructor(options: any);
        getPointDisplayTexts(pointTag: any, value: any, percent: any): {
            argumentText: any;
            valueText: any;
            percentText: string;
        };
        isDiscreteArgument(): boolean;
        createDataSource(seriesAxisPoint: any, valueDataMember: string): any[];
        getValueDataMembers(): any;
        getValueDisplayNames(seriesAxisPoint: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint, valueDataMemberIndex: any): any;
        _getCorrectZeroValue(value: any): number;
        _getColorDataMemberByMeasureId(valueDataMember: string): any;
        _getColorDataMemberByIndex(index: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import pieDataController = DevExpress.Dashboard.Internal.Data.pieDataController;
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    import WidgetsViewerWidgetType = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerWidgetType;
    import widgetViewerItem = DevExpress.Dashboard.Internal.Viewer.widgetViewerItem;
    export class pieItem extends widgetViewerItem {
        itemElementCustomColor: JQuery.Callbacks<Function>;
        pieMouseEventController: pieMouseEventController;
        sizeGroupId: any;
        protected _dataController: DevExpress.Dashboard.Internal.Data.pieDataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        protected _initializeData(newOptions: any): void;
        protected _clearSelectionUnsafe(): void;
        protected updateContentStateUnsafe(): void;
        protected selectTupleUnsafe(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected _setSelectionUnsafe(values: any): void;
        _elementCustomColor(eventArgs: any): void;
        _createPieMouseEventController(): void;
        _isHoverEnabled(): boolean;
        _isItemSelectionEnabled(): boolean;
        _isLabelsVisible(): boolean;
        _isShowPieCaptions(): any;
        _supportAnimation(): boolean;
        _getSpecificWidgetViewerOptions(): any;
        _getWidgetType(): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerWidgetType;
        _getDataSource(): {};
        _getPointSelectionEnabled(): boolean;
        _getFormatLabelHandler(valueType: any): (label: any) => any;
        _getTooltipPattern(valueType: any): "" | "{0}: {1}" | "{0} ({1})" | "{0}: {1} ({2})";
        _getElementInteractionValue(element: any, viewModel?: any): any;
        _getOnClickHandler(): (e: any) => void;
        _getSelectPointsHandler(): (e: any) => void;
        _getOnHoverHandler(): (e: any) => void;
        _getHoverPointsHandler(): (e: any) => void;
        _pieMouseEventHandler(element: any): void;
        _sliceMouseEventHandler(element: any): void;
        _getDataPoint(element: any): {
            getValues: (name: any) => any;
            getDeltaIds: () => any[];
            getMeasureIds: () => any;
        };
        _getMeasuresIds(sliceTag: any): any;
        _isMultiDataSupported(): boolean;
        _getWidget(): any[];
        protected _applySelectionUnsafe(): void;
    }
    export class pieMouseEventController {
        pieData: any;
        sliceData: any;
        shouldRaise: boolean;
        ready: JQuery.Callbacks<Function>;
        timer: number;
        constructor();
        setPieData(data: any): void;
        setSliceData(data: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import geoPointMapDataControllerBase = DevExpress.Dashboard.Internal.Data.geoPointMapDataControllerBase;
    export class pieMapDataController extends geoPointMapDataControllerBase {
        elementCustomColor: any;
        constructor(options: any);
        getPoint(index: any, valueIndex?: any): any;
        _getAxisPointDimensionDescriptorId(): any;
        formatValue(value: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import MapLayer = DevExpress.viz.MapLayer;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import pieMapDataController = DevExpress.Dashboard.Internal.Data.pieMapDataController;
    import geoPointMapItemBase = DevExpress.Dashboard.Internal.Viewer.geoPointMapItemBase;
    export class pieMapItem extends geoPointMapItemBase {
        _pieUniqueArguments: any;
        _pieArgumentDisplayTexts: any;
        _pieArgumentColors: any;
        itemElementCustomColor: JQuery.Callbacks<Function>;
        protected _dataController: DevExpress.Dashboard.Internal.Data.pieMapDataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        _getMarkerLayers(): DevExpress.viz.MapLayer[];
        _configureMarkerLayers(viewModel: any): any[];
        _getPieMapMarker(viewModel: any, markerDataSource: any, pies: any): any;
        _getMarkerDataSource(pies: any, isWeighted: any): any[];
        _getColorLegend(viewModel: any): any;
        _getWeightLegend(viewModel: any): any;
        _getPieSegments(): any[];
        _fillArgumentParams(pieSegment: any): void;
        _getPiesData(pieSegments: any, viewModel: any): {};
        _getPieSegmentCount(pie: any): number;
        _getEmptyValues(length: any): any[];
        _getPieRangeStops(pies: any): any[];
        _getRangeStopIndex(value: any, rangeStops: any): number;
        _getDataPointMeasureIds(): any[];
        _elementCustomColor(eventArgs: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    export class stubItem extends baseItem {
        constructor(container: HTMLElement, options: any);
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import groupItem = DevExpress.Dashboard.Internal.Viewer.groupItem;
    export class tabPageItem extends groupItem {
        constructor(container: HTMLElement, options: any);
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class textItemDataController extends dataControllerBase {
        displayTexts: any;
        constructor(options: any);
        _initialize(): void;
        getDisplayText(id: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DxElement = DevExpress.core.DxElement;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    export class textItem extends baseItem {
        div: JQuery;
        $textContent: JQuery;
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        _getWidget(): DevExpress.core.DxElement;
        _setContent(): void;
        _updateDocvariableValues(htmlText: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class treemapDataController extends dataControllerBase {
        elementCustomColor: any;
        last_dimension_id: any;
        nodeHash: any;
        constructor(options: any);
        _prepare(): void;
        getDataSource(): any[];
        getLabel(node: any, encodeHtml?: boolean): any;
        getTooltip(node: any, encodeHtml?: boolean): any;
        getChildrenNodesUniqueValues(value: any): any[];
        _fillChildrenNodesUniqueValues(res: any, node: any): void;
        _getChildren(currentPoint: any, measureIndex: any, groupArgumentDataMembers: any, prevArgumentDataMember: any): any[];
        _createNode(point: any, measureIndex: any, prevArgumentDataMember: any): {
            name: any;
            value: number;
            valueText: string;
            uniqueValue: any;
            format: (value: any) => string;
        };
        _getNodeText(node: any, tileType: any, groupType: any, encodeHtml: any): any;
        _getTextByContentType(contentType: any, argumentText: any, valueText: any, encodeHtml: any): any;
        _getArgumentString(point: any, prevArgumentDataMember: any): any;
        _getColor(point: any, measureIndex: any): any;
        _getElementCustomColor(point: any, color: any, valueId: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxTreeMap = DevExpress.viz.dxTreeMap;
    import dxTreeMapOptions = DevExpress.viz.dxTreeMap.Properties;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import treemapDataController = DevExpress.Dashboard.Internal.Data.treemapDataController;
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    export class treemapItem extends baseItem {
        itemElementCustomColor: JQuery.Callbacks<Function>;
        treemapViewer: DevExpress.viz.dxTreeMap;
        protected _dataController: DevExpress.Dashboard.Internal.Data.treemapDataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        dispose(): void;
        protected _initializeData(newOptions: any): void;
        protected _clearSelectionUnsafe(): void;
        protected selectTupleUnsafe(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected _setSelectionUnsafe(values: any): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected updateContentStateUnsafe(): void;
        _selectNodes(valueSet: any, state: any): void;
        _clickAction(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues): void;
        _elementCustomColor(eventArgs: any): void;
        _getTreeMapViewerOptions(): DevExpress.viz.dxTreeMap.Properties;
        _getLayoutAlgorithm(): any;
        _getLayoutDirection(): "leftBottomRightTop" | "leftTopRightBottom" | "rightBottomLeftTop" | "rightTopLeftBottom";
        _getDataPoint(element: any): DevExpress.Dashboard.Internal.Viewer.DataPoint;
        _getElementInteractionValue(element: any): any;
        _getDataPointMeasureIds(): any[];
        protected _updateContentSizeUnsafe(): void;
        _getWidget(): DevExpress.viz.dxTreeMap;
        _isMultiDataSupported(): boolean;
        protected _applySelectionUnsafe(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxOverlay = DevExpress.ui.dxOverlay;
    import dxOverlayOptions = DevExpress.ui.dxOverlayOptions;
    export interface FloatingPanelOptions {
        toolbarDiv: HTMLElement;
        floatingPanelDiv: HTMLElement;
        container: HTMLElement;
        preview: boolean;
        bottomPosition: boolean;
    }
    export class FloatingPanel {
        private PREVIEW_TOOLBAR_WIDTH;
        private _container;
        private _preview;
        private _floatingPanelDiv;
        private _maxWidth;
        _overlay: DevExpress.ui.dxOverlay<dxOverlayOptions<any>>;
        constructor(options: FloatingPanelOptions);
        private _getToolbarWidth;
        private _calculateToolbarWidth;
        show(): void;
        hide(): void;
        repaint(): void;
        isVisible(): any;
        resetSizeCache(): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import DashboardCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarBase;
    import dxToolbarItem = DevExpress.Dashboard.Internal.Viewer.dxToolbarItem;
    import FloatingPanel = DevExpress.Dashboard.Internal.Viewer.FloatingPanel;
    export class FloatingCaptionToolbarBase extends DashboardCaptionToolbarBase {
        protected _isBottomPosition: boolean;
        protected _floatingPanel: DevExpress.Dashboard.Internal.Viewer.FloatingPanel;
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, _isBottomPosition: boolean);
        set isBottomFloatingTypePosition(isBottom: boolean);
        update(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): boolean;
        calcHeight(): number;
        onResize(): void;
        showFloatingPanel(): void;
        hideFloatingPanel(): void;
        dispose(): void;
        protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
        protected _updateToolbar(): void;
        protected _repaintFloatingPanel(): void;
        protected _getVisibleItems(): Array<DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem>;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        protected _getToolbarItems(items: Array<DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem>): Array<DevExpress.Dashboard.Internal.Viewer.dxToolbarItem>;
        protected _createFloatingPanel(toolbarDiv: HTMLElement, floatingPanelDiv: HTMLElement, preview: boolean): DevExpress.Dashboard.Internal.Viewer.FloatingPanel;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import FloatingCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.FloatingCaptionToolbarBase;
    export class ClickableFloatingCaptionToolbar extends FloatingCaptionToolbarBase {
        private static _toolbars;
        protected _itemHasOwnContent: boolean;
        protected static registerToolbar(toolbar: ClickableFloatingCaptionToolbar): void;
        protected static unregisterToolbar(toolbar: ClickableFloatingCaptionToolbar): void;
        protected static activateToolbar(toolbar: ClickableFloatingCaptionToolbar): void;
        protected _shieldDiv: HTMLElement;
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, isBottomPosition: boolean, itemHasOwnContent: boolean);
        update(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): boolean;
        showFloatingPanel(): void;
        hideFloatingPanel(): void;
        dispose(): void;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
        protected _subscribeOnShieldEvents(): void;
        protected _disableShield(): void;
        protected _enableShield(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    export class HiddenCaptionToolbar implements CaptionToolbar {
        element: HTMLElement;
        disabled: boolean;
        calcHeight(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        calcMinWidth(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        update(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): boolean;
        onResize(): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import FloatingCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.FloatingCaptionToolbarBase;
    export class HoveredFloatingCaptionToolbar extends FloatingCaptionToolbarBase {
        private _floatingPanelVisible;
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, isBottomPosition: boolean);
        calcMinWidth(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        dispose(): void;
        protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import DashboardCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarBase;
    export class HoveredDashboardCaptionToolbar extends DashboardCaptionToolbarBase {
        private _hasBorder;
        private _containerHovered;
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, _hasBorder: boolean);
        dispose(): void;
        protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
        update(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): boolean;
        protected _getVisibleItems(): Array<DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem>;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        protected _processToolbarBeforeGettingSize(toolbar: DevExpress.Dashboard.Internal.Viewer.CaptionToolbar): void;
        private setHoverState;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import ClickableFloatingCaptionToolbar = DevExpress.Dashboard.Internal.Viewer.ClickableFloatingCaptionToolbar;
    export class MinimizedClickableCaptionToolbar extends ClickableFloatingCaptionToolbar {
        private _previewFloatingPanel;
        private _previewToolbarDiv;
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, isBottomPosition: boolean, itemHasOwnContent: boolean);
        showPreviewFloatingPanel(): void;
        hideFloatingPanel(): void;
        dispose(): void;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
        protected _subscribeOnShieldEvents(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import FloatingCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.FloatingCaptionToolbarBase;
    export enum MinimizedToolbarState {
        Hidden = 0,
        Minimim = 1,
        Maximim = 2
    }
    export class MinimizedHoveredCaptionToolbar extends FloatingCaptionToolbarBase {
        private _previewFloatingPanel;
        private _previewToolbarDiv;
        private _toolbarState;
        private _containerHovered;
        private _onContainerHovered;
        private _onContainerLeave;
        private _onPreviewHovered;
        private _onToolbarLeave;
        private get hasItems();
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, isBottomPosition: boolean);
        calcMinWidth(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        dispose(): void;
        onResize(): void;
        protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
        protected _repaintFloatingPanel(): void;
        private _showPreviewFloatingPanel;
        private _hidePreviewFloatingPanel;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import DashboardCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarBase;
    export class StaticCaptionToolbar extends DashboardCaptionToolbarBase {
        protected _className: string;
        private _hasBorder;
        private allowHideEmptyToolbar;
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, _className: string, _hasBorder: boolean, allowHideEmptyToolbar: any);
        calcHeight(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        calcMinWidth(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): any;
        update(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): boolean;
        protected _getVisibleItems(): Array<DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem>;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        private _visible;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import StaticCaptionToolbar = DevExpress.Dashboard.Internal.Viewer.StaticCaptionToolbar;
    export class MobileLayoutCaptionToolbar implements CaptionToolbar {
        private _container;
        private _controlContainer;
        private _popupContainer;
        private _encodeHtml;
        private _className;
        private _hasBorder;
        _actionToolbar: DevExpress.Dashboard.Internal.Viewer.StaticCaptionToolbar;
        _contentToolbar: DevExpress.Dashboard.Internal.Viewer.StaticCaptionToolbar;
        _toolbars: Array<DevExpress.Dashboard.Internal.Viewer.StaticCaptionToolbar>;
        protected _disabled: boolean;
        constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, _encodeHtml: boolean, _className: string, _hasBorder?: boolean);
        get element(): any;
        get disabled(): boolean;
        calcHeight(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        calcMinWidth(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): number;
        update(options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions): boolean;
        onResize(): void;
        dispose(): void;
        protected _createInstance(): DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        private _prepareContentToolbarOptions;
        private _prepareActionToolbarOptions;
        private _hasItems;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export type LocalizationObjectType = {
        displayValue: string;
        value: string;
    };
    export var paperKind: {
        letter?: LocalizationObjectType;
        legal?: LocalizationObjectType;
        executive?: LocalizationObjectType;
        a5?: LocalizationObjectType;
        a4?: LocalizationObjectType;
        a3?: LocalizationObjectType;
    };
    export var pageLayout: {
        auto?: LocalizationObjectType;
        portrait?: LocalizationObjectType;
        landscape?: LocalizationObjectType;
    };
    export var scaleMode: {
        none?: LocalizationObjectType;
        useScaleFactor?: LocalizationObjectType;
        autoFitToPageWidth?: LocalizationObjectType;
    };
    export var dashboardStatePosition: {
        below?: LocalizationObjectType;
        separatePage?: LocalizationObjectType;
    };
    export var excelDashboardStatePosition: {
        below?: LocalizationObjectType;
        separateSheet?: LocalizationObjectType;
    };
    export var imageFormat: {
        png?: LocalizationObjectType;
        gif?: LocalizationObjectType;
        jpg?: LocalizationObjectType;
    };
    export var excelFormat: {
        csv?: LocalizationObjectType;
        xls?: LocalizationObjectType;
        xlsx?: LocalizationObjectType;
    };
    export var sizeMode: {
        none?: LocalizationObjectType;
        stretch?: LocalizationObjectType;
        zoom?: LocalizationObjectType;
    };
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import IExportOptions = DevExpress.Dashboard.Internal.Viewer.IExportOptions;
    export let optionName: {
        pdfTitle: string;
        imageTitle: string;
        fileName: string;
        autoFitPageCount: string;
        cardAutoArrangeContent: string;
        chartAutomaticPageLayout: string;
        chartSizeMode: string;
        pdfDashboardStatePosition: string;
        gaugeAutoArrangeContent: string;
        gridFitToPageWidth: string;
        gridPrintHeadersOnEveryPage: string;
        mapAutomaticPageLayout: string;
        mapSizeMode: string;
        pageLayout: string;
        paperKind: string;
        pieAutoArrangeContent: string;
        pivotPrintHeadersOnEveryPage: string;
        rangeFilterAutomaticPageLayout: string;
        rangeFilterSizeMode: string;
        pdfScaleFactor: string;
        scaleMode: string;
        dashboardAutomaticPageLayout: string;
        pdfShowTitle: string;
        treemapAutomaticPageLayout: string;
        treemapSizeMode: string;
        imageFormat: string;
        resolution: string;
        imageScaleFactor: string;
        imageShowTitle: string;
        csvValueSeparator: string;
        excelDashboardStatePosition: string;
        excelFormat: string;
        pdfExportFilters: string;
        imageExportFilters: string;
        excelExportFilters: string;
        pdfExportParameters: string;
        imageExportParameters: string;
        excelExportParameters: string;
        pdfIncludeHiddenParameters: string;
        imageIncludeHiddenParameters: string;
        excelIncludeHiddenParameters: string;
        fontInfo: string;
    };
    type optionNames = typeof optionName[keyof typeof optionName];
    export class exportOptionsCache {
        documentOptions: {
            [T in optionNames]?: any;
        };
        itemsOptions: {
            [dashboardItemName: string]: {
                [T in optionNames]?: any;
            };
        };
        pdfOptions: {
            [T in optionNames]?: any;
        };
        imageOptions: {
            [T in optionNames]?: any;
        };
        excelOptions: {
            [T in optionNames]?: any;
        };
        constructor();
        _initialize(): void;
        _addOption<T>(cache: T, key: keyof T, defaultValue: T[keyof T], actualValue: T[keyof T]): void;
        add(dashboardItemName: string, defaultDocumentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions, actualDocumentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        _setActualValue<T>(cache: T, key: keyof T, setActual: {
            (actual: any): void;
        }, defaultValue: T[keyof T]): void;
        getActualDocumentInfo(dashboardItemName: string, defaultDocumentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): DevExpress.Dashboard.Internal.Viewer.IExportOptions;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxCheckBoxOptions = DevExpress.ui.dxCheckBox.Properties;
    import dxNumberBoxOptions = DevExpress.ui.dxNumberBox.Properties;
    import dxRadioGroupOptions = DevExpress.ui.dxRadioGroup.Properties;
    import dxSelectBoxOptions = DevExpress.ui.dxSelectBox.Properties;
    import dxTextBoxOptions = DevExpress.ui.dxTextBox.Properties;
    import Widget = DevExpress.ui.Widget;
    import DashboardExcelFormat = DevExpress.Dashboard.DashboardExcelFormat;
    import IExportOptions = DevExpress.Dashboard.Internal.Viewer.IExportOptions;
    export type ControlCreator = {
        name: string;
        create: (element: HTMLElement, options: Object) => DevExpress.ui.Widget<any>;
    };
    type ElementMargin = "Large" | "Medium" | "Small";
    export interface LabeledEditorOptions {
        controlCreator: ControlCreator;
        labelText: string;
        controlOptions?: DevExpress.ui.dxTextBox.Properties | DevExpress.ui.dxCheckBox.Properties | DevExpress.ui.dxNumberBox.Properties | DevExpress.ui.dxRadioGroup.Properties | DevExpress.ui.dxSelectBox.Properties;
        customText?: boolean;
        margin?: ElementMargin;
        values?: Array<any>;
    }
    export class labeledEditor {
        _options: LabeledEditorOptions;
        private _editor;
        private _valueName;
        enabled: boolean;
        labelDiv: HTMLElement;
        editorDiv: HTMLElement;
        get margin(): ElementMargin;
        constructor(options: LabeledEditorOptions);
        _initialize(): void;
        setEnabled(enabled: any): void;
        setVisibility(visible: any): void;
        set(value: any): void;
        get(): any;
        dispose(): void;
        _getControlOptions(options: LabeledEditorOptions): any;
        _generateElementNameClassName(controlCreator: string, largeMargin: boolean): string;
        _getElementClassName(controlName: string, largeMargin: boolean): string;
    }
    export abstract class optionsGroup {
        enabled: boolean;
        _additionalOptions: {
            popupContainer: HTMLElement;
        };
        constructor();
        abstract set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): any;
        abstract apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): any;
        abstract getEditors(captionEditors?: any): labeledEditor[];
        abstract _initialize(): any;
        setEnabled(enabled: any): void;
        createEditors(additionalOptions: any): void;
        dispose(): void;
    }
    export class dashboardStateOptionsGroup extends optionsGroup {
        exportFilters: labeledEditor;
        exportParameters: labeledEditor;
        dashboardStatePosition: labeledEditor;
        constructor();
        _initialize(): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class captionOptionsGroup extends optionsGroup {
        private _showCaptionValue;
        showCaption: labeledEditor;
        caption: labeledEditor;
        constructor(_showCaptionValue: any);
        _initialize(): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class scaleModeOptionsGroup extends optionsGroup {
        private _scaleModeValue;
        scaleMode: labeledEditor;
        scaleFactor: labeledEditor;
        autoFitPageCount: labeledEditor;
        visibilityUpdated: JQuery.Callbacks<Function>;
        constructor(_scaleModeValue: any);
        _initialize(): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
        _setScaleModeOptionsVisibility(scaleModeValue: any): void;
    }
    export class documentOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        pageLayout: labeledEditor;
        paperKind: labeledEditor;
        captionOptionsGroup: captionOptionsGroup;
        constructor(_includeCaptionValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class textItemOptionsGroup extends optionsGroup {
        private _showCaptionValue;
        fileName: labeledEditor;
        documentOptionsGroup: documentOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_showCaptionValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class boundImageItemOptionsGroup extends optionsGroup {
        private _showCaptionValue;
        private _scaleModeValue;
        fileName: labeledEditor;
        documentOptionsGroup: documentOptionsGroup;
        scaleModeOptionsGroup: scaleModeOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_showCaptionValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class imageItemOptionsGroup extends optionsGroup {
        private _showCaptionValue;
        private _scaleModeValue;
        pageLayout: labeledEditor;
        paperKind: labeledEditor;
        showCaption: labeledEditor;
        caption: labeledEditor;
        fileName: labeledEditor;
        scaleModeOptionsGroup: scaleModeOptionsGroup;
        constructor(_showCaptionValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class groupItemOptionsGroup extends optionsGroup {
        private _showCaptionValue;
        private _dashboardAutomaticPageLayoutValue;
        private _scaleModeValue;
        dashboardOptionsGroup: dashboardOptionsGroup;
        captionOptionsGroup: captionOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_showCaptionValue: any, _dashboardAutomaticPageLayoutValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class customItemOptionsGroup extends optionsGroup {
        private _showCaptionValue;
        private _dashboardAutomaticPageLayoutValue;
        private _scaleModeValue;
        dashboardOptionsGroup: dashboardOptionsGroup;
        captionOptionsGroup: captionOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_showCaptionValue: any, _dashboardAutomaticPageLayoutValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class entireDashboardOptionsGroup extends optionsGroup {
        private _showTitleValue;
        private _dashboardAutomaticPageLayoutValue;
        private _scaleModeValue;
        showTitle: labeledEditor;
        title: labeledEditor;
        dashboardOptionsGroup: dashboardOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_showTitleValue: any, _dashboardAutomaticPageLayoutValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class dashboardOptionsGroup extends optionsGroup {
        private _dashboardAutomaticPageLayoutValue;
        private _scaleModeValue;
        pageLayout: labeledEditor;
        paperKind: labeledEditor;
        fileName: labeledEditor;
        scaleModeOptionsGroup: scaleModeOptionsGroup;
        constructor(_dashboardAutomaticPageLayoutValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(captionEditors: any): labeledEditor[];
        _setScaleModeOptionsVisibility(pageLayoutValue: any): void;
    }
    export class gridOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        private _fitToPageWidthValue;
        private _scaleModeValue;
        printHeadersOnEveryPage: labeledEditor;
        fitToPageWidth: labeledEditor;
        fileName: labeledEditor;
        documentOptionsGroup: documentOptionsGroup;
        scaleModeOptionsGroup: scaleModeOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any, _fitToPageWidthValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): any[];
        _setScaleModeOptionsVisibility(fitToPageWidth: any): void;
    }
    export class pivotOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        private _scaleModeValue;
        printHeadersOnEveryPage: labeledEditor;
        fileName: labeledEditor;
        documentOptionsGroup: documentOptionsGroup;
        scaleModeOptionsGroup: scaleModeOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): any[];
    }
    export class chartOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        pageLayout: labeledEditor;
        paperKind: labeledEditor;
        sizeMode: labeledEditor;
        fileName: labeledEditor;
        captionOptionsGroup: captionOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class mapOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        pageLayout: labeledEditor;
        paperKind: labeledEditor;
        sizeMode: labeledEditor;
        fileName: labeledEditor;
        captionOptionsGroup: captionOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class treemapOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        pageLayout: labeledEditor;
        paperKind: labeledEditor;
        sizeMode: labeledEditor;
        fileName: labeledEditor;
        captionOptionsGroup: captionOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class rangeFilterOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        pageLayout: labeledEditor;
        paperKind: labeledEditor;
        sizeMode: labeledEditor;
        fileName: labeledEditor;
        captionOptionsGroup: captionOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class pieOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        private _autoArrangeContentValue;
        private _scaleModeValue;
        autoArrangeContent: labeledEditor;
        fileName: labeledEditor;
        documentOptionsGroup: documentOptionsGroup;
        scaleModeOptionsGroup: scaleModeOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any, _autoArrangeContentValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): any[];
        _setScaleModeOptionsVisibility(autoArrangeContent: any): void;
    }
    export class gaugeOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        private _autoArrangeContentValue;
        private _scaleModeValue;
        autoArrangeContent: labeledEditor;
        fileName: labeledEditor;
        documentOptionsGroup: documentOptionsGroup;
        scaleModeOptionsGroup: scaleModeOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any, _autoArrangeContentValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): any[];
        _setScaleModeOptionsVisibility(autoArrangeContent: any): void;
    }
    export class cardOptionsGroup extends optionsGroup {
        private _includeCaptionValue;
        private _autoArrangeContentValue;
        private _scaleModeValue;
        autoArrangeContent: labeledEditor;
        fileName: labeledEditor;
        documentOptionsGroup: documentOptionsGroup;
        scaleModeOptionsGroup: scaleModeOptionsGroup;
        dashboardStateOptionsGroup: dashboardStateOptionsGroup;
        constructor(_includeCaptionValue: any, _autoArrangeContentValue: any, _scaleModeValue: any);
        _initialize(): void;
        createEditors(additionalOptions: any): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): any[];
        _setScaleModeOptionsVisibility(autoArrangeContent: any): void;
    }
    export class imageOptionsGroup extends optionsGroup {
        private _showTitleValue;
        imageFormat: labeledEditor;
        showTitle: labeledEditor;
        title: labeledEditor;
        exportFilters: labeledEditor;
        exportParameters: labeledEditor;
        resolution: labeledEditor;
        fileName: labeledEditor;
        constructor(_showTitleValue: any);
        _initialize(): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class dashboardExcelOptionsGroup extends optionsGroup {
        private _formatValue;
        excelFormat: labeledEditor;
        exportFilters: labeledEditor;
        exportParameters: labeledEditor;
        dashboardStatePosition: labeledEditor;
        fileName: labeledEditor;
        constructor(_formatValue: any);
        _checkExportFormat(format: any): boolean;
        _initialize(): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class excelOptionsGroup extends optionsGroup {
        private _formatValue;
        private _enableCsv;
        excelFormat: labeledEditor;
        separator: labeledEditor;
        exportFilters: labeledEditor;
        exportParameters: labeledEditor;
        dashboardStatePosition: labeledEditor;
        fileName: labeledEditor;
        constructor(_formatValue: DevExpress.Dashboard.DashboardExcelFormat, _enableCsv: boolean);
        _checkExportFormat(format: any): boolean;
        _initialize(): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class simplyImageOptionsGroup extends optionsGroup {
        private _showTitleValue;
        imageFormat: labeledEditor;
        showTitle: labeledEditor;
        title: labeledEditor;
        resolution: labeledEditor;
        fileName: labeledEditor;
        constructor(_showTitleValue: any);
        _initialize(): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export class dashboardImageOptionsGroup extends optionsGroup {
        private _showTitleValue;
        imageFormat: labeledEditor;
        showTitle: labeledEditor;
        title: labeledEditor;
        exportFilters: labeledEditor;
        exportParameters: labeledEditor;
        resolution: labeledEditor;
        fileName: labeledEditor;
        constructor(_showTitleValue: any);
        _initialize(): void;
        set(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        apply(documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        getEditors(): labeledEditor[];
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardExportDialogArgs = DevExpress.Dashboard.DashboardExportDialogArgs;
    import DashboardExportFormat = DevExpress.Dashboard.DashboardExportFormat;
    import IExportOptions = DevExpress.Dashboard.Internal.Viewer.IExportOptions;
    import ViewerItemType = DevExpress.Dashboard.Internal.Viewer.ViewerItemType;
    import dialogForm = DevExpress.Dashboard.Internal.Viewer.dialogForm;
    import exportOptionsCache = DevExpress.Dashboard.Internal.Viewer.exportOptionsCache;
    import boundImageItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.boundImageItemOptionsGroup;
    import cardOptionsGroup = DevExpress.Dashboard.Internal.Viewer.cardOptionsGroup;
    import chartOptionsGroup = DevExpress.Dashboard.Internal.Viewer.chartOptionsGroup;
    import customItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.customItemOptionsGroup;
    import dashboardExcelOptionsGroup = DevExpress.Dashboard.Internal.Viewer.dashboardExcelOptionsGroup;
    import dashboardImageOptionsGroup = DevExpress.Dashboard.Internal.Viewer.dashboardImageOptionsGroup;
    import entireDashboardOptionsGroup = DevExpress.Dashboard.Internal.Viewer.entireDashboardOptionsGroup;
    import excelOptionsGroup = DevExpress.Dashboard.Internal.Viewer.excelOptionsGroup;
    import gaugeOptionsGroup = DevExpress.Dashboard.Internal.Viewer.gaugeOptionsGroup;
    import gridOptionsGroup = DevExpress.Dashboard.Internal.Viewer.gridOptionsGroup;
    import groupItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.groupItemOptionsGroup;
    import imageItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.imageItemOptionsGroup;
    import imageOptionsGroup = DevExpress.Dashboard.Internal.Viewer.imageOptionsGroup;
    import mapOptionsGroup = DevExpress.Dashboard.Internal.Viewer.mapOptionsGroup;
    import optionsGroup = DevExpress.Dashboard.Internal.Viewer.optionsGroup;
    import pieOptionsGroup = DevExpress.Dashboard.Internal.Viewer.pieOptionsGroup;
    import pivotOptionsGroup = DevExpress.Dashboard.Internal.Viewer.pivotOptionsGroup;
    import rangeFilterOptionsGroup = DevExpress.Dashboard.Internal.Viewer.rangeFilterOptionsGroup;
    import simplyImageOptionsGroup = DevExpress.Dashboard.Internal.Viewer.simplyImageOptionsGroup;
    import textItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.textItemOptionsGroup;
    import treemapOptionsGroup = DevExpress.Dashboard.Internal.Viewer.treemapOptionsGroup;
    export class exportDialog {
        options: ExportDialogOptions;
        exportOptionsCache: DevExpress.Dashboard.Internal.Viewer.exportOptionsCache;
        dialogForm: DevExpress.Dashboard.Internal.Viewer.dialogForm;
        group: DevExpress.Dashboard.Internal.Viewer.optionsGroup;
        exportFunction: {
            (exportOptions: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        };
        dashboardItemName: string;
        dashboardItemType: DevExpress.Dashboard.Internal.Viewer.ViewerItemType;
        format: DevExpress.Dashboard.DashboardExportFormat;
        defaultTitle: string;
        defaultFileName: string;
        constructor(options: ExportDialogOptions);
        _initialize(): void;
        showDialog(dashboardItemName: string, dashboardItemType: DevExpress.Dashboard.Internal.Viewer.ViewerItemType, format: DevExpress.Dashboard.DashboardExportFormat, options: {
            defaultTitle: string;
            defaultFileName: string;
        }): void;
        hideDialog(): void;
        dispose(): void;
        private _getLocalizedTitle;
        setExportFunction(exportFunction: {
            (exportOptions: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
        }): void;
        _createImageGroup(dashboardItemType: DevExpress.Dashboard.Internal.Viewer.ViewerItemType, documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): DevExpress.Dashboard.Internal.Viewer.imageOptionsGroup | DevExpress.Dashboard.Internal.Viewer.simplyImageOptionsGroup | DevExpress.Dashboard.Internal.Viewer.dashboardImageOptionsGroup;
        _createExcelGroup(dashboardItemType: DevExpress.Dashboard.Internal.Viewer.ViewerItemType, documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): DevExpress.Dashboard.Internal.Viewer.dashboardExcelOptionsGroup | DevExpress.Dashboard.Internal.Viewer.excelOptionsGroup;
        _createPdfGroup(dashboardItemType: DevExpress.Dashboard.Internal.Viewer.ViewerItemType, documentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions): DevExpress.Dashboard.Internal.Viewer.textItemOptionsGroup | DevExpress.Dashboard.Internal.Viewer.boundImageItemOptionsGroup | DevExpress.Dashboard.Internal.Viewer.imageItemOptionsGroup | DevExpress.Dashboard.Internal.Viewer.groupItemOptionsGroup | DevExpress.Dashboard.Internal.Viewer.customItemOptionsGroup | DevExpress.Dashboard.Internal.Viewer.entireDashboardOptionsGroup | DevExpress.Dashboard.Internal.Viewer.gridOptionsGroup | DevExpress.Dashboard.Internal.Viewer.pivotOptionsGroup | DevExpress.Dashboard.Internal.Viewer.chartOptionsGroup | DevExpress.Dashboard.Internal.Viewer.mapOptionsGroup | DevExpress.Dashboard.Internal.Viewer.treemapOptionsGroup | DevExpress.Dashboard.Internal.Viewer.rangeFilterOptionsGroup | DevExpress.Dashboard.Internal.Viewer.pieOptionsGroup | DevExpress.Dashboard.Internal.Viewer.gaugeOptionsGroup | DevExpress.Dashboard.Internal.Viewer.cardOptionsGroup;
        _createGroup(): void;
        static _initializeExportLocalizedStrings(): void;
    }
    export interface ExportDialogOptions {
        container: Element;
        defaultDocumentInfo: DevExpress.Dashboard.Internal.Viewer.IExportOptions;
        fullScreenMode?: boolean;
        onShown?: (args: DevExpress.Dashboard.DashboardExportDialogArgs) => void;
        onShowing?: (args: DevExpress.Dashboard.DashboardExportDialogArgs) => void;
        onHidden?: (args: DevExpress.Dashboard.DashboardExportDialogArgs) => void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    export class GaugeDeltaIndicator {
        _renderer: any;
        _root: any;
        _getOptions: Function;
        constructor(parameters: any);
        dispose(): this;
        draw(): any[];
        layoutOptions(): {
            horizontalAlignment: any;
            verticalAlignment: any;
        };
        measure(): any[];
        move(rect: any): void;
        freeSpace(): void;
    }
}
declare module DevExpress.Dashboard {
}
declare module DevExpress.Dashboard {
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DxElement = DevExpress.core.DxElement;
    import CardWidget = DevExpress.Dashboard.CardWidget;
    export class CardWidgetImplementation implements CardWidget {
        private _cardBackColor;
        private _onCustomizeText;
        private _changed;
        _notifyChanged: () => void;
        _element: DevExpress.core.DxElement;
        constructor(notifyHandler?: any);
        get onCustomizeText(): (args: {
            getValue: () => any;
            getDefaultText: () => string;
        }) => string;
        set onCustomizeText(value: (args: {
            getValue: () => any;
            getDefaultText: () => string;
        }) => string);
        get cardBackColor(): string;
        set cardBackColor(value: string);
        element: () => DevExpress.core.DxElement;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import cardItemStyleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider;
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    import WidgetsViewerBase = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerBase;
    import WidgetsViewerWidgetType = DevExpress.Dashboard.Internal.Viewer.WidgetsViewerWidgetType;
    import CardWidgetImplementation = DevExpress.Dashboard.Internal.Viewer.CardWidgetImplementation;
    import kpiItem = DevExpress.Dashboard.Internal.Viewer.kpiItem;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    export interface ICardModel {
        Layout?: ICardLayoutModel;
    }
    export interface ICardLayoutModel {
        MinWidth?: number;
        MaxWidth?: number;
        Rows?: Array<ICardLayoutRowModel>;
    }
    export interface ICardLayoutRowModel {
        VAlignment?: string;
        Indent?: number;
        Elements?: Array<ICardLayoutElementModel>;
    }
    export type RowElementType = "Title" | "Subtitle" | "Text" | "ActualValue" | "AbsoluteVariation" | "PercentVariation" | "PercentOfTarget" | "TargetValue" | "Dimension" | "Measure" | "CardName";
    export interface ICardLayoutElementModel {
        Type?: string;
        Color?: number;
        PredefinedColor?: string;
        HAlignment?: string;
        FontSize?: number;
        FontFamily?: string;
        FontStyle?: string;
        DataId?: string;
        Text?: string;
        Size?: number;
        Id?: string;
        IndicatorWidthRatio?: number;
        SparklineOptions?: SparklineOptionsModel;
    }
    export interface SparklineOptionsModel {
        ViewType: string;
        HighlightMinMaxPoints: boolean;
        HighlightStartEndPoints: boolean;
    }
    export class cardsItem extends kpiItem {
        _hasSparkline: boolean;
        useNewViewer: boolean;
        layoutCollection: {
            [id: string]: DevExpress.Dashboard.Internal.Viewer.cardLayout;
        };
        apiHandlers: DevExpress.Dashboard.Internal.Viewer.CardWidgetImplementation;
        _styleSettingsProvider: DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider;
        private _dataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor(container: HTMLElement, options: any);
        protected _initializeData(newOptions: any): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected createWidgetViewer(element: HTMLElement, options: any): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerBase;
        private initializeLayoutCollection;
        protected _isPaneEmpty(): boolean;
        _isBorderRequired(): boolean;
        _isTransparentBackground(): boolean;
        _getSpecificWidgetViewerOptions(): any;
        _getIgnorePadding(): boolean;
        _getWidgetType(): DevExpress.Dashboard.Internal.Viewer.WidgetsViewerWidgetType;
        _getElementsName(): string;
        private setOldCardProperties;
        private setNewCardProperties;
        _setSourceItemProperties(sourceItem: DevExpress.Dashboard.Internal.Viewer.widgetItemCore, cardModel: any, props: any): void;
        _getWidget(): DevExpress.Dashboard.Internal.Viewer.CardWidgetImplementation;
        _generateInnerBorderClassesUnsafe(element?: HTMLElement): string[];
        dispose(): void;
        disposeLayoutCollection(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import CardItemFormatRuleModel = DevExpress.Dashboard.Internal.Data.CardItemFormatRuleModel;
    import FormatRuleModelBase = DevExpress.Dashboard.Internal.Data.FormatRuleModelBase;
    import ICardLayoutElementModel = DevExpress.Dashboard.Internal.Viewer.ICardLayoutElementModel;
    import ICardLayoutModel = DevExpress.Dashboard.Internal.Viewer.ICardLayoutModel;
    import SparklineOptionsModel = DevExpress.Dashboard.Internal.Viewer.SparklineOptionsModel;
    import IWidgetItemDataAccessor = DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor;
    import CardWidgetImplementation = DevExpress.Dashboard.Internal.Viewer.CardWidgetImplementation;
    export class cardLayout {
        private apiHandlers?;
        rows: Array<cardRow>;
        minWidth: number;
        maxWidth: number;
        private _layoutElementCssClassesLinks;
        private _layoutElementCssClassesNames;
        hasRowElementCssClass(className: string): boolean;
        addRowElementCss(className: string, selector: string, properties: Array<{
            propertyName: string;
            propertyValue: any;
        }>): void;
        getCardBackgroundColor(): string;
        getStyleSettings: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => any;
        constructor(apiHandlers?: DevExpress.Dashboard.Internal.Viewer.CardWidgetImplementation);
        _cardCFFilter: (elementModel?: DevExpress.Dashboard.Internal.Viewer.ICardLayoutElementModel) => (rule: DevExpress.Dashboard.Internal.Data.FormatRuleModelBase, applyToCardId: string) => boolean;
        _isValidCardId(cardRule: DevExpress.Dashboard.Internal.Data.CardItemFormatRuleModel, applyToCardId: string): boolean;
        fill(layoutModel: DevExpress.Dashboard.Internal.Viewer.ICardLayoutModel): void;
        private isDeltaType;
        private convertElementColor;
        getElementValue(data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor, elementModel: DevExpress.Dashboard.Internal.Viewer.ICardLayoutElementModel): {
            getValue: () => any;
            getDefaultText: () => string;
        };
        private convertVAlignment;
        private convertHAlignment;
        dispose(): void;
    }
    export class cardRow {
        vAlignment: verticalAlignment;
        indent: number;
        elements: Array<cardRowElementBase>;
    }
    export abstract class cardRowElementBase {
        hAlignment: horizontalAlignment;
        getStyleSettings: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => any;
    }
    export class cardRowElement extends cardRowElementBase {
        fontFamily: string;
        color: string;
        predefinedColor: string;
        fontSize: number;
        id: string;
        getValueArgs: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => {
            getValue: () => any;
            getDefaultText: () => string;
        };
        getText: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => string;
        getIndicatorType: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => string;
        getIsGood: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => boolean;
    }
    export class cardIndicatorElement extends cardRowElementBase {
        height: number;
        width: number;
        getIndicatorType: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => string;
        getIsGood: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => boolean;
    }
    export class cardSparklineElement extends cardRowElementBase {
        height: number;
        getSparklineOptions: (data: DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor) => any;
    }
    export class sparklineOptions {
        viewType: string;
        highlightMinMaxPoints: boolean;
        highlightStartEndPoints: boolean;
        constructor(sparklineOptionsModel: DevExpress.Dashboard.Internal.Viewer.SparklineOptionsModel);
    }
    export enum horizontalAlignment {
        left = 0,
        right = 1,
        center = 2
    }
    export enum verticalAlignment {
        top = 0,
        center = 1,
        bottom = 2
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import FormatRuleModelBase = DevExpress.Dashboard.Internal.Data.FormatRuleModelBase;
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    export class widgetItemCore {
        onIncidentOccurred: (e: any) => void;
        tag: any;
        "__DX_DASHBOARD_DATA_ID": string;
        isSelected: boolean;
        hoverEnabled: boolean;
        cursor: string;
        value: any;
        indicator: any;
        subvalues: any;
        title: any;
        any: any;
        subTitle: string;
        geometry: any;
        valueIndicator: any;
        subvalueIndicator: any;
        scale: any;
        animation: any;
        mainValue: any;
        variableValue1: any;
        variableValue2: any;
        sparklineOptions: any;
        layout: DevExpress.Dashboard.Internal.Viewer.cardLayout;
        dataAccessor: IWidgetItemDataAccessor;
    }
    export interface IWidgetItemDataAccessor {
        getActualValue?(): any;
        getActualValueText?(): string;
        getTargetValue?(): any;
        getTargetValueText?(): string;
        getAbsoluteVariationValue?(): any;
        getAbsoluteVariationText?(): string;
        getPercentVariationValue?(): any;
        getPercentVariationText?(): string;
        getPercentOfTargetValue?(): any;
        getPercentOfTargetText?(): string;
        getDimensionValue(dataId: string): any;
        getDimensionValueText(dataId: string): string;
        getIndicatorType?(): any;
        getIsGood?(): boolean;
        getMainValueText?(): string;
        getSubValue1Text?(): string;
        getSubValue2Text?(): string;
        getMeasureValue?(): any;
        getMeasureDisplayText?(): string;
        getSparklineOptions?(): any;
        getSelectionValues?(): Array<any>;
        getTitle?(): string;
        getSubtitle?(): string;
        getCaptions?(): Array<string>;
        getGaugeRange?(): any;
        getCardName?(): any;
        getStyleSettingsInfo?(ruleFilter: (rule: DevExpress.Dashboard.Internal.Data.FormatRuleModelBase, applyToKpiElementId: string) => boolean): any;
        getKpiElementId?(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    import FormatRuleModelBase = DevExpress.Dashboard.Internal.Data.FormatRuleModelBase;
    import ItemDataDeltaValue = DevExpress.Dashboard.Data.ItemDataDeltaValue;
    import ItemDataMeasureValue = DevExpress.Dashboard.Data.ItemDataMeasureValue;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class kpiDataController extends dataControllerBase {
        setSourceItemProperties: (sourceItem: DevExpress.Dashboard.Internal.Viewer.widgetItemCore, element: any, properties: any) => void;
        _axisPoints: any;
        _sparklineAxisPoints: any;
        constructor(options: any);
        getDataSource(): any[];
        _createSourceItem(axisPoint: any, kpiElement: any): DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
        _getDeltaValue(axisPoint: any, kpiElement: any): DevExpress.Dashboard.Data.ItemDataDeltaValue;
        _getMeasureValue(axisPoint: any, kpiElement: any): DevExpress.Dashboard.Data.ItemDataMeasureValue;
        _getSparklineValues(axisPoint: any, kpiElement: any): any[];
        private _getStyleSettingsInfo;
        private _correctAxisPoint;
        protected _getStyleIndexes(rule: DevExpress.Dashboard.Internal.Data.FormatRuleModelBase, cellInfo: any, points: any): any[];
        _initialize(): void;
        _iterateKpiItems(delegate: any): void;
        _getGaugeRange(element: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import kpiDataController = DevExpress.Dashboard.Internal.Data.kpiDataController;
    export class cardDataController extends kpiDataController {
        constructor(options: any);
        _iterateKpiItems(delegate: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import FormatRuleChartElement = DevExpress.Dashboard.Model.FormatRuleChartElement;
    import ChartItemFormatRuleModelBase = DevExpress.Dashboard.Internal.Data.ChartItemFormatRuleModelBase;
    import chartDataControllerProto = DevExpress.Dashboard.Internal.Data.chartDataControllerProto;
    export class scatterChartDataController extends chartDataControllerProto {
        constructor(options: any);
        getArgument(argumentAxisPoint: any): number;
        protected getArgumentBindingValue(argumentPoint: any, pointIndex: any): number;
        getArgumentDisplayPath(axisPoint: any): any;
        getArgumentFormat(): any;
        getArgumentText(argument: any): string;
        _getTooltipHtml(series: any, point: any, seriesFormats: any, encodeHtml: any, color: any): HTMLTableElement;
        _getMeasureIds(): any[];
        getTooltipArgumentText(obj: any): any;
        _getTooltipArgumentText(axisPoint: any): any;
        _customizePointLabelText(valueContainer: any, pointLabel: any, seriesInfo: any): any;
        isQualitativeArgument(): boolean;
        isDiscreteArgument(): boolean;
        protected showPointLabels(pointLabelInfo: any): boolean;
        protected _getStyleSettingsInfo(argumentAxisPoint: any, seriesAxisPoint: any, seriesMeasureId: string, chartElement: DevExpress.Dashboard.Model.FormatRuleChartElement): any;
        protected _getStyleIndexes(rule: DevExpress.Dashboard.Internal.Data.ChartItemFormatRuleModelBase, seriesInfo: any, points: any): number[];
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class DataControllerFactory {
        createDataController(type: string, options: DataControllerOptions): DevExpress.Dashboard.Internal.Data.dataControllerBase;
    }
    export interface DataControllerOptions {
        multiData: any;
        viewModel: any;
        cfModel: any;
        useNeutralFilterMode: boolean;
        drillDownState: any;
    }
    export let defaultDataControllerFactory: DataControllerFactory;
}
declare module DevExpress.Dashboard.Internal.Data {
    import PivotFormatRuleModel = DevExpress.Dashboard.Internal.Data.PivotFormatRuleModel;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class pivotDataController extends dataControllerBase {
        _measureIds: string[];
        _collapseStateCache: {
            [collapsedStateKey: string]: any;
        };
        _conditionalFormattingInfoCache: any;
        constructor(options: DevExpress.Dashboard.Internal.Data.DataControllerOptions);
        getStyleSettingsInfo(cellItem: any, collapseStateCache: {
            [collapsedStateKey: string]: any;
        }, conditionalFormattingInfoCache: any, pointsCache: {
            columns: {
                [uniquePath: string]: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
            };
            rows: {
                [uniquePath: string]: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
            };
        }): any;
        private _getMeasureIds;
        private _getColumnAxis;
        private _getRowAxis;
        private _getCellInfo;
        protected _getStyleIndexes(rule: DevExpress.Dashboard.Internal.Data.PivotFormatRuleModel, cellInfo: any, points: any): any[];
        private _findStyleSettingsOnAxis;
        private _getFormatRules;
        private _isRowValuePosition;
        private _getAxisPointByPath;
        private _getFormatRulesByDataId;
        private _getPointId;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DxElement = DevExpress.core.DxElement;
    import dxPivotGrid = DevExpress.ui.dxPivotGrid;
    import dxPivotGridPivotGridCell = DevExpress.ui.dxPivotGridPivotGridCell;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import pivotDataController = DevExpress.Dashboard.Internal.Data.pivotDataController;
    import IExpandingState = DevExpress.Dashboard.Internal.Model.IExpandingState;
    import styleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.styleSettingsProvider;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import ViewerItemInfo = DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    export class pivotGridItem extends baseItem {
        _collapseStateCache: {
            [collapseStateKey: string]: any;
        };
        _conditionalFormattingInfoCache: any[];
        private _pivotLoadingDeferred;
        private _pointsCache;
        _styleSettingsProvider: DevExpress.Dashboard.Internal.Viewer.styleSettingsProvider;
        pivotGridViewer: DevExpress.ui.dxPivotGrid;
        expandStateChanged: JQuery.Callbacks<Function>;
        _dataController: DevExpress.Dashboard.Internal.Data.pivotDataController;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        protected get _captionToolbarSeparatorRequired(): boolean;
        private get _multiData();
        private get _viewModel();
        constructor(container: HTMLElement, options: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions);
        dispose(): void;
        hideLoadingPanel(): void;
        protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected renderPartialContentUnsafe(): void;
        protected getInfoUnsafe(): DevExpress.Dashboard.Internal.Viewer.ViewerItemInfo;
        getExpandingState(isRowsExpanding?: boolean, isColumnsExpanding?: boolean): DevExpress.Dashboard.Internal.Model.IExpandingState;
        private _onExpandStateChanged;
        private _getStatePaths;
        private _dataUpdateHook;
        protected _initializeData(newOptions: any): void;
        private _loadState;
        private _getPivotGridOptions;
        _getShowColumnGrandTotals(fields: any): any;
        _showRowGrandTotals(fields: any): any;
        _resetPivotLoadingDeferred(): void;
        _resolvePivotLoadingDeferred(): void;
        _expandValueChangingHandler: (args: any) => void;
        onCollapseStateChanged(isColumn: boolean, values: Array<any>, collapse: boolean): void;
        protected _resizeUnsafe(): void;
        _getDataPoint(element: any): DevExpress.Dashboard.Internal.Viewer.DataPoint;
        _getWidget(): DevExpress.ui.dxPivotGrid;
        _onCellPrepared(element: {
            component?: DevExpress.ui.dxPivotGrid;
            element?: DevExpress.core.DxElement;
            area?: string;
            cellElement?: DevExpress.core.DxElement;
            cell?: DevExpress.ui.dxPivotGridPivotGridCell;
            rowIndex?: number;
            columnIndex?: number;
        }): void;
        private _getFields;
        private _createAndLoadDataSource;
        private _getLoadData;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    export class ViewerItemFactory {
        createItem(container: HTMLElement, options: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions): DevExpress.Dashboard.Internal.Viewer.baseItem;
    }
    export let defaultViewerItemFactory: ViewerItemFactory;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let shapeData: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let attributeData: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let customShapefileDataSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class CustomShapefileData extends SerializableModel {
        shapeData: ko.Observable<string>;
        attributeData: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let customShapefileUrl: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let customShapefileData: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let customShapefileSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import CustomShapefileData = DevExpress.Dashboard.Model.CustomShapefileData;
    export class CustomShapefile extends SerializableModel {
        url: ko.Observable<string>;
        data: DevExpress.Dashboard.Model.CustomShapefileData;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let topLatitude: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let bottomLatitude: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let leftLongitude: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rightLongitude: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let centerPointLatitude: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let centerPointLongitude: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let createViewerPaddings: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let mapViewportSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import IViewport = DevExpress.Dashboard.Internal.Model.IViewport;
    import IViewportViewModel = DevExpress.Dashboard.Internal.Model.IViewportViewModel;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class MapViewport extends SerializableModel {
        topLatitude: ko.Observable<number>;
        bottomLatitude: ko.Observable<number>;
        leftLongitude: ko.Observable<number>;
        rightLongitude: ko.Observable<number>;
        centerPointLatitude: ko.Observable<number>;
        centerPointLongitude: ko.Observable<number>;
        createViewerPaddings: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _set(viewport: DevExpress.Dashboard.Internal.Model.IViewport, paddings?: boolean): void;
        _createViewModel(): DevExpress.Dashboard.Internal.Model.IViewportViewModel;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let legendVisible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let weightedLegendVisible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let legendPosition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let legendType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let weightedLegendSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let legendOrientation: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let mapLegendSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import MapLegendOrientation = DevExpress.Dashboard.Model.MapLegendOrientation;
    import MapLegendPosition = DevExpress.Dashboard.Model.MapLegendPosition;
    import WeightedLegendType = DevExpress.Dashboard.Model.WeightedLegendType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export abstract class MapLegendBase extends SerializableModel {
        visible: ko.Observable<boolean>;
        position: ko.Observable<DevExpress.Dashboard.Model.MapLegendPosition>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        abstract getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class WeightedLegend extends MapLegendBase {
        type: ko.Observable<DevExpress.Dashboard.Model.WeightedLegendType>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class MapLegend extends MapLegendBase {
        orientation: ko.Observable<DevExpress.Dashboard.Model.MapLegendOrientation>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let area: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let colorLegend: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let weightedLegend: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let customShapefile: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let viewport: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let tooltipMeasures: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let lockNavigation: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let shapeTitleAttributeName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let mapDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import MapClientState = DevExpress.Dashboard.Internal.Viewer.MapClientState;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import ShapefileArea = DevExpress.Dashboard.Model.ShapefileArea;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemMasterFilterInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemMasterFilterInteractivityOptions;
    import CustomShapefile = DevExpress.Dashboard.Model.CustomShapefile;
    import MapViewport = DevExpress.Dashboard.Model.MapViewport;
    export abstract class MapItem extends DataDashboardItem {
        area: ko.Observable<DevExpress.Dashboard.Model.ShapefileArea>;
        customShapefile: DevExpress.Dashboard.Model.CustomShapefile;
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemMasterFilterInteractivityOptions;
        viewport: DevExpress.Dashboard.Model.MapViewport;
        private __tooltipMeasures;
        tooltipMeasures: ko.ObservableArray<DevExpress.Dashboard.Model.Measure>;
        lockNavigation: ko.Observable<boolean>;
        shapeTitleAttributeName: ko.Observable<string>;
        private _isGeometryChanged;
        _shapeFilesAttributeNameList: ko.ObservableArray<string>;
        _initialExtentChanged: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _isGeometryChangedCallback: () => void;
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _isCalculationSupported(): boolean;
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        _setClientState(clientState: DevExpress.Dashboard.Internal.Viewer.MapClientState): void;
        _getContentCategories(): DevExpress.Dashboard.Metadata.PropertyCategory[];
        protected _updateContentViewModel(content: any): void;
        _isSortingEnabled(): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let pivotDefinitionMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pivotWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import PivotWindowDefinitionMode = DevExpress.Dashboard.Model.PivotWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class PivotWindowDefinition extends MeasureCalculationWindowDefinition {
        definitionMode: ko.Observable<DevExpress.Dashboard.Model.PivotWindowDefinitionMode>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let pivotColumns: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pivotRows: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pivotValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let autoExpandColumnGroups: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let autoExpandRowGroups: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showColumnGrandTotals: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showRowGrandTotals: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showColumnTotals: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showRowTotals: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let valuesPosition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rowTotalsPosition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let columnTotalsPosition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layoutType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pivotDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import PivotColumnTotalsPosition = DevExpress.Dashboard.Model.PivotColumnTotalsPosition;
    import PivotLayoutType = DevExpress.Dashboard.Model.PivotLayoutType;
    import PivotRowTotalsPosition = DevExpress.Dashboard.Model.PivotRowTotalsPosition;
    import PivotValuesPosition = DevExpress.Dashboard.Model.PivotValuesPosition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import FilterableDashboardItemInteractivityOptions = DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
    export class PivotItem extends DataDashboardItem {
        private __columns;
        columns: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        private __rows;
        rows: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        private __values;
        values: ko.ObservableArray<DevExpress.Dashboard.Model.Measure>;
        autoExpandColumnGroups: ko.Observable<boolean>;
        autoExpandRowGroups: ko.Observable<boolean>;
        showColumnGrandTotals: ko.Observable<boolean>;
        showRowGrandTotals: ko.Observable<boolean>;
        showColumnTotals: ko.Observable<boolean>;
        showRowTotals: ko.Observable<boolean>;
        interactivityOptions: DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
        valuesPosition: ko.Observable<DevExpress.Dashboard.Model.PivotValuesPosition>;
        rowTotalsLocation: ko.Observable<DevExpress.Dashboard.Model.PivotRowTotalsPosition>;
        columnTotalsLocation: ko.Observable<DevExpress.Dashboard.Model.PivotColumnTotalsPosition>;
        layoutType: ko.Observable<DevExpress.Dashboard.Model.PivotLayoutType>;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        private _canChangeDataItemVisibilityOptions;
        private _isTotalsVisibilityOptionEnabled;
        private _setCustomOptionsPropertyOnMeasures;
        private _setCustomOptionsPropertyOnDimensions;
        protected _getDefaultItemType(): string;
        protected _extendContentState(content: any): void;
        protected _getIgnoreMasterFilter(): boolean;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
        protected _getIsVisualInteractivitySupported(): boolean;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
    export class ItemViewerAdapterBase<TViewerItem extends DevExpress.Dashboard.Internal.Viewer.baseItem, TItemModel extends DevExpress.Dashboard.Model.DashboardItem> extends DisposableObject {
        protected dashboardItem: TItemModel;
        protected element: HTMLElement;
        protected context: DevExpress.Dashboard.Internal.IDashboardContext;
        protected localContext?: DevExpress.Dashboard.Internal.IDashboardItemContext;
        private beforeRender;
        private onDisposed;
        protected item: TViewerItem;
        protected modelSubscriptions: Array<ko.Subscription>;
        get name(): string;
        protected get _isDesignMode(): boolean;
        constructor(dashboardItem: TItemModel, element: HTMLElement, context: DevExpress.Dashboard.Internal.IDashboardContext, localContext?: DevExpress.Dashboard.Internal.IDashboardItemContext, beforeRender?: (item: DevExpress.Dashboard.Internal.Viewer.baseItem) => void, onDisposed?: () => void);
        itemUpdated: (viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem) => void;
        ensureViewerItem(onlyCreation: boolean, content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions): void;
        initialize(): void;
        private updateServerContentHandler;
        dispose(): void;
        resume(): void;
        suspend(): void;
        protected ensureViewerItemCore(onlyCreation: boolean, content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions, additionalData?: any): void;
        protected updateItemContent(content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions): void;
        protected createDashboardViewerItem(element: HTMLElement, content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions, dashboardItem: TItemModel): TViewerItem;
        protected attachToModel(viewerItem: TViewerItem, dashboardItem: TItemModel): void;
        protected detachFromModel(viewerItem: TViewerItem, dashboardItem: TItemModel): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import ItemViewerAdapterBase = DevExpress.Dashboard.Internal.ItemViewerAdapterBase;
    export class DataItemViewerAdapter<TViewerItem extends DevExpress.Dashboard.Internal.Viewer.baseItem, TItemModel extends DevExpress.Dashboard.Model.DataDashboardItem> extends ItemViewerAdapterBase<TViewerItem, TItemModel> {
        protected attachToModel(viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem): void;
        protected detachFromModel(viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem): void;
        protected ensureViewerItemCore(onlyCreation: boolean, content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions): void;
        protected updateItemContent(content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions): void;
        protected createDashboardViewerItem(element: HTMLElement, content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions, dashboardItem: TItemModel): TViewerItem;
        private getDrillUpState;
        private updateActionsModel;
        _createDefaultCustomInteractivityOptions: () => {
            selectionMode: string;
            hoverEnabled: boolean;
            targetAxes: any[];
            defaultSelectedValues: any[];
        };
        _ensureCustomInteractivityOptions: (interactivityOptions: any, interactivityEnable: any, itemData: any) => {
            selectionMode: any;
            hoverEnabled: any;
            targetAxes: any;
            defaultSelectedValues: any;
        };
    }
}
declare module DevExpress.Dashboard.Internal {
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import dataGridItem = DevExpress.Dashboard.Internal.Viewer.dataGridItem;
    import DataItemViewerAdapter = DevExpress.Dashboard.Internal.DataItemViewerAdapter;
    export class GridItemViewerAdapter extends DataItemViewerAdapter<DevExpress.Dashboard.Internal.Viewer.dataGridItem, DevExpress.Dashboard.Model.GridItem> {
        protected attachToModel(viewerItem: DevExpress.Dashboard.Internal.Viewer.dataGridItem, dataDashboardItem: DevExpress.Dashboard.Model.GridItem): void;
        protected detachFromModel(viewerItem: DevExpress.Dashboard.Internal.Viewer.dataGridItem, dataDashboardItem: DevExpress.Dashboard.Model.GridItem): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import MapItem = DevExpress.Dashboard.Model.MapItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import mapItem = DevExpress.Dashboard.Internal.Viewer.mapItem;
    import DataItemViewerAdapter = DevExpress.Dashboard.Internal.DataItemViewerAdapter;
    export class MapItemViewerAdapter extends DataItemViewerAdapter<DevExpress.Dashboard.Internal.Viewer.mapItem, DevExpress.Dashboard.Model.MapItem> {
        protected updateItemContent(content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions): void;
        protected createDashboardViewerItem(element: HTMLElement, content: DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions, dashboardItem: DevExpress.Dashboard.Model.MapItem): DevExpress.Dashboard.Internal.Viewer.mapItem;
        protected attachToModel(viewerItem: DevExpress.Dashboard.Internal.Viewer.mapItem, dataDashboardItem: DevExpress.Dashboard.Model.MapItem): void;
        protected detachFromModel(viewerItem: DevExpress.Dashboard.Internal.Viewer.mapItem, dataDashboardItem: DevExpress.Dashboard.Model.MapItem): void;
        resume(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import PivotItem = DevExpress.Dashboard.Model.PivotItem;
    import pivotGridItem = DevExpress.Dashboard.Internal.Viewer.pivotGridItem;
    import DataItemViewerAdapter = DevExpress.Dashboard.Internal.DataItemViewerAdapter;
    export class PivotItemViewerAdapter extends DataItemViewerAdapter<DevExpress.Dashboard.Internal.Viewer.pivotGridItem, DevExpress.Dashboard.Model.PivotItem> {
        private expandValueHandler;
        private expandStateChangedHandler;
        protected attachToModel(viewerItem: DevExpress.Dashboard.Internal.Viewer.pivotGridItem, dataDashboardItem: DevExpress.Dashboard.Model.PivotItem): void;
        protected detachFromModel(viewerItem: DevExpress.Dashboard.Internal.Viewer.pivotGridItem, dataDashboardItem: DevExpress.Dashboard.Model.PivotItem): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import dateFilterElement = DevExpress.Dashboard.Internal.Viewer.dateFilterElement;
    import rangeSelectorItem = DevExpress.Dashboard.Internal.Viewer.rangeSelectorItem;
    import DataItemViewerAdapter = DevExpress.Dashboard.Internal.DataItemViewerAdapter;
    export type PredefinedPeriodsItem = DevExpress.Dashboard.Model.RangeFilterItem | DevExpress.Dashboard.Model.DateFilterItem;
    export type PredefinedPeriodsViewer = DevExpress.Dashboard.Internal.Viewer.rangeSelectorItem | DevExpress.Dashboard.Internal.Viewer.dateFilterElement;
    export class PredefinedPeriodsItemViewerAdapter extends DataItemViewerAdapter<PredefinedPeriodsViewer, PredefinedPeriodsItem> {
        protected attachToModel(viewerItem: PredefinedPeriodsViewer, rangeFilterItem: PredefinedPeriodsItem): void;
        protected detachFromModel(viewerItem: PredefinedPeriodsViewer, rangeFilterItem: PredefinedPeriodsItem): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
    import ItemViewerAdapterBase = DevExpress.Dashboard.Internal.ItemViewerAdapterBase;
    export class ViewerItemAdaptersManager extends DisposableObject {
        private viewerItemAdaptersMap;
        private modelSubscriberDict;
        private createAdapterCore;
        private releaseAdapter;
        create(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, element: HTMLElement, context: DevExpress.Dashboard.Internal.IDashboardContext, localContext?: DevExpress.Dashboard.Internal.IDashboardItemContext, beforeRender?: (item: DevExpress.Dashboard.Internal.Viewer.baseItem) => void): DevExpress.Dashboard.Internal.ItemViewerAdapterBase<baseItem, DashboardItem>;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemVisualMode = DevExpress.Dashboard.Internal.Viewer.ViewerItemVisualMode;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import ItemCaptionToolbarViewOptions = DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions;
    import ViewerItemFactory = DevExpress.Dashboard.Internal.Viewer.ViewerItemFactory;
    import ViewerItemAdaptersManager = DevExpress.Dashboard.Internal.ViewerItemAdaptersManager;
    export type ItemCreatingType = "primary" | "secondary";
    export interface IDashboardContext {
        beforeApplyViewerItemOptions?: JQueryCallback;
        viewerItemCreated?: JQueryCallback;
        viewerItemDispose?: JQueryCallback;
        addContextToolbarItems?: JQueryCallback;
        viewerItemCreator?: any;
        refresh?: (itemName?: string) => void;
        isDesignMode?: ko.Observable<boolean>;
        useNeutralFilterMode?: () => boolean;
        viewerItemsManager?: DevExpress.Dashboard.Internal.ViewerItemAdaptersManager;
    }
    export class DashboardItemContext implements IDashboardItemContext {
        constructor(options?: IDashboardItemContextOptions);
        addContextToolbarItems: JQuery.Callbacks<Function>;
        viewerItemCreated: JQuery.Callbacks<Function>;
        viewerItemDispose: JQuery.Callbacks<Function>;
        beforeApplyViewerItemOptions: JQuery.Callbacks<Function>;
        captionToolbarCreated: JQuery.Callbacks<Function>;
        createCaptionToolbar: (viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem, container: HTMLElement, controlContainer: HTMLElement, popupContainer: HTMLElement, viewOptions: DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions) => DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        itemFactory?: DevExpress.Dashboard.Internal.Viewer.ViewerItemFactory;
        ignoreDesignMode?: boolean;
        disabled?: ko.Subscribable<boolean>;
        visualMode?: ko.Subscribable<DevExpress.Dashboard.Internal.Viewer.ViewerItemVisualMode>;
        boundaryContainer?: HTMLElement;
        itemCreatingType?: ItemCreatingType;
    }
    export interface IDashboardItemContext {
        addContextToolbarItems?: JQueryCallback;
        viewerItemCreated?: JQueryCallback;
        viewerItemDispose?: JQueryCallback;
        beforeApplyViewerItemOptions?: JQueryCallback;
        createCaptionToolbar?: (viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem, container: HTMLElement, controlContainer: HTMLElement, popupContainer: HTMLElement, viewOptions: DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions) => DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        itemFactory?: DevExpress.Dashboard.Internal.Viewer.ViewerItemFactory;
        ignoreDesignMode?: boolean;
        disabled?: ko.Subscribable<boolean>;
        visualMode?: ko.Subscribable<DevExpress.Dashboard.Internal.Viewer.ViewerItemVisualMode>;
        boundaryContainer?: HTMLElement;
        itemCreatingType?: ItemCreatingType;
    }
    export interface IDashboardItemContextOptions {
        addContextToolbarItems?: (options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions, item: DevExpress.Dashboard.Model.DashboardItem) => void;
        createCaptionToolbar?: (viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem, container: HTMLElement, controlContainer: HTMLElement, popupContainer: HTMLElement, viewOptions: DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions) => DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        viewerItemCreated?: (item: DevExpress.Dashboard.Model.DashboardItem, viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem) => void;
        viewerItemDispose?: (item: DevExpress.Dashboard.Model.DashboardItem, viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem) => void;
        beforeApplyViewerItemOptions?: (item: DevExpress.Dashboard.Model.DashboardItem, options: any, isCreation: boolean) => void;
        itemFactory?: DevExpress.Dashboard.Internal.Viewer.ViewerItemFactory;
        ignoreDesignMode?: boolean;
        disabled?: ko.Subscribable<boolean>;
        visualMode?: ko.Subscribable<DevExpress.Dashboard.Internal.Viewer.ViewerItemVisualMode>;
        boundaryContainer?: HTMLElement;
        itemCreatingType?: ItemCreatingType;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import FullscreenItemProvider = DevExpress.Dashboard.Internal.FullscreenItemProvider;
    import ISizeController = DevExpress.Dashboard.Internal.ISizeController;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
    interface IFullscreenItemModelViewModel {
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
        dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext;
        localContext: DevExpress.Dashboard.Internal.IDashboardItemContext;
        repaintRequest: JQueryCallback;
        getSizeController: (element: Element) => DevExpress.Dashboard.Internal.ISizeController;
    }
    export class FullscreenItemModel implements FullscreenItemProvider {
        private dashboardContext;
        private localContext?;
        private repaintRequest;
        _dashboardItem: ko.Observable<DevExpress.Dashboard.Model.DashboardItem>;
        _visible: ko.Observable<boolean>;
        dashboardItem: ko.Computed<DevExpress.Dashboard.Model.DashboardItem>;
        visible: ko.Computed<boolean>;
        viewModel: ko.Computed<IFullscreenItemModelViewModel>;
        get maximizedItemName(): string;
        constructor(dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext, localContext?: DevExpress.Dashboard.Internal.IDashboardItemContext, repaintRequest?: JQuery.Callbacks<Function>);
        maximizeItem(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): void;
        restoreDownItem(): void;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal {
    export class DockingLayoutSettings {
        static layoutPaddings: number;
    }
}
declare module DevExpress.Dashboard.Internal {
    import dxScrollViewOptions = DevExpress.ui.dxScrollView.Properties;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ElementAccessorKoComponentArgs = DevExpress.Dashboard.Internal.ElementAccessorKoComponentArgs;
    import IDashboardTitleContext = DevExpress.Dashboard.Internal.IDashboardTitleContext;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    export type CssStyleObject = {
        [key in keyof CSSStyleDeclaration]?: string | number | ko.Subscribable<string> | ko.Subscribable<number>;
    };
    export type DockingLayoutKoComponentArgs = {
        dashboard: DevExpress.Dashboard.Model.Dashboard;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        layout: DevExpress.Dashboard.Internal.LayoutItem;
        layoutMainElementEvents: DevExpress.Dashboard.Internal.ElementAccessorKoComponentArgs;
        headerHeight: ko.Observable<number>;
        repaintRequest: JQueryCallback;
        allowExportDashboard?: boolean;
        titleContext: DevExpress.Dashboard.Internal.IDashboardTitleContext;
        encodeHtml: boolean;
        resizeByTimer: ko.Observable<boolean>;
        fullscreenItemModel: DevExpress.Dashboard.Internal.FullscreenItemModel;
        scrollViewEvents: DevExpress.ui.dxScrollView.Properties;
    };
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let comboBoxType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let comboBoxDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ComboBoxDashboardItemType = DevExpress.Dashboard.Model.ComboBoxDashboardItemType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
    export class ComboBoxItem extends FilterElementItemBase {
        comboBoxType: ko.Observable<DevExpress.Dashboard.Model.ComboBoxDashboardItemType>;
        showAllValue: ko.Observable<boolean>;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _allowAllValue(): boolean;
        protected _isMultiselectable(): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ILayoutItemViewModel = DevExpress.Dashboard.Internal.ILayoutItemViewModel;
    import ILayoutItemViewModelProvider = DevExpress.Dashboard.Internal.ILayoutItemViewModelProvider;
    import LayoutItemInsertionBehavior = DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior;
    import DashboardLayoutGroupOrientation = DevExpress.Dashboard.Model.DashboardLayoutGroupOrientation;
    import IDashboardItemsProvider = DevExpress.Dashboard.Internal.Model.IDashboardItemsProvider;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import DashboardItemJson = DevExpress.Dashboard.Metadata.DashboardItemJson;
    export type LayoutItemInsertPosition = "left" | "right" | "top" | "bottom";
    export abstract class DashboardLayoutNode extends TypedSerializableModel implements ILayoutItemViewModelProvider {
        static _canAttach(parent: DashboardLayoutNode, dashboardLayoutNode: DashboardLayoutNode | DevExpress.Dashboard.Metadata.DashboardItemJson): boolean;
        dashboardItem: ko.Observable<string>;
        itemType: ko.Observable<string>;
        weight: ko.Observable<number>;
        parentNode: ko.Observable<any>;
        _dashboard: ko.Observable<DevExpress.Dashboard.Internal.Model.IDashboardItemsProvider>;
        _item: ko.Observable<DevExpress.Dashboard.Model.DashboardItem>;
        get item(): DevExpress.Dashboard.Model.DashboardItem;
        set item(newItem: DevExpress.Dashboard.Model.DashboardItem);
        constructor(dashboardLayoutItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        findLayoutItem(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): DashboardLayoutNode;
        insert(itemToInsert: DashboardLayoutNode | DevExpress.Dashboard.Model.DashboardItem, position: LayoutItemInsertPosition): void;
        moveTo(targetItem: DashboardLayoutNode, position: LayoutItemInsertPosition): void;
        _moveTo(targetItem: DashboardLayoutNode, position: LayoutItemInsertPosition, insertionBehavior?: DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior): void;
        remove(): void;
        _relativeWidth: ko.Computed<any>;
        _relativeHeight: ko.Computed<any>;
        _relativeArea: ko.Computed<number>;
        _create(modelItemJson?: any, position?: LayoutItemInsertPosition, insertionBehavior?: DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior): DashboardLayoutNode;
        _validateParentNode(newParentNode: any): void;
        _canAttach(itemToAttach: DashboardLayoutNode | DevExpress.Dashboard.Metadata.DashboardItemJson): boolean;
        _viewModel: DevExpress.Dashboard.Internal.ILayoutItemViewModel;
        _createViewModel(): DevExpress.Dashboard.Internal.ILayoutItemViewModel;
        protected get _template(): string;
        protected get _ignoreChildMaxHeight(): boolean;
        protected get _visibleItems(): ko.ObservableArray<DashboardLayoutNode>;
        protected get _childItems(): ko.ObservableArray<DashboardLayoutNode>;
        protected get _orientation(): ko.Observable<DevExpress.Dashboard.Model.DashboardLayoutGroupOrientation>;
        protected get _createPlaceholderFunc(): () => DevExpress.Dashboard.Internal.ILayoutItemViewModel;
        protected get _dragOverInnerElementController(): any;
        protected _activeTabPage: DevExpress.Dashboard.Internal.Model.KnockoutEntry;
        protected _activeTabIndex: DevExpress.Dashboard.Internal.Model.KnockoutEntry;
        protected _delete(): void;
        protected _insertItemCore(layoutNodeToInsert: DashboardLayoutNode, position: LayoutItemInsertPosition, insertionBehavior?: DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior): void;
        protected _setItemCore(newItem: DevExpress.Dashboard.Model.DashboardItem): void;
        protected _createTabPage(): void;
        _ensureItemParentContainer(): void;
        _deleteDashbordItem(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import LayoutItemInsertPosition = DevExpress.Dashboard.Model.LayoutItemInsertPosition;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import LayoutItemInsertionBehavior = DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior;
    export interface DragOverState {
        targetItem: DevExpress.Dashboard.Internal.LayoutItem;
        targetItemBehavior: DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior;
        hoverLocation: DevExpress.Dashboard.Model.LayoutItemInsertPosition;
    }
    export class DragOverStateController {
        private _dragOverItem;
        private _hoverLocation;
        private _currentTargetItem;
        private _currentTargetItemBehavior;
        private _timer;
        private _inTimer;
        constructor();
        update(targetItem: DevExpress.Dashboard.Internal.LayoutItem, currentHoverLocation: DevExpress.Dashboard.Model.LayoutItemInsertPosition): void;
        getState(): DragOverState;
        reset(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import DragOverState = DevExpress.Dashboard.Internal.DragOverState;
    export abstract class DashboardDragItemInfo {
        abstract canDrop(layoutItem: DevExpress.Dashboard.Internal.LayoutItem): boolean;
        abstract drop(dragOverState: DevExpress.Dashboard.Internal.DragOverState): any;
        abstract dragStart(): any;
        abstract dragEnd(): any;
    }
}
declare module DevExpress.Dashboard.Internal {
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import DashboardDragItemInfo = DevExpress.Dashboard.Internal.DashboardDragItemInfo;
    import DragOverState = DevExpress.Dashboard.Internal.DragOverState;
    export class LayoutItemDragItemInfo extends DashboardDragItemInfo {
        private _currentLayoutItem;
        constructor(_currentLayoutItem: DevExpress.Dashboard.Internal.LayoutItem);
        canDrop(layoutItem: DevExpress.Dashboard.Internal.LayoutItem): boolean;
        drop(dragOverState: DevExpress.Dashboard.Internal.DragOverState): void;
        dragStart(): void;
        dragEnd(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    export type ScrollOffset = {
        top?: number;
        left?: number;
    };
    export interface ScrollViewProvider {
        setScrollOffset(offset: ScrollOffset): any;
        getScrollOffset(): ScrollOffset;
        getBoundingClientRect(): ClientRect;
    }
    export class ScrollAnimator {
        private _scrollViewProvider;
        static scrollSpeed: number;
        static scrollSensitivity: number;
        private _cursorPosition;
        private _scrollViewBoundary;
        private _nextAnimationFrame;
        constructor(_scrollViewProvider: ScrollViewProvider);
        _requestAnimationFrame(): void;
        _animationStep(): void;
        start(): void;
        updateCursorPosition(cursorX: number, cursorY: number): void;
        resetCursorPosition(): void;
        stop(): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DashboardDragItemInfo = DevExpress.Dashboard.Internal.DashboardDragItemInfo;
    import ScrollViewProvider = DevExpress.Dashboard.Internal.ScrollViewProvider;
    export class LayoutDragController {
        private _dragOverState;
        private _scrollAnimator;
        private _layoutMainElement;
        private _externalElements;
        private _firstOverEvent;
        private _dragData;
        constructor();
        initScrollAnimator(scrollViewProvider: DevExpress.Dashboard.Internal.ScrollViewProvider): void;
        cleanScrollAnimator(): void;
        initLayoutMainElement(element: HTMLElement): void;
        cleanLayoutMainElement(element: HTMLElement): void;
        initExternalElement(element: HTMLElement, dragItemInfo: DevExpress.Dashboard.Internal.DashboardDragItemInfo): void;
        cleanExternalElement(element: HTMLElement): void;
        dispose(): void;
        _onDragStart(eventArgs: {
            originalEvent: DragEvent;
        }, dragData: DevExpress.Dashboard.Internal.DashboardDragItemInfo): void;
        _onDragOver(eventArgs: any, targetLayoutItem: any): boolean;
        _onDragLeave(): void;
        _onDrop(eventArgs: any): void;
        _onDrag(eventArgs: any): void;
        _onDragEnd(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import dxScrollViewOptions = DevExpress.ui.dxScrollView.Properties;
    import type = DevExpress.Dashboard.Internal.Data.type;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IExtension = DevExpress.Dashboard.IExtension;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import DashboardLayoutController = DevExpress.Dashboard.Internal.DashboardLayoutController;
    import ISizeController = DevExpress.Dashboard.Internal.ISizeController;
    import VisibleItemsProvider = DevExpress.Dashboard.Internal.VisibleItemsProvider;
    import ElementAccessorKoComponentArgs = DevExpress.Dashboard.Internal.ElementAccessorKoComponentArgs;
    import ViewerApi = DevExpress.Dashboard.Internal.ViewerApi;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import DashboardTitleContext = DevExpress.Dashboard.Internal.DashboardTitleContext;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import LayoutDragController = DevExpress.Dashboard.Internal.LayoutDragController;
    export class DockingLayoutController extends DisposableObject implements DashboardLayoutController {
        dashboardModel: DevExpress.Dashboard.Model.Dashboard;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        context: DevExpress.Dashboard.Internal.IDashboardContext;
        findExtension: (name: string) => DevExpress.Dashboard.IExtension;
        allowMaximizeItems: boolean;
        resizeByTimer: ko.Observable<boolean>;
        repaintRequest: JQueryCallback;
        encodeHtml: boolean;
        constructor(dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, context: DevExpress.Dashboard.Internal.IDashboardContext, findExtension: (name: string) => DevExpress.Dashboard.IExtension, allowMaximizeItems: boolean, resizeByTimer: ko.Observable<boolean>, repaintRequest: JQueryCallback, encodeHtml: boolean, viewerApi: DevExpress.Dashboard.Internal.ViewerApi);
        selectedLayoutItem: ko.Computed<DevExpress.Dashboard.Internal.ISizeController>;
        titleContext: DevExpress.Dashboard.Internal.DashboardTitleContext;
        get fullscreenItemProvider(): DevExpress.Dashboard.Internal.FullscreenItemModel;
        select(item: DevExpress.Dashboard.Internal.LayoutItem): void;
        dragController: DevExpress.Dashboard.Internal.LayoutDragController;
        _scrollSubscriptions: any[];
        scrollViewEvents: DevExpress.ui.dxScrollView.Properties;
        subscribeOnScroll(handler: () => void): void;
        unsubscribeOnScroll(handler: () => void): void;
        rootItem: DevExpress.Dashboard.Internal.LayoutItem;
        allowExportDashboard: boolean;
        fullscreenItemModel: DevExpress.Dashboard.Internal.FullscreenItemModel;
        layoutMainElementEvents: DevExpress.Dashboard.Internal.ElementAccessorKoComponentArgs;
        itemInteractionInProgress: ko.Observable<boolean>;
        _selectedLayoutItem: ko.Observable<DevExpress.Dashboard.Internal.LayoutItem>;
        selectedDashboardItem: ko.Computed<DevExpress.Dashboard.Model.DashboardItem>;
        emptyItemTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>;
        emptyItemTemplatesService: (layoutItem: DevExpress.Dashboard.Internal.LayoutItem) => DevExpress.Dashboard.KnockoutTemplate;
        contextMenu: (layoutItem: DevExpress.Dashboard.Internal.LayoutItem) => DevExpress.Dashboard.KnockoutTemplate;
        layoutItemPlaceholderService: (layoutItem: DevExpress.Dashboard.Internal.LayoutItem) => DevExpress.Dashboard.KnockoutTemplate;
        addDashboardItem: (data: {
            type: string;
        }) => void;
        width: ko.Observable<number>;
        height: ko.Observable<number>;
        headerHeight: ko.Observable<number>;
        visibleItemsProvider: DevExpress.Dashboard.Internal.VisibleItemsProvider;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DockingLayoutKoComponentArgs = DevExpress.Dashboard.Internal.DockingLayoutKoComponentArgs;
    import DockingLayoutController = DevExpress.Dashboard.Internal.DockingLayoutController;
    interface DockingLayoutViewModelProperties {
        componentArgs: DevExpress.Dashboard.Internal.DockingLayoutKoComponentArgs;
        cssClasses: ko.Subscribable<string>;
    }
    export type DockingLayoutKoViewModel = ko.Subscribable<DockingLayoutViewModelProperties>;
    export class DockingLayoutAdapter extends DisposableObject implements IExtension {
        private _dashboardControl;
        _dockingLayoutController: ko.Observable<DevExpress.Dashboard.Internal.DockingLayoutController>;
        name: string;
        constructor(_dashboardControl: DevExpress.Dashboard.DashboardControl);
        private readonly _templateName;
        start(): void;
        stop(): void;
        processKeyEvent(eventName: string, e: JQueryKeyEventObject): boolean;
        dispose(): void;
        private _getKoViewModel;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal {
    type Action<T> = {
        action: () => void;
        masterActions?: T[];
    };
    type ActionMapType<T extends string> = {
        [key in T]: Action<T>;
    };
    export class UpdateController<S extends string, T extends string> {
        private _actionMap;
        private _mapActionByState;
        private _state;
        private _locker;
        private _actions;
        constructor(_actionMap: ActionMapType<T>, _mapActionByState: (stateProvider: () => S, actionName: T) => T);
        beginUpdate(): void;
        endUpdate(): void;
        commitUpdate(): void;
        addAction(actionName: T): void;
        switchControlState(controlState: S): void;
        getControlState(): S;
    }
    export {};
}
declare module DevExpress.Dashboard {
    import AjaxRemoteServiceOptions = DevExpress.Dashboard.AjaxRemoteServiceOptions;
    import FetchRemoteServiceOptions = DevExpress.Dashboard.FetchRemoteServiceOptions;
    import IRemoteService = DevExpress.Dashboard.IRemoteService;
    export class AjaxRemoteService implements IRemoteService<JQueryXHR> {
        beforeSend: (jqXHR: JQueryXHR, settings: JQueryAjaxSettings) => any;
        complete?: (jqXHR: JQueryXHR, textStatus: string) => any;
        headers: {
            [key: string]: any;
        };
        constructor(options?: DevExpress.Dashboard.AjaxRemoteServiceOptions);
        _applyOptions(options?: DevExpress.Dashboard.AjaxRemoteServiceOptions): void;
        getFromServer(url: string, data?: Object, queryOptions?: JQueryAjaxSettings): JQueryXHR;
        postToServer(url: string, data?: Object): JQueryXHR;
        performPostback(url: string, args: Object): JQueryPromise<any>;
    }
    export class FetchRemoteService implements IRemoteService<JQueryPromise<any>> {
        headers: {
            [key: string]: any;
        };
        beforeSend: (settings: RequestInit) => void;
        constructor(options?: DevExpress.Dashboard.FetchRemoteServiceOptions);
        _applyOptions(options?: DevExpress.Dashboard.FetchRemoteServiceOptions): void;
        getFromServer(url: string, data?: Object, queryOptions?: Object, abortController?: AbortController): JQueryPromise<any>;
        postToServer(url: string, data?: Object, abortController?: AbortController): JQueryPromise<any>;
        _performPostback(url: string, args: any, abortController?: AbortController): Promise<any>;
        performPostback(url: string, args: any, abortController?: AbortController): JQueryPromise<any>;
        private _executeRequest;
        private _fetch;
        private _prepareParams;
    }
}
declare module DevExpress.Dashboard.Internal {
    export {};
}
declare module DevExpress.Dashboard.Internal {
    export const resources: {
        SvgResources: string;
        HtmlResources: string;
    };
}
declare module DevExpress.Dashboard {
    export class ResourceManager {
        static _resourceManagerKeys: Array<Element | "callFromApi">;
        static embedBundledResources(): void;
        static removeEmbeddedResources(): void;
        static _embedBundledResourcesCore(keyElement: Element | "callFromApi"): void;
        static _removeEmbeddedResourcesCore(keyElement: Element | "callFromApi"): void;
        static setLocalizationMessages(localizationMessages: {
            [localizationStringId: string]: string;
        }): void;
        static registerIcon(icon: string | HTMLElement): void;
    }
}
declare module DevExpress.Dashboard {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardState = DevExpress.Dashboard.Model.DashboardState;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
    import DashboardContainer = DevExpress.Dashboard.DashboardContainer;
    import IExtension = DevExpress.Dashboard.IExtension;
    import IRemoteService = DevExpress.Dashboard.IRemoteService;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import DashboardControlEvents = DevExpress.Dashboard.DashboardControlEvents;
    import DashboardControlOptions = DevExpress.Dashboard.DashboardControlOptions;
    import DashboardOptionChangedArgs = DevExpress.Dashboard.DashboardOptionChangedArgs;
    import RefreshItemsArgs = DevExpress.Dashboard.RefreshItemsArgs;
    import DashboardUpdateHub = DevExpress.Dashboard.Internal.DashboardUpdateHub;
    import DockingLayoutAdapter = DevExpress.Dashboard.Internal.DockingLayoutAdapter;
    import DashboardLayoutController = DevExpress.Dashboard.Internal.DashboardLayoutController;
    import IEndpointCollection = DevExpress.Dashboard.Internal.IEndpointCollection;
    import LayoutInfoProvider = DevExpress.Dashboard.Internal.LayoutInfoProvider;
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import ViewerApi = DevExpress.Dashboard.Internal.ViewerApi;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    /**
     * @docid dxDashboardControl
     * @wrappable
     * @module integration/index
     * @export default
     * @public
     */
    export class DashboardControl {
        private static _recursiveAsyncEval;
        get _updateHub(): DevExpress.Dashboard.Internal.DashboardUpdateHub;
        get encodeHtml(): boolean;
        _repaintRequest: JQuery.Callbacks<Function>;
        private _extensions;
        private _updateHubPrivate;
        _dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext;
        private _allowSwitchToDesigner;
        private _controlOptions;
        private _defaultControlOptions;
        _viewerApi: DevExpress.Dashboard.Internal.ViewerApi;
        _externalTemplates: ko.Computed<DevExpress.Dashboard.KnockoutTemplate[]>;
        _endpointCollection: DevExpress.Dashboard.Internal.IEndpointCollection;
        _serviceClient: ko.Observable<DevExpress.Dashboard.Internal.IDataServiceClient>;
        _displayAllData: ko.Observable<boolean>;
        _widgetContainer: HTMLElement;
        _dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        _isLoading: ko.Observable<boolean>;
        _perDashboardDisposables: Array<DevExpress.Dashboard.Model.DisposableType>;
        _layoutInfo: ko.Observable<{
            template: DevExpress.Dashboard.KnockoutTemplate;
            layoutController: ko.Subscribable<DevExpress.Dashboard.Internal.DashboardLayoutController>;
        }>;
        _layoutInfoProviderCollection: DevExpress.Dashboard.Internal.LayoutInfoProvider[];
        _dockingLayoutAdapter: DevExpress.Dashboard.Internal.DockingLayoutAdapter;
        _actualLayoutController: ko.Computed<DevExpress.Dashboard.Internal.DashboardLayoutController>;
        _emptyControlTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>;
        _surfaceLeft: ko.Observable<number>;
        _surfaceTop: ko.Observable<number>;
        surfaceLeft: ko.Observable<number>;
        surfaceTop: ko.Observable<number>;
        resizeByTimer: ko.Observable<boolean>;
        remoteService: DevExpress.Dashboard.IRemoteService;
        notificationController: DevExpress.Dashboard.NotificationController;
        get showConfirmationOnBrowserClosing(): boolean;
        isDesignMode: ko.Observable<boolean>;
        dashboardContainer: ko.Observable<DevExpress.Dashboard.DashboardContainer>;
        dashboard: ko.Computed<DevExpress.Dashboard.Model.Dashboard>;
        customTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>;
        getWidgetContainer: () => HTMLElement;
        get allowSwitchToDesigner(): boolean;
        get maximizedDashboardItemName(): string;
        get extensions(): DevExpress.Dashboard.IExtension[];
        get _classList(): string;
        element(): Element;
        private _element;
        _eventsStrategy: any;
        on<K extends Extract<keyof DevExpress.Dashboard.DashboardControlEvents, string>>(eventName: K, eventHandler: (ev: DevExpress.Dashboard.DashboardControlEvents[K]) => any): void;
        off<K extends Extract<keyof DevExpress.Dashboard.DashboardControlEvents, string>>(eventName: K, eventHandler: (ev: DevExpress.Dashboard.DashboardControlEvents[K]) => any): void;
        _raiseEvent<K extends Extract<keyof DevExpress.Dashboard.DashboardControlEvents, string>>(eventName: K, eventArgs: DevExpress.Dashboard.DashboardControlEvents[K]): void;
        private _options;
        option(): DevExpress.Dashboard.DashboardControlOptions;
        option(name: string): any;
        option(name: string, value: any): any;
        option(args: DevExpress.Dashboard.DashboardControlOptions): any;
        _silent(...args: any[]): any;
        resetOption(name: any): void;
        private _updateController;
        beginUpdate(): void;
        endUpdate(): void;
        _getOptionValue(name: any, context?: any): any;
        _getDefaultOptions(): DevExpress.Dashboard.DashboardControlOptions;
        _getOptionsByReference(): {};
        _getDeprecatedOptions(): {};
        _notifyOptionChanged(option: any, value: any): void;
        _reinitializeDashboard(): void;
        private _getCebabCaseExtensionName;
        private _getCamelCaseExtensionName;
        private _optionChanging;
        _optionChanged(args: DevExpress.Dashboard.DashboardOptionChangedArgs<DashboardControlOptions>): void;
        private _updateRemoteServiceOptions;
        private _processExtensionsOption;
        private _createExtensionOption;
        private _processExtensionsOptions;
        constructor(element: Element, options?: DevExpress.Dashboard.DashboardControlOptions);
        _updateLayout(): void;
        get _colorSchemeCss(): "dx-color-scheme-light" | "dx-color-scheme-dark";
        repaint(): void;
        render(): void;
        maximizeDashboardItem(itemName: string): void;
        restoreDashboardItem(): void;
        initializeDashboard(id: string, dashboardJson: Object, initialState?: DevExpress.Dashboard.Model.DashboardState): void;
        requestDashboardList(): JQueryPromise<any>;
        _dashboardLoadingDeferred: JQueryDeferred<any>;
        loadDashboard(dashboardId: string): JQueryPromise<any>;
        _loadDashboardCore(dashboardId: string): JQueryPromise<any>;
        unloadDashboard(): void;
        _unloadDashboardCore(): void;
        switchToViewer(): void;
        _workingModeChangeDeferred: JQuery.Deferred<any>;
        _switchToViewer(): JQueryPromise<void>;
        switchToDesigner(): void;
        _switchToDesigner(): JQueryPromise<void>;
        reloadData(): void;
        refresh(args?: DevExpress.Dashboard.RefreshItemsArgs): void;
        getDashboardState(): string;
        setDashboardState(dashboardState: DevExpress.Dashboard.Model.DashboardState | string): void;
        getDashboardId(): string;
        registerIcon(icon: string | HTMLElement): void;
        registerExtension(...extensions: DevExpress.Dashboard.IExtension[]): void;
        private _registerExtensionCore;
        findExtension(extensionName: string): DevExpress.Dashboard.IExtension;
        unregisterExtension(...extensionNames: string[]): void;
        private _unregisterExtensionCore;
        subscribeExtensionsChanged(handlers: {
            added?: (item: DevExpress.Dashboard.IExtension) => void;
            deleted?: (item: DevExpress.Dashboard.IExtension) => void;
        }): ko.Subscription;
        dispose(): void;
        _renderDashboardItem(element: Element, dashboardItemName: string, isStandalone?: boolean): void;
        private _getFullscreenItemProvider;
        private _registerKeyProcessing;
        private _registerDefaultExtensions;
        private _unrollEndpointCollection;
        private _loadInitialDashboard;
        private _initializeServiceClient;
        private _validateWorkingMode;
        private _canAddExtension;
        private _addExtension;
        private _startExtension;
        private _unloadDashboardServices;
        private _applyBindings;
        private _remoteServiceFactory;
        private _createRemoteService;
    }
}
declare module DevExpress.Dashboard {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import AjaxRemoteServiceOptions = DevExpress.Dashboard.AjaxRemoteServiceOptions;
    import FetchRemoteServiceOptions = DevExpress.Dashboard.FetchRemoteServiceOptions;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    export type ExtensionCreator = (dashboardControl: DevExpress.Dashboard.DashboardControl, extensionOptions?: {
        [index: string]: {};
    }) => DevExpress.Dashboard.IExtension;
    export type ExtensionDictionary = {
        [index: string]: ExtensionCreator;
    };
    export type ExtensionOptions = {
        [index: string]: Object | false | ExtensionCreator;
    };
    export var defaultExtensions: ExtensionDictionary;
    export var designerExtensions: ExtensionDictionary;
    export var extensionNameMap: {
        [key: string]: string;
    };
    export type WorkingMode = "Designer" | "Viewer" | "ViewerOnly";
    export type LimitVisibleDataMode = "Designer" | "DesignerAndViewer" | "None";
    export interface DashboardControlOptions {
        /**
         * @docid dxDashboardControlOptions.workingMode
         * @type string
         * @default 'Designer'
         * @fires dxDashboardControlOptions.onOptionChanged
         * @public
         */
        workingMode?: WorkingMode;
        /**
         * @docid dxDashboardControlOptions.initialDashboardId
         * @type string
         * @default ""
         * @public
         */
        initialDashboardId?: string;
        /**
         * @docid dxDashboardControlOptions.dashboardId
         * @type string
         * @default ""
         * @fires dxDashboardControlOptions.onOptionChanged
         * @public
         */
        dashboardId?: string;
        /**
         * @docid dxDashboardControlOptions.initialDashboardState
         * @type string
         * @default ''
         * @public
         */
        initialDashboardState?: string;
        /**
         * @docid dxDashboardControlOptions.loadDefaultDashboard
         * @type boolean
         * @default true
         * @public
         */
        loadDefaultDashboard?: boolean;
        /**
         * @docid dxDashboardControlOptions.encodeHtml
         * @type boolean
         * @default true
         * @public
         */
        encodeHtml?: boolean;
        /**
         * @docid dxDashboardControlOptions.useNeutralFilterMode
         * @type boolean
         * @default true
         * @public
         */
        useNeutralFilterMode?: boolean;
        /**
         * @docid dxDashboardControlOptions.limitVisibleDataMode
         * @type string
         * @default "ViewerOnly"
         * @public
         */
        limitVisibleDataMode?: LimitVisibleDataMode;
        /**
         * @docid dxDashboardControlOptions.showConfirmationOnBrowserClosing
         * @type boolean
         * @default false
         * @public
         */
        showConfirmationOnBrowserClosing?: boolean;
        /**
         * @docid dxDashboardControlOptions.resizeByTimer
         * @type boolean
         * @default true
         * @public
         */
        resizeByTimer?: boolean;
        /**
         * @docid dxDashboardControlOptions.allowMaximizeItems
         * @type boolean
         * @default true
         * @public
         */
        allowMaximizeItems?: boolean;
        /**
         * @docid dxDashboardControlOptions.endpoint
         * @type string
         * @default ""
         * @public
         */
        endpoint?: string;
        /**
         * @docid dxDashboardControlOptions.ajaxRemoteService
         * @type object
         * @public
         */
        ajaxRemoteService?: DevExpress.Dashboard.AjaxRemoteServiceOptions;
        /**
         * @docid dxDashboardControlOptions.fetchRemoteService
         * @type object
         * @public
         */
        fetchRemoteService?: DevExpress.Dashboard.FetchRemoteServiceOptions;
        /**
         * @docid dxDashboardControlOptions.onInitializing
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onInitializing?: (args: DashboardControlArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onBeforeRender
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onBeforeRender?: (args: DashboardControlArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onDashboardInitializing
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onDashboardInitializing?: (args: DashboardInitializingArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onDashboardInitialized
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onDashboardInitialized?: (args: DashboardInitializedArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onDashboardStateChanged
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onDashboardStateChanged?: (args: DashboardStateChangedArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onItemBeginUpdate
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onItemBeginUpdate?: (args: DashboardItemUpdateArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onItemEndUpdate
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onItemEndUpdate?: (args: DashboardItemUpdateArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onDashboardBeginUpdate
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onDashboardBeginUpdate?: (args: DashboardUpdateArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onDashboardEndUpdate
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onDashboardEndUpdate?: (args: DashboardUpdateArgs) => void;
        /**
         * @docid dxDashboardControlOptions.onOptionChanged
         * @extends Action
         * @type function(e)
         * @type_function_param1 e:object
         * @action
         * @public
         */
        onOptionChanged?: (args: DashboardOptionChangedArgs<DashboardControlOptions>) => void;
        /**
         * @docid dxDashboardControlOptions.dataRequestOptions
         * @type object
         * @public
         */
        dataRequestOptions?: DataRequestOptions;
        useCardLegacyLayout?: boolean;
        /**
         * @docid dxDashboardControlOptions.extensions
         * @type object
         * @public
         */
        extensions?: ExtensionOptions | false;
        /**
         * @docid dxDashboardControlOptions.nonce
         * @type string
         * @public
         */
        nonce?: string;
    }
    export interface DashboardOptionChangedArgs<T> {
        name: keyof T;
        fullName: string;
        value: any;
    }
    export type DashboardControlEvents = {
        initializing: DashboardControlArgs;
        beforeRender: DashboardControlArgs;
        dashboardInitializing: DashboardInitializingArgs;
        dashboardInitialized: DashboardInitializedArgs;
        dashboardStateChanged: DashboardStateChangedArgs;
        itemBeginUpdate: DashboardItemUpdateArgs;
        itemEndUpdate: DashboardItemUpdateArgs;
        dashboardBeginUpdate: DashboardUpdateArgs;
        dashboardEndUpdate: DashboardUpdateArgs;
        optionChanged: DashboardOptionChangedArgs<DashboardControlOptions>;
    };
    export interface DataRequestOptions {
        /**
         * @docid dxDashboardControlOptions.dataRequestOptions.itemDataRequestMode
         * @type string
         * @public
         */
        itemDataRequestMode?: ItemDataRequestMode;
        /**
         * @docid dxDashboardControlOptions.dataRequestOptions.itemDataLoadingMode
         * @type string
         * @public
         */
        itemDataLoadingMode?: ItemDataLoadingMode;
    }
    export type ItemDataLoadingMode = "Always" | "OnDemand";
    export type ItemDataRequestMode = "SeparateRequests" | "BatchRequests";
    export type RefreshItemsArgs = string | Array<string>;
    export type DashboardControlArgs = {
        component: DevExpress.Dashboard.DashboardControl;
    };
    export type DashboardUpdateArgs = {
        component: DevExpress.Dashboard.DashboardControl;
        dashboardId: string;
    };
    export type DashboardItemUpdateArgs = {
        component: DevExpress.Dashboard.DashboardControl;
        dashboardId: string;
        itemName: string;
    };
    export type DashboardInitializedArgs = {
        component: DevExpress.Dashboard.DashboardControl;
        dashboardId: string;
        dashboard: DevExpress.Dashboard.Model.Dashboard;
    };
    export type DashboardStateChangedArgs = {
        component: DevExpress.Dashboard.DashboardControl;
        dashboardId: string;
        dashboard: DevExpress.Dashboard.Model.Dashboard;
        stateString: string;
    };
    export type DashboardInitializingArgs = {
        component: DevExpress.Dashboard.DashboardControl;
        dashboardId: string;
        dashboard: DevExpress.Dashboard.Model.Dashboard;
        ready: JQueryPromise<any>;
    };
}
declare module DevExpress.Dashboard.Internal {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import Constraints = DevExpress.Dashboard.Internal.Viewer.Constraints;
    import ISize = DevExpress.Dashboard.Internal.Viewer.ISize;
    import ErrorInfo = DevExpress.Dashboard.ErrorInfo;
    import IExtension = DevExpress.Dashboard.IExtension;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import DashboardOptionChangedArgs = DevExpress.Dashboard.DashboardOptionChangedArgs;
    import NotificationController = DevExpress.Dashboard.NotificationController;
    export var KeyCodes: {
        Esc: number;
        Delete: number;
        Z: number;
        Y: number;
        S: number;
    };
    export interface OptionConsumer<TOptions> {
        getDefaultOptions(): TOptions;
        getInitialOptions(): TOptions;
        optionChanged(args: DevExpress.Dashboard.DashboardOptionChangedArgs<TOptions>): DashboardControlActions;
    }
    export interface ISupportOptionExtension<TOptions> extends IExtension {
        _optionsManager: OptionConsumer<TOptions>;
    }
    export interface IErrorHandler {
        showError(title: string, errorInfo?: DevExpress.Dashboard.ErrorInfo): any;
    }
    export interface IDashboardUrls {
        GetDashboardsAction: string;
        DashboardAction: string;
    }
    export interface IDataSourceUrls {
        GetDataSourcesAction: string;
    }
    export interface IDataSourceWizardUrls {
        DataSourceWizardAction: string;
        GetConnectionStringsAction: string;
    }
    export interface IDataServiceUrls {
        ConvertItemAction: string;
        FieldListAction: string;
        ParameterValuesAction: string;
        DimensionUniqueValuesAction: string;
        DimensionFilterItemsAction: string;
        DimensionFilterStringAction: string;
        DashboardItemGetAction: string;
        PerformExportAction: string;
        GetColoringSchemeAction: string;
        GetDashboardPaletteAction: string;
        GetUnderlyingDataAction: string;
        GetMapShapeFileAction: string;
        MarkDataSourcesForReloadAction: string;
        DashboardItemBatchGetAction: string;
        GetAvailableFontFamiliesAction: string;
    }
    export interface IEndpointCollection {
        dashboardUrls?: IDashboardUrls;
        dataSourceUrls?: IDataSourceUrls;
        dataSourceWizardUrls?: IDataSourceWizardUrls;
        dataServiceUrls?: IDataServiceUrls;
    }
    export class SingleItemSizeController implements ISizeController {
        private _element;
        requestRepaint: any;
        private itemMargins;
        renderImmediately: boolean;
        constructor(_element: Element, requestRepaint: any, itemMargins?: number);
        getWidth(): number;
        getHeight(): number;
        setConstraints(constraints: {
            min: DevExpress.Dashboard.Internal.Viewer.ISize;
            max: DevExpress.Dashboard.Internal.Viewer.ISize;
        }): void;
    }
    export class SingleTabItemSizeController implements ISizeController {
        requestRepaint: any;
        width: ko.Observable<number>;
        height: ko.Observable<number>;
        renderImmediately: boolean;
        constructor(requestRepaint: any, width: ko.Observable<number>, height: ko.Observable<number>);
        getWidth(): number;
        getHeight(): number;
        setConstraints(constraints: {
            min: DevExpress.Dashboard.Internal.Viewer.ISize;
            max: DevExpress.Dashboard.Internal.Viewer.ISize;
        }): void;
    }
    export interface ISizeController {
        getWidth: () => number;
        getHeight: () => number;
        requestRepaint: JQueryCallback;
        renderImmediately?: boolean;
        setConstraints?: (constraints: DevExpress.Dashboard.Internal.Viewer.Constraints) => void;
        visible?: ko.Subscribable<boolean>;
    }
    export interface DashboardLayoutController {
        fullscreenItemProvider: FullscreenItemProvider;
        visibleItemsProvider: VisibleItemsProvider;
        selectedDashboardItem: ko.Computed<DevExpress.Dashboard.Model.DashboardItem>;
        emptyItemTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>;
        selectedLayoutItem: ko.Computed<ISizeController>;
        allowMaximizeItems: boolean;
    }
    export interface FullscreenItemProvider {
        maximizedItemName: string;
        maximizeItem(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): any;
        restoreDownItem(): any;
    }
    export interface VisibleItemsProvider {
        visibleItems: ko.Subscribable<DevExpress.Dashboard.Model.DashboardItem[]>;
    }
    export interface LayoutInfoProvider {
        name: string;
        getViewModel: () => Object;
        getLayoutController: () => ko.Subscribable<DashboardLayoutController>;
        condition: () => boolean;
    }
    export interface DashboardControlViewModel {
        getWidgetContainer: () => HTMLElement;
        surfaceLeft: ko.Subscribable<number>;
        colorSchemeCss: string;
        isLoading: ko.Subscribable<boolean>;
        isDashboardLoaded: ko.Subscribable<boolean>;
        layoutTemplate: DevExpress.Dashboard.KnockoutTemplate;
        externalTemplates: ko.Subscribable<Array<DevExpress.Dashboard.KnockoutTemplate>>;
        emptyControlTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>;
        notificationController: DevExpress.Dashboard.NotificationController;
        $unwrap: (element: Element | JQuery) => Element;
        $: any;
        ko: any;
    }
    export type DashboardControlActions = "updateItemToolbars" | "updateDashboardToolbar" | "refreshData" | "reinitializeDashboard" | "loadDashboard" | "noop";
    export type DashboardControlState = "controlInitializing" | "controlInitialized" | "dashboardLoading" | "dashboardLoaded" | "dashboardInitializing" | "dashboardInitialized";
}
declare module DevExpress.Dashboard.Internal {
    export interface IResizableModel {
        width: ko.Subscribable<number>;
        height: ko.Subscribable<number>;
        isValidWidth?: (width: number) => boolean;
        isValidHeight?: (width: number) => boolean;
        resizeHandles: () => string;
        resizeStarted?: () => void;
        resizeCompleted?: () => void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardLayoutGroupOrientation = DevExpress.Dashboard.Model.DashboardLayoutGroupOrientation;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import LayoutItemInsertPosition = DevExpress.Dashboard.Model.LayoutItemInsertPosition;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import DashboardItemJson = DevExpress.Dashboard.Metadata.DashboardItemJson;
    import Constraints = DevExpress.Dashboard.Internal.Viewer.Constraints;
    import ISizeController = DevExpress.Dashboard.Internal.ISizeController;
    import DashboardItemContext = DevExpress.Dashboard.Internal.DashboardItemContext;
    import IResizableModel = DevExpress.Dashboard.Internal.IResizableModel;
    export interface ILayoutItemViewModel {
        create: (modelItemJson: any, location: string, insertionBehavior?: LayoutItemInsertionBehavior) => any;
        moveTo: (itemModel?: ILayoutItemViewModel, location?: DevExpress.Dashboard.Model.LayoutItemInsertPosition, insertionBehavior?: LayoutItemInsertionBehavior) => any;
        delete: () => void;
        canAttach?: (something: ILayoutItemViewModel | DevExpress.Dashboard.Metadata.DashboardItemJson) => boolean;
        createTabPage: () => void;
        model: DevExpress.Dashboard.Model.DashboardLayoutNode;
        item: ko.Subscribable<DevExpress.Dashboard.Model.DashboardItem>;
        dashboardItem: ko.Subscribable<string>;
        orientation: ko.Observable<DevExpress.Dashboard.Model.DashboardLayoutGroupOrientation>;
        weight: ko.Observable<number>;
        visibleItems: ko.ObservableArray<ILayoutItemViewModelProvider>;
        childItems: ko.ObservableArray<ILayoutItemViewModelProvider>;
        activeTabPage: DevExpress.Dashboard.Internal.Model.KnockoutEntry<DashboardTabPage>;
        activeTabIndex: DevExpress.Dashboard.Internal.Model.KnockoutEntry<number>;
        template: string;
        hasItem: ko.Subscribable<boolean>;
        ignoreChildMaxHeight: boolean;
        dragOverInnerElementController?: DragOverController;
        getPlaceholder(): ILayoutItemViewModel;
    }
    export interface ILayoutItemViewModelProvider {
        _createViewModel(): ILayoutItemViewModel;
    }
    export interface DragOverController {
        selector: string;
        onDragOver(elementIndex: number): void;
    }
    export interface ObservableConstraints {
        min: {
            width: ko.Observable<number>;
            height: ko.Observable<number>;
        };
        max: {
            width: ko.Observable<number>;
            height: ko.Observable<number>;
        };
    }
    export interface LayoutDroppableItem {
        node: LayoutItem;
        dropBehavior: LayoutItemInsertionBehavior;
    }
    export type LayoutItemInsertionBehavior = "InsertIntoGroup" | "InsertBesideGroup";
    export function _syncLayoutHelper<T, U extends DevExpress.Dashboard.Model.IDisposable>(sourceArray: ko.ObservableArray<T>, destArray: ko.ObservableArray<U>, addHandler: (value: T) => U): ko.Subscription;
    export function setHoverLocation(hoverLayoutItem: LayoutItem, location?: DevExpress.Dashboard.Model.LayoutItemInsertPosition, dropBehavior?: LayoutItemInsertionBehavior): void;
    export let SplitterSize: number;
    export const MinWeight = 0.00001;
    export type LayoutEvent = "click" | "mouseover" | "resize-started" | "resize-completed" | "get-context" | "get-local-context" | "get-context-menu-service" | "get-empty-item-templates-service" | "get-layout-item-placeholder-service";
    export class LayoutItem implements IResizableModel, IDisposable {
        viewModel: ILayoutItemViewModel;
        private _isUpdating;
        static findLargestItem(layoutItem: LayoutItem): {
            maxSquare: number;
            item: LayoutItem;
        };
        private _constraints;
        _parent: ko.Observable<LayoutItem>;
        private _width;
        private _height;
        private _subscriptions;
        private _changeWeight;
        private _changeWeightCore;
        private _correntWeight;
        private _safeSetWidth;
        private _safeSetHeight;
        private _updateChildrenSize;
        private _updateChildrenResizeHandles;
        constructor(viewModel: ILayoutItemViewModel, parent?: LayoutItem);
        dispose(): void;
        isValidWidth(val: number): boolean;
        isValidHeight(val: number): boolean;
        setConstraints: (constraints: DevExpress.Dashboard.Internal.Viewer.Constraints) => void;
        getSelectionParentsList(location: DevExpress.Dashboard.Model.LayoutItemInsertPosition): LayoutDroppableItem[];
        private _getRequiredOrientationByLocation;
        private _inverseOrientation;
        private _checkGroupWillBeUnwrapped;
        findLayoutItem(criteria: (item: LayoutItem) => boolean): LayoutItem;
        findLayoutItemByItemModel(itemModel: ILayoutItemViewModel): LayoutItem;
        items: ko.ObservableArray<LayoutItem>;
        minWidth: ko.Computed<number>;
        minHeight: ko.Computed<number>;
        maxWidth: ko.Computed<number>;
        maxHeight: ko.Computed<number>;
        width: ko.Computed<number>;
        height: ko.Computed<number>;
        contentWidth: ko.Computed<number>;
        contentHeight: ko.Computed<number>;
        containerWidth: ko.Computed<number>;
        containerHeight: ko.Computed<number>;
        resizeHandles: ko.Observable<string>;
        isSelected: ko.Observable<boolean>;
        areChildrenSelected: ko.Computed<boolean>;
        dragOverLocation: ko.Observable<DevExpress.Dashboard.Model.LayoutItemInsertPosition>;
        itemStyle: ko.Computed<string>;
        onEvent(item: LayoutItem, event: LayoutEvent): any;
        coverClickHandler: (e: any) => void;
        coverMouseOverHandler: (e: any) => void;
        resizeStarted: () => void;
        resizeCompleted: () => void;
        getContext: () => any;
        getLocalContext: () => DevExpress.Dashboard.Internal.DashboardItemContext;
        getContextMenu: () => any;
        getEmptyItemTemplates: () => any;
        getLayoutItemPlaceholder: () => any;
        verticalPaddings: ko.Observable<number>;
        horizontalPaddings: ko.Observable<number>;
        isDesignMode: ko.Observable<boolean>;
        isLayoutReady: ko.Observable<boolean>;
        updateSize(width: number, height: number): void;
        visible: ko.Computed<boolean>;
        create(modelItemJson?: any, location?: string, insertBehavior?: LayoutItemInsertionBehavior): LayoutItem;
        moveTo(layoutNode: LayoutItem, location: DevExpress.Dashboard.Model.LayoutItemInsertPosition, insertBehavior?: LayoutItemInsertionBehavior): LayoutItem;
        delete(): void;
        getRoot(): LayoutItem;
        canAttach(something: ILayoutItemViewModel | DevExpress.Dashboard.Metadata.DashboardItemJson): boolean;
        placeholderItem: LayoutItem;
        getPlaceholder(): LayoutItem;
        repaintCallbacks: JQuery.Callbacks<Function>;
        sizeController: DevExpress.Dashboard.Internal.ISizeController;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ILayoutItemViewModel = DevExpress.Dashboard.Internal.ILayoutItemViewModel;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import LayoutItemInsertPosition = DevExpress.Dashboard.Model.LayoutItemInsertPosition;
    export class DashboardLayoutItemPlaceholder extends DashboardLayoutNode {
        protected get _template(): string;
        constructor(parent?: DevExpress.Dashboard.Model.DashboardLayoutGroup, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        moveTo(itemModel: DevExpress.Dashboard.Model.DashboardLayoutNode, location: string): void;
        _delete(): void;
        _createViewModel(): DevExpress.Dashboard.Internal.ILayoutItemViewModel;
        protected _insertItemCore(layoutNodeToInsert: DevExpress.Dashboard.Model.DashboardLayoutNode, position: DevExpress.Dashboard.Model.LayoutItemInsertPosition): void;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    export var _layoutItemTypeMap: {};
    export function deserializeDashboardLayoutNode(itemModel: Object, serializer?: DevExpress.Analytics.Utils.ModelSerializer): any;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ILayoutItemViewModel = DevExpress.Dashboard.Internal.ILayoutItemViewModel;
    import LayoutItemInsertionBehavior = DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior;
    import DashboardLayoutGroupOrientation = DevExpress.Dashboard.Model.DashboardLayoutGroupOrientation;
    import IDashboardItemsProvider = DevExpress.Dashboard.Internal.Model.IDashboardItemsProvider;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import LayoutItemInsertPosition = DevExpress.Dashboard.Model.LayoutItemInsertPosition;
    export class DashboardLayoutGroup extends DashboardLayoutNode {
        protected get _template(): string;
        protected get _createPlaceholderFunc(): () => DevExpress.Dashboard.Internal.ILayoutItemViewModel;
        protected get _visibleItems(): ko.ObservableArray<DevExpress.Dashboard.Model.DashboardLayoutNode>;
        protected get _childItems(): ko.ObservableArray<DevExpress.Dashboard.Model.DashboardLayoutNode>;
        protected get _orientation(): ko.Observable<DevExpress.Dashboard.Model.DashboardLayoutGroupOrientation>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        orientation: ko.Observable<DevExpress.Dashboard.Model.DashboardLayoutGroupOrientation>;
        childNodes: ko.ObservableArray<DevExpress.Dashboard.Model.DashboardLayoutNode>;
        findLayoutItem(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): DevExpress.Dashboard.Model.DashboardLayoutNode;
        getNodesRecursive(): Array<DevExpress.Dashboard.Model.DashboardLayoutNode>;
        getItemsRecursive(): Array<DevExpress.Dashboard.Model.DashboardLayoutNode>;
        private _attachToGroupWithInversedOrientation;
        _attachChild(target: DevExpress.Dashboard.Model.DashboardLayoutNode, itemToAttach: DevExpress.Dashboard.Model.DashboardLayoutNode, position: DevExpress.Dashboard.Model.LayoutItemInsertPosition): void;
        _detachChild(removedChildLayoutNode: DevExpress.Dashboard.Model.DashboardLayoutNode): void;
        private _ensureGroupIsNeeded;
        private _wrapChildWithGroup;
        private _getOrientationByInsertPosition;
        _insertItemCore(layoutNodeToInsert: DevExpress.Dashboard.Model.DashboardLayoutNode, position: DevExpress.Dashboard.Model.LayoutItemInsertPosition, insertionBehavior?: DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior): void;
        _addItem(layoutNodeToInsert: DevExpress.Dashboard.Model.DashboardLayoutNode): void;
        protected _getDefaultItemType(): string;
        _deleteDashbordItem(): void;
    }
    export class DashboardLayoutRootGroup extends DashboardLayoutGroup {
        constructor(dashboard: DevExpress.Dashboard.Internal.Model.IDashboardItemsProvider, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getDefaultItemType(): string;
        _addItem(layoutNodeToInsert: DevExpress.Dashboard.Model.DashboardLayoutNode): void;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    export class DashboardLayoutItem extends DashboardLayoutNode {
        protected get _template(): string;
        constructor(modelJson?: Object, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getDefaultItemType(): string;
        _deleteDashbordItem(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
    export class DashboardLayoutCreator {
        private _clientWidth;
        private _clientHeight;
        private _dashboard;
        _layoutRoot: DevExpress.Dashboard.Model.DashboardLayoutGroup;
        constructor(_clientWidth: number, _clientHeight: number, _dashboard: DevExpress.Dashboard.Model.Dashboard);
        rebuildLayout(): void;
        private _removeIncorrectLayoutNodes;
        private _getParentItem;
        _createLayoutNodes(dashboardItems: Array<DevExpress.Dashboard.Model.DashboardItem>): void;
        _createLayoutNode(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, layoutGroup: DevExpress.Dashboard.Model.DashboardLayoutGroup): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DxElement = DevExpress.core.DxElement;
    import dxForm = DevExpress.ui.dxForm;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import FormAdapterItem = DevExpress.Dashboard.Metadata.FormAdapterItem;
    import PropertyEditorInfo = DevExpress.Dashboard.Metadata.PropertyEditorInfo;
    import SimpleFormAdapterItems = DevExpress.Dashboard.Metadata.SimpleFormAdapterItems;
    export interface WrapperPropertyInfo extends PropertyEditorInfo {
        replacementPropertyName?: string;
        sourceObject?: any;
    }
    export interface PropertyDesciptors extends Array<DevExpress.Dashboard.Metadata.PropertyEditorInfo | WrapperPropertyInfo | {
        container: DevExpress.Dashboard.Metadata.PropertyEditorInfo;
        properties: PropertyDesciptors;
    }> {
    }
    export interface ObjectPropertiesRules {
        [key: string]: Array<any> | ((model: any) => boolean);
    }
    export interface DynamicEditorInfo {
        simpleFormAdapterItem?: DevExpress.Dashboard.Metadata.SimpleFormAdapterItems;
        formAdapterItem?: DevExpress.Dashboard.Metadata.FormAdapterItem;
        editor?: any;
        editorOptions?: Object;
    }
    export interface IDynamicEditorRules<T> {
        [key: string]: (model: T) => DynamicEditorInfo;
    }
    export interface ObjectPropertiesInfo<TModel = any> {
        properties: PropertyDesciptors;
        visibilityFilterRules?: ObjectPropertiesRules;
        disabledFilterRules?: ObjectPropertiesRules;
        dynamicEditorRules?: IDynamicEditorRules<TModel>;
        disposableModelSubscriptions?: DevExpress.Dashboard.Model.DisposableType[];
    }
    export interface ObjectPropertiesWrapperOptions<TModel = any> extends ObjectPropertiesInfo<TModel> {
        model: TModel;
        modelExtention?: any;
        summary?: ko.Computed<string>;
    }
    export class ObjectPropertiesWrapper<TModel = any> {
        private _serializationInfo;
        private _modelSubscriptions;
        model: TModel;
        visibilityFilterRules: ObjectPropertiesRules;
        disabledFilterRules: ObjectPropertiesRules;
        summary: ko.Computed<string>;
        dynamicEditorRules: IDynamicEditorRules<TModel>;
        onContentReady: ((e: {
            component?: DevExpress.ui.dxForm;
            element?: DevExpress.core.DxElement;
        }) => void);
        onInitialized: ((e: {
            component?: DevExpress.ui.dxForm;
            element?: DevExpress.core.DxElement;
        }) => void);
        onFieldDataChanged: (e: {
            component?: DevExpress.ui.dxForm;
            element?: DevExpress.core.DxElement;
            model?: any;
            dataField?: string;
            value?: any;
        }) => any;
        constructor(options: ObjectPropertiesWrapperOptions<TModel>);
        getPropertiesFromContainer(cur: any, properties: PropertyDesciptors): void;
        _validationProvider: DevExpress.ui.dxForm;
        assignValidationPovider(validationProvider: DevExpress.ui.dxForm): void;
        _assignPropertyCore(propertyObject: any, info: DevExpress.Dashboard.Metadata.PropertyEditorInfo): void;
        addProperty(propertyValue: any, info: DevExpress.Dashboard.Metadata.PropertyEditorInfo): void;
        getInfo(): DevExpress.Dashboard.Metadata.PropertyEditorInfo[];
        isEmpty(): boolean;
        isPropertyVisible: (name: string) => boolean;
        isPropertyDisabled: (name: string) => boolean;
        getDynamicEditor: (name: string) => DynamicEditorInfo;
        unbindModel(): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let titleText: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let titleVisible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let includeMasterFilter: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let titleAlignment: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let titleImage64: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let titleImageUrl: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let titleImageType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dashboardTitleSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import DashboardTitleAlignment = DevExpress.Dashboard.Model.DashboardTitleAlignment;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export class DashboardTitle extends SerializableModel {
        imageType: ko.Observable<string>;
        text: ko.Observable<string>;
        visible: ko.Observable<boolean>;
        includeMasterFilter: ko.Observable<boolean>;
        alignment: ko.Observable<DevExpress.Dashboard.Model.DashboardTitleAlignment>;
        image64: ko.Observable<string>;
        url: ko.Observable<string>;
        _titleSettings: DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
        constructor(model: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let currencyCultureName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dashboardTitle: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let items: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let parameters: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let colorScheme: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let groups: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataSources: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layout: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layoutOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dashboardSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import CustomProperties = DevExpress.Dashboard.Model.CustomProperties;
    import ICustomPropertiesProvider = DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider;
    import DashboardState = DevExpress.Dashboard.Model.DashboardState;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import IColorSignaturesProvider = DevExpress.Dashboard.Internal.Model.IColorSignaturesProvider;
    import IMasterFilterItemsProvider = DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import GroupItem = DevExpress.Dashboard.Model.GroupItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import LayoutOptions = DevExpress.Dashboard.Model.LayoutOptions;
    import IQueryParameter = DevExpress.Dashboard.Model.IQueryParameter;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import DashboardTitle = DevExpress.Dashboard.Model.DashboardTitle;
    export class Dashboard extends SerializableModel implements IMasterFilterItemsProvider, IColorSignaturesProvider, ICustomPropertiesProvider {
        dashboardJSON: any;
        static _dataSourceTypesMap: {
            [key: string]: new (json: Object, serializer: DevExpress.Analytics.Utils.ModelSerializer) => DevExpress.Dashboard.Model.DataSource;
        };
        static _createDataSource(dataSourceJSON: Object, serializer: DevExpress.Analytics.Utils.ModelSerializer): DevExpress.Dashboard.Model.DataSource;
        dataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>;
        parameters: ko.ObservableArray<DevExpress.Dashboard.Model.Parameter>;
        colorScheme: ko.ObservableArray<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        currencyCultureName: ko.Observable<string>;
        items: ko.ObservableArray<DevExpress.Dashboard.Model.DashboardItem>;
        groups: ko.ObservableArray<DevExpress.Dashboard.Model.GroupItem>;
        layout: ko.Observable<DevExpress.Dashboard.Model.DashboardLayoutGroup>;
        layoutOptions: DevExpress.Dashboard.Model.LayoutOptions;
        title: DevExpress.Dashboard.Model.DashboardTitle;
        customProperties: DevExpress.Dashboard.Model.CustomProperties;
        _tabPages: ko.ObservableArray<DevExpress.Dashboard.Model.DashboardItem>;
        _allItems: ko.PureComputed<Array<DevExpress.Dashboard.Model.DashboardItem>>;
        _dataDashboardItems: ko.Computed<DevExpress.Dashboard.Model.DataDashboardItem[]>;
        _colorableItems: ko.Subscribable<DevExpress.Dashboard.Model.DashboardItem[]>;
        _queryParameters: ko.Subscribable<DevExpress.Dashboard.Model.IQueryParameter[]>;
        _masterFilterItems: ko.Computed<DevExpress.Dashboard.Model.DataDashboardItem[]>;
        _state: ko.Computed<DevExpress.Dashboard.Model.DashboardState>;
        private _disposables;
        private _componentNameGenerator;
        get stateString(): string;
        set stateString(stateVal: string);
        constructor(dashboardJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        dispose(): void;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getJSON(): any;
        findItem(itemId: string): DevExpress.Dashboard.Model.DashboardItem;
        rebuildLayout(clientWidth?: number, clientHeight?: number): void;
        _getDisplayDashboardItem(tabPage: DevExpress.Dashboard.Model.DashboardTabPage): DevExpress.Dashboard.Model.DashboardItem;
        _changeItem(oldItem: DevExpress.Dashboard.Model.DashboardItem, newItem: DevExpress.Dashboard.Model.DashboardItem): void;
        _duplicateItem(item: DevExpress.Dashboard.Model.DashboardItem): void;
        _createDashboardLayoutItem(modelItemJson?: any): DevExpress.Dashboard.Model.DashboardLayoutNode;
        _createDashboardLayoutNode(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): DevExpress.Dashboard.Model.DashboardLayoutNode;
        _findDataItem(itemId: string): DevExpress.Dashboard.Model.DataDashboardItem;
        _interactivityGroupPathToRoot(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): Array<DevExpress.Dashboard.Model.GroupItem | DevExpress.Dashboard.Model.DashboardTabPage>;
        private _processDeleteDataSource;
    }
}
declare module DevExpress.Dashboard.Internal {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardExcelExportOptions = DevExpress.Dashboard.DashboardExcelExportOptions;
    import DashboardImageExportOptions = DevExpress.Dashboard.DashboardImageExportOptions;
    import DashboardPdfExportOptions = DevExpress.Dashboard.DashboardPdfExportOptions;
    import exportDialog = DevExpress.Dashboard.Internal.Viewer.exportDialog;
    import ClientExportOptions = DevExpress.Dashboard.Internal.Viewer.ClientExportOptions;
    import ExportOptions = DevExpress.Dashboard.Internal.Viewer.ExportOptions;
    import ExportInfo = DevExpress.Dashboard.Internal.ExportInfo;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
    import DashboardExportDialogArgs = DevExpress.Dashboard.DashboardExportDialogArgs;
    import DashboardExportFormat = DevExpress.Dashboard.DashboardExportFormat;
    export type ExportMode = "SingleItem" | "EntireDashboard";
    export interface ExportModeInfo {
        mode: ExportMode;
        format: DevExpress.Dashboard.DashboardExportFormat;
        clientState: ClientExportState;
        fileName: string;
        name?: string;
        itemType?: string;
    }
    export interface ItemExportInfo {
        position?: JQuery.Coordinates;
        name: string;
        caption?: string;
    }
    export interface ClientExportState {
        clientSize: {
            width: number;
            height: number;
        };
        titleHeight: number;
        itemsState: ItemExportInfo[];
    }
    export interface IExportInfoProvider {
        getItemExportInfo(itemName: string, mode: ExportMode, isCaption: boolean): ItemExportInfo;
    }
    export class ExportDialogBinderOptions {
        dashboard: ko.Computed<DevExpress.Dashboard.Model.Dashboard>;
        serviceClient: ko.Observable<DevExpress.Dashboard.Internal.IDataServiceClient>;
        getContainer: () => Element;
        exportInfoProvider: IExportInfoProvider;
        pdfExportOptions: DevExpress.Dashboard.DashboardPdfExportOptions;
        imageExportOptions: DevExpress.Dashboard.DashboardImageExportOptions;
        excelExportOptions: DevExpress.Dashboard.DashboardExcelExportOptions;
        onExportDialogShown: (args: DevExpress.Dashboard.DashboardExportDialogArgs) => void;
        onExportDialogShowing: (args: DevExpress.Dashboard.DashboardExportDialogArgs) => void;
        onExportDialogHidden: (args: DevExpress.Dashboard.DashboardExportDialogArgs) => void;
    }
    export class ExportDialogBinder {
        private _options;
        availableExportFormats: DevExpress.Dashboard.DashboardExportFormat[];
        exportOptions: DevExpress.Dashboard.Internal.Viewer.ExportOptions;
        private _exportDialog;
        constructor(_options: ExportDialogBinderOptions);
        reset(): void;
        _getClientSize(container: HTMLElement, mode: ExportMode): {
            width: number;
            height: number;
        };
        _getActualComponentName(item: DevExpress.Dashboard.Model.DashboardItem): string;
        _getExportHolderItem(item: DevExpress.Dashboard.Model.DashboardItem): DevExpress.Dashboard.Model.DashboardItem;
        _getInfo(items: Array<DevExpress.Dashboard.Model.DashboardItem>, titleHeight: number, mode: ExportMode, format: DevExpress.Dashboard.DashboardExportFormat): ClientExportState;
        _getFilterFormattableValues(dashboard: DevExpress.Dashboard.Model.Dashboard, exportGroupName: string, item: DevExpress.Dashboard.Model.DashboardItem, exportInfo: DevExpress.Dashboard.Internal.ExportInfo): void | any[];
        exportDashboardTo(format: DevExpress.Dashboard.DashboardExportFormat, clientOptions: DevExpress.Dashboard.Internal.Viewer.ClientExportOptions, customFileName?: any): void;
        exportDashboardItemTo(itemComponentName: string, format: DevExpress.Dashboard.DashboardExportFormat, clientOptions: DevExpress.Dashboard.Internal.Viewer.ClientExportOptions, customFileName?: string): void;
        showDashboardDialog: (format: DevExpress.Dashboard.DashboardExportFormat) => void;
        showItemDialog: (itemComponentName: string, format: DevExpress.Dashboard.DashboardExportFormat) => void;
        hide: () => void;
        get exportDialog(): DevExpress.Dashboard.Internal.Viewer.exportDialog;
        _getExportItemType(item: DevExpress.Dashboard.Model.DashboardItem): string;
        private _getGroupExternalDisplayFilterValues;
        private _exportTo;
        _getExportDataQueryParams(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, modeInfo: ExportModeInfo): any;
        private _validateExportFormat;
        private _validateDashboardExport;
    }
    export class ExportInfoManager extends DisposableObject implements IExportInfoProvider {
        private _primaryExportInfoProviders;
        private _secondaryExportInfoProviders;
        private _captionExportInfoProviders;
        getItemExportInfo(itemName: string, mode: ExportMode, isCaption: boolean): ItemExportInfo;
        registerPrimaryExportItem(itemName: string, getExportInfoFunc: () => ItemExportInfo): void;
        unregisterPrimaryExportItem(itemName: string): void;
        registerSecondaryExportItem(itemName: string, getExportInfoFunc: () => ItemExportInfo): void;
        unregisterSecondaryExportItem(itemName: string): void;
        registerCaptionExportItem(itemName: string, getExportInfoFunc: () => ItemExportInfo): void;
        unregisterCaptionExportItem(itemName: string): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IQueryParameter = DevExpress.Dashboard.Model.IQueryParameter;
    import IExportOptions = DevExpress.Dashboard.Internal.Viewer.IExportOptions;
    import IFilterItem = DevExpress.Dashboard.Internal.IFilterItem;
    import DashboardContainer = DevExpress.Dashboard.DashboardContainer;
    import IRemoteService = DevExpress.Dashboard.IRemoteService;
    import ClientExportState = DevExpress.Dashboard.Internal.ClientExportState;
    import ExportMode = DevExpress.Dashboard.Internal.ExportMode;
    import DashboardExportFormat = DevExpress.Dashboard.DashboardExportFormat;
    import IDataServiceUrls = DevExpress.Dashboard.Internal.IDataServiceUrls;
    import IErrorHandler = DevExpress.Dashboard.Internal.IErrorHandler;
    export interface ExportInfo {
        Mode: DevExpress.Dashboard.Internal.ExportMode;
        GroupName: string;
        FileName: string;
        ClientState: DevExpress.Dashboard.Internal.ClientExportState;
        Format: DevExpress.Dashboard.DashboardExportFormat;
        DocumentOptions: DevExpress.Dashboard.Internal.Viewer.IExportOptions;
        ItemType: string;
    }
    export interface ItemExportModel {
        name: string;
        query: any;
        drillDownFormattableValues: Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        filterFormattableValues: Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        selectedValues: Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
    }
    interface ICommonQueryArgs {
        dashboardId: string;
        parameters: DevExpress.Dashboard.Model.IQueryParameter[];
        dashboard?: Object;
    }
    export interface IDataServiceClient {
        convertItem(item: DevExpress.Dashboard.Model.DashboardItem, destinationItemTypeName: string): JQueryPromise<{}>;
        getParameterValues(dataSourceId: string, dataSource: DevExpress.Dashboard.Model.DataSource, dataMember: string, valueMember: string, displayMember: string, sortOrder: string, sortByMember: string, parameterType: string): JQueryPromise<{}>;
        getDimensionUniqueValues(dataSource: DevExpress.Dashboard.Model.DataSource, dataMember: string, dimension: DevExpress.Dashboard.Model.Dimension): JQueryPromise<{}>;
        getDimensionFilterItems(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, dimensionDataMember: string, previousState: Array<DevExpress.Dashboard.Internal.IFilterItem>, branch: Array<any>): JQueryPromise<Array<DevExpress.Dashboard.Internal.IFilterItem>>;
        getDimensionFilterString(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, dimensionDataMember: string, previousState: Array<DevExpress.Dashboard.Internal.IFilterItem>): JQueryPromise<string>;
        getFieldList(dataSource: DevExpress.Dashboard.Model.DataSource, dataMember: string, fieldPath: string): JQueryPromise<{}>;
        getItemData(item: DevExpress.Dashboard.Model.DashboardItem, isModeAllowsToReduceData: boolean): JQueryPromise<{}>;
        getColoringScheme: (itemName: string) => JQueryPromise<{}>;
        getMapShapeFile: (itemName: string) => JQueryPromise<{}>;
        getDashboardPalette: () => JQueryPromise<Object>;
        getUnderlyingData: (itemName: string, columnValues: Array<string>, rowValues: Array<string>, columnNames: Array<string>, dataQueryParams: any) => JQueryPromise<{}>;
        markDataSourcesForReload: () => JQueryPromise<{}>;
        performExport(exportArgs: ExportInfo, exportModels: ItemExportModel[]): any;
        getBatchItemData(args: Array<DevExpress.Dashboard.Model.DashboardItem>, isModeAllowsToReduceData: boolean): JQueryPromise<any>;
        getAvailableFontFamilies: () => JQueryPromise<string[]>;
    }
    export class ViewerDataServiceClient implements IDataServiceClient {
        protected _dashboardContainer: DevExpress.Dashboard.DashboardContainer;
        protected _errorHandler: DevExpress.Dashboard.Internal.IErrorHandler;
        protected _dataServiceUrls: DevExpress.Dashboard.Internal.IDataServiceUrls;
        protected _remoteService: DevExpress.Dashboard.IRemoteService;
        static maxQueryStringLength: number;
        constructor(_dashboardContainer: DevExpress.Dashboard.DashboardContainer, _errorHandler: DevExpress.Dashboard.Internal.IErrorHandler, _dataServiceUrls: DevExpress.Dashboard.Internal.IDataServiceUrls, _remoteService: DevExpress.Dashboard.IRemoteService);
        getParameterValues(dataSourceId: string, dataSource: DevExpress.Dashboard.Model.DataSource, dataMember: string, valueMember: string, displayMember: string, sortOrder: string, sortByMember: string, parameterType: string): JQueryPromise<{}>;
        performExport(exportInfo: ExportInfo, exportModels: ItemExportModel[]): void;
        getDimensionUniqueValues(dataSource: DevExpress.Dashboard.Model.DataSource, dataMember: string, dimension: DevExpress.Dashboard.Model.Dimension): JQueryPromise<{}>;
        getDimensionFilterItems(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, dimensionDataMember: string, previousState: Array<DevExpress.Dashboard.Internal.IFilterItem>, branch: Array<any>): JQueryPromise<Array<DevExpress.Dashboard.Internal.IFilterItem>>;
        getDimensionFilterString(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, dimensionDataMember: string, previousState: Array<DevExpress.Dashboard.Internal.IFilterItem>): JQueryPromise<string>;
        getFieldList(dataSource: DevExpress.Dashboard.Model.DataSource, dataMember: string, fieldPath: string): JQueryPromise<{}>;
        getColoringScheme: (itemName?: string) => JQueryPromise<{}>;
        getDashboardPalette: () => JQueryPromise<{}>;
        convertItem(item: DevExpress.Dashboard.Model.DashboardItem, destinationItemTypeName: string): JQueryPromise<{}>;
        getAvailableFontFamilies: () => JQueryPromise<string[]>;
        _getItemDataQuery(item: DevExpress.Dashboard.Model.DashboardItem, isModeAllowsToReduceData: boolean): any;
        getItemData: (item: DevExpress.Dashboard.Model.DashboardItem, isModeAllowsToReduceData: boolean) => JQueryPromise<any>;
        getBatchItemData: (items: Array<DevExpress.Dashboard.Model.DashboardItem>, isModeAllowsToReduceData: boolean) => JQueryPromise<any>;
        getMapShapeFile: (itemName: string) => JQueryXHR;
        getUnderlyingData: (itemName: string, columnValues: Array<string>, rowValues: Array<string>, columnNames: Array<string>, dataQueryParams: any) => JQueryPromise<{}>;
        markDataSourcesForReload: () => JQueryPromise<{}>;
        private _queryParamsToQueryString;
        protected _createCommonArgs(): ICommonQueryArgs;
        protected _performRequest(url: string, requestArgs: Object): JQueryXHR;
        protected _performRequestCore(url: string, params: Object): JQueryXHR;
        protected _ensureClientServerContract(requestParams: any): void;
    }
    export class DesignerDataServiceClient extends ViewerDataServiceClient implements IDataServiceClient {
        constructor(_dashboardContainer: DevExpress.Dashboard.DashboardContainer, _errorHandler: DevExpress.Dashboard.Internal.IErrorHandler, _dataServiceUrls: DevExpress.Dashboard.Internal.IDataServiceUrls, _remoteService: DevExpress.Dashboard.IRemoteService);
        convertItem(item: DevExpress.Dashboard.Model.DashboardItem, destinationItemTypeName: string): JQueryPromise<{}>;
        getDimensionUniqueValues(dataSource: DevExpress.Dashboard.Model.DataSource, dataMember: string, dimension: DevExpress.Dashboard.Model.Dimension): JQueryPromise<{}>;
        getDimensionFilterItems(item: DevExpress.Dashboard.Model.DataDashboardItem, dimensionDataMember: string, previousState: Array<DevExpress.Dashboard.Internal.IFilterItem>, branch: Array<any>): JQueryPromise<Array<DevExpress.Dashboard.Internal.IFilterItem>>;
        getDimensionFilterString(item: DevExpress.Dashboard.Model.DataDashboardItem, dimensionDataMember: string, previousState: Array<DevExpress.Dashboard.Internal.IFilterItem>): JQueryPromise<string>;
        getFieldList(dataSource: DevExpress.Dashboard.Model.DataSource, dataMember: string, fieldPath: string): JQueryPromise<{}>;
        getColoringScheme: (itemName?: string) => JQueryPromise<{}>;
        getDashboardPalette: () => JQueryPromise<{}>;
        getAvailableFontFamilies: () => JQueryPromise<string[]>;
        protected _createCommonArgs(): ICommonQueryArgs;
        protected _performRequestCore(url: any, data: any): any;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal {
    import IParameterValueViewModel = DevExpress.Dashboard.Internal.Data.IParameterValueViewModel;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import IDataSourceConsumer = DevExpress.Dashboard.Model.IDataSourceConsumer;
    import DataField = DevExpress.Dashboard.Internal.Model.DataField;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DynamicListLookUpSettings = DevExpress.Dashboard.Model.DynamicListLookUpSettings;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
    export interface IFilterItem {
        Level: number;
        Text: string;
        Value: any;
        IsBlank: boolean;
        IsChecked: boolean;
        IsVisible: boolean;
    }
    export interface IFieldConstraint {
        (field: DevExpress.Dashboard.Internal.Model.IDataField): boolean;
    }
    export interface IDataFieldsProvider {
        findDataField(dataSourceName: string, dataMemberName: string, fullFieldName: string, hasGroupSeparator?: boolean): JQueryPromise<DevExpress.Dashboard.Internal.Model.IDataField>;
        getDataFieldsArray: (dataSourceName: string, dataMember: string, fieldPath: string, filterDelegate: (field: DevExpress.Dashboard.Internal.Model.IDataField) => boolean) => JQueryPromise<Array<DevExpress.Dashboard.Internal.Model.IDataField>>;
    }
    export interface IDataItemValuesProvider {
        getDimensionUniqueValues(dataSourceName: string, dataMember: string, dimension: DevExpress.Dashboard.Model.Dimension): JQueryPromise<Array<any>>;
    }
    export function patchCalcFieldPath(dataSource: DevExpress.Dashboard.Model.DataSource, calculatedField: DevExpress.Dashboard.Model.CalculatedField, fieldName: string): string;
    export function trimLeadingPathElement(path: string, element: string): string;
    export function splitFullFieldName(fullFieldName: string): {
        path: string;
        name: string;
    };
    export function isStartedWith(path: any, value: any): boolean;
    export function findDataMember(dataSource: DevExpress.Dashboard.Model.DataSource, path: string): {
        dataMember: string;
        fieldPath: string;
    };
    export function getFirstDataMember(dataSource: DevExpress.Dashboard.Model.DataSource): string;
    export interface IDataSourceProvider {
        findDataSource: (dsName: string) => DevExpress.Dashboard.Model.DataSource;
    }
    export class DataSourceBrowser implements IDataFieldsProvider, IDataItemValuesProvider, IDataSourceProvider {
        _dataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>;
        private isDesignMode;
        parameters?: ko.ObservableArray<DevExpress.Dashboard.Model.Parameter>;
        _serviceClient?: ko.Observable<DevExpress.Dashboard.Internal.IDataServiceClient>;
        isLoading: ko.Observable<boolean>;
        private _disposables;
        private _dynamicParametersValueCache;
        private _dimensionValuesCache;
        private _fieldsCache;
        private _dataSourcesSubscription;
        _cacheNestedFields(path: string, field: DevExpress.Dashboard.Internal.Model.DataField): void;
        private _findInFieldsCache;
        constructor(_dataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>, isDesignMode: ko.Observable<boolean>, parameters?: ko.ObservableArray<DevExpress.Dashboard.Model.Parameter>, _serviceClient?: ko.Observable<DevExpress.Dashboard.Internal.IDataServiceClient>, isLoading?: ko.Observable<boolean>);
        getDimensionFilterItems(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>, branch: Array<any>): JQueryPromise<Array<IFilterItem>>;
        getDimensionFilterString(dashboardItem: DevExpress.Dashboard.Model.DashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>): JQueryPromise<string>;
        getDataFieldsArray(dataSourceName: string, dataMember: string, fieldPath: string, filterDelegate?: (field: DevExpress.Dashboard.Internal.Model.IDataField) => boolean): JQueryPromise<Array<DevExpress.Dashboard.Internal.Model.IDataField>>;
        isFolder(path: string): boolean;
        findPathToFieldInTree(dataSourceName: string, dataMemberName: string, fieldName: string, constraint: IFieldConstraint): JQueryPromise<string>;
        findDataField(dataSourceName: string, dataMemberName: string, fullFieldName: string, separateGroupFields?: boolean): JQueryPromise<DevExpress.Dashboard.Internal.Model.IDataField>;
        fuzzyFindFields(startPath: string, searchFor: string): JQueryPromise<Array<{
            path: string;
            field: DevExpress.Dashboard.Internal.Model.IDataField;
        }>>;
        findDataSource(dsName: string): DevExpress.Dashboard.Model.DataSource;
        dataMembersSupported(dsc: DevExpress.Dashboard.Model.IDataSourceConsumer): boolean;
        getDataFields(dsc: DevExpress.Dashboard.Model.IDataSourceConsumer): ko.ObservableArray<string>;
        clearFieldsCache(path: string): void;
        clearDynamicParametersValueCache(): void;
        clearDimensionValuesCache(): void;
        removeDataSource: (dataSource: DevExpress.Dashboard.Model.DataSource) => void;
        initDataSource(dataSource: DevExpress.Dashboard.Model.DataSource): void;
        dynamicLookUpValuesLoaded: (dynamicListLookUpSettings: DevExpress.Dashboard.Model.DynamicListLookUpSettings) => void;
        getParameterValues(parameterType: string, dynamicListLookUpSettings: DevExpress.Dashboard.Model.DynamicListLookUpSettings): ko.ObservableArray<DevExpress.Dashboard.Internal.Data.IParameterValueViewModel>;
        getDimensionUniqueValues(dataSourceName: string, dataMember: string, dimension: DevExpress.Dashboard.Model.Dimension): JQueryPromise<Array<any>>;
        splitFullPath(fullPath?: string): {
            dataSource: string;
            dataMember: string;
            fieldPath: string;
        };
        private _subscribeDataSources;
        private _unsubscribeDataSources;
        dispose(): void;
    }
    export function isNonCollectionDataField(dataField: DevExpress.Dashboard.Internal.Model.IDataField): boolean;
    export function getDataFields(fieldsNames: Array<string>, dataSource: string, dataMember: string, dataFieldProvider: IDataFieldsProvider): JQueryPromise<Array<DevExpress.Dashboard.Internal.Model.IDataField>>;
}
declare module DevExpress.Dashboard.Internal.Model {
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import AcceptableShapingType = DevExpress.Dashboard.Model.AcceptableShapingType;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    export interface IBindingModelProvider {
        name?: ko.Observable<string>;
        _getBindingModel(): Array<ConstrainedBindingProperty>;
        _displayNameSeparator?: string;
        _getContainerType(): string;
        grabFrom?: (container: any) => void;
    }
    export interface ConstrainedBindingProperty extends IBindingProperty {
        fieldConstraint?: DevExpress.Dashboard.Internal.IFieldConstraint;
    }
    export interface ICollectionBindingProperty extends ConstrainedBindingProperty {
        creator?: (type?: string, ...args: any[]) => any;
        containersMap?: any;
    }
    export interface IDataItemProvider {
        _getDataItem: (uniqueName: string) => DevExpress.Dashboard.Model.DataItem;
        _getFinalDataType(dataItemId: string): DevExpress.Dashboard.Model.DataFieldType;
        _createDataItem(dataInfo: DevExpress.Dashboard.Internal.Model.IDataField, binding: DevExpress.Dashboard.Model.IBindingProperty): DevExpress.Dashboard.Model.DataItem;
        _updateDataItem(dataItem: DevExpress.Dashboard.Model.DataItem, binding: DevExpress.Dashboard.Model.IBindingProperty, dataField: DevExpress.Dashboard.Internal.Model.IDataField, acceptableShapingType: DevExpress.Dashboard.Model.AcceptableShapingType): void;
        _removeDataItem(dataItem: DevExpress.Dashboard.Model.DataItem): void;
        _attachDataItem(targetObject: any, linkPropertyName: string): any;
    }
    export let _areTheSameBindingProviders: (a: IBindingModelProvider, b: IBindingModelProvider) => false | ConstrainedBindingProperty;
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import CustomProperties = DevExpress.Dashboard.Model.CustomProperties;
    import ICustomPropertiesProvider = DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    import IBindingModelProvider = DevExpress.Dashboard.Internal.Model.IBindingModelProvider;
    export abstract class DataItemContainer extends TypedSerializableModel implements IBindingModelProvider, ICustomPropertiesProvider {
        name: ko.Observable<string>;
        customProperties: DevExpress.Dashboard.Model.CustomProperties;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        grabFrom(dataItemContainer: DataItemContainer): void;
        _getContainerType(): string;
        abstract _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        protected abstract _getInfoCore(): Array<DevExpress.Dashboard.Metadata.IDashboardSerializationInfo>;
        abstract _getDataId(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    export type ContainerTypeMap = {
        [key: string]: {
            icon: string;
            displayName?: string;
            group?: string;
        };
    };
    export interface ContainerTypeSelectorOptions {
        containersMap: ContainerTypeMap;
        containerGroupLocalization?: {
            [groupName: string]: string;
        };
        highlightedTypes?: string[];
    }
    export class ContainerTypeSelector {
        private _containersMap;
        containerType: ko.Observable<string>;
        private _containerGroupLocalization?;
        private _highlightedTypes?;
        constructor(_containersMap: ContainerTypeMap, containerType: ko.Observable<string>, _containerGroupLocalization?: {
            [groupName: string]: string;
        }, _highlightedTypes?: string[]);
        get shortAvailableContainerTypes(): any[];
        get hasFullList(): boolean;
        get availableContainerTypes(): any[];
        get availableContainerTypeGroups(): {
            name: string;
            displayName: string;
        }[];
        headerClick: (data: any, event: any) => boolean;
        itemClick: (data: any, event: any) => boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    export var KnownTabs: {
        Binding: string;
        DataShaping: string;
        NumericFormat: string;
        DateTimeFormat: string;
        TopN: string;
        Interactivity: string;
        ItemFilter: string;
        VisibleDataFilter: string;
        Common: string;
        Totals: string;
        AxisX: string;
        Indicators: string;
        IndicatorSettings: string;
        AxisY: string;
        Legend: string;
        ColoringOptions: string;
        ColorLegend: string;
        WeightedLegend: string;
        Layout: string;
        ConditionalFormatting: string;
        GridColumnFilter: string;
        FormatRuleCommon: string;
        FormatRuleCondition: string;
        FormatRuleChartLegend: string;
        FormatRuleMisc: string;
        CustomRanges: string;
        Type: string;
        PointLabels: string;
        DeltaOptions: string;
        ScaleOptions: string;
        SparklineOptions: string;
        CardTemplates: string;
        DeltaFormats: string;
        CardTemplateSettings: string;
        ContentArrangement: string;
        ShapeLabels: string;
        Labels: string;
        DataLayout: string;
        DataItemsGroup: string;
        ColorScheme: string;
        Calculations: string;
        Expression: string;
        TileOptions: string;
        UnwrappedDataItem: string;
        CustomMapOptions: string;
        MeasureFilter: string;
        TabContainer: string;
    };
    export class AccordionTab<TTabModel = any> {
        name: string;
        category: string | ko.Observable<string>;
        constructor(name: string, category: string | ko.Observable<string>, tabModel?: any);
        grabData(tab: AccordionTab): void;
        visible: ko.Computed<boolean>;
        tabModel: ko.Observable<TTabModel>;
        orderNo: number;
        get summary(): ko.Computed<string>;
        get buttons(): Array<any>;
        tabTemplate?: string;
        headerTemplate?: string;
        headerModel?: any;
        unsubscribeTabModel(tabModel: any): void;
        disposeTabModel(tabModel: any): void;
        dispose(): void;
    }
    export class ContentInHeaderAccordionTab extends AccordionTab {
        orderNo: number;
        style: string;
        headerTemplate: string;
        hasNoBorder: boolean;
        onTitleClick: (tabModel: any, data: any, event: any) => boolean;
    }
    export class TypeAccordionTab extends AccordionTab<DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector> {
        orderNo: number;
        style: string;
        headerTemplate: string;
        tabTemplate: string;
        hasNoBorder: boolean;
        onTitleClick: (tabModel: DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector, data: any, event: any) => void;
    }
    export class StyleAccordionTab extends AccordionTab<DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector> {
        orderNo: number;
        style: string;
        headerTemplate: string;
        hasNoBorder: boolean;
        onTitleClick: (tabModel: DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector, data: any, event: any) => void;
    }
    export class ItemGroupAccordionTab extends AccordionTab {
        style: string;
        orderNo: number;
        headerTemplate: string;
        get headerHeight(): number;
        hasNoBorder: boolean;
    }
    export class BindingAccordionTab extends AccordionTab<{
        choosenField: ko.Observable<ko.Observable<DevExpress.Dashboard.Internal.Model.IDataField>>;
        dataItemLink: DevExpress.Dashboard.Model.DataItemLink;
        constraint: DevExpress.Dashboard.Internal.IFieldConstraint;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        dataMemberPath: ko.Observable<ko.Subscribable<string>>;
        additionalProperties: ko.Observable<ko.Subscribable<DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper>>;
        summary: ko.Computed<string>;
        summaryHint: ko.Computed<string>;
    }> {
        name: string;
        category: string;
        constructor(name: string, category: string);
        tabTemplate: string;
        get summaryHint(): ko.Computed<string>;
        unsubscribeTabModel(tabModel: any): void;
        grabData(tab: BindingAccordionTab): void;
        orderNo: number;
    }
}
declare module DevExpress.Dashboard.Designer {
    import DxElement = DevExpress.core.DxElement;
    import dxForm = DevExpress.ui.dxForm;
    import dxFormSimpleItem = DevExpress.ui.dxFormSimpleItem;
    import ICustomPropertiesProvider = DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    export interface SectionOptions {
        title: string;
        onContentReady?: (e: {
            component?: DevExpress.ui.dxForm;
            element?: DevExpress.core.DxElement;
        }) => void;
        onInitialized?: (e: {
            component?: DevExpress.ui.dxForm;
            element?: DevExpress.core.DxElement;
        }) => void;
        onFieldDataChanged?: (e: {
            component?: DevExpress.ui.dxForm;
            element?: DevExpress.core.DxElement;
            model?: any;
            dataField?: string;
            value?: any;
        }) => any;
        items: Array<DevExpress.ui.dxFormSimpleItem>;
    }
    export interface CustomizeSectionsEventArgs {
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
        addSection(options: SectionOptions): void;
    }
    export interface CustomizeDataItemContainerSectionsEventArgs extends CustomizeSectionsEventArgs {
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
        dataItemContainer: DevExpress.Dashboard.Model.DataItemContainer;
    }
    export function _customizeTabs(tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], customSectionOption: SectionOptions, object: DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider): void;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let customItemWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class CustomItemWindowDefinition extends MeasureCalculationWindowDefinition {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
    export interface ICustomDataRow {
        getColor: (measureBindingName?: string) => Array<string>;
        getDisplayText: (property: string) => Array<string>;
        getValue: (property: string) => Array<any>;
        getUniqueValue: (property: string) => Array<any>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    export {};
}
declare module DevExpress.Dashboard.Internal.Designer {
    import FontStyle = DevExpress.Dashboard.Model.FontStyle;
    export interface IAppearanceWrapper {
        fontFamily: string;
        fontStyles: string[];
        backColor: string;
        foreColor: string;
    }
    export interface ICustomAppearance {
        fontFamily: string;
        fontStyle: DevExpress.Dashboard.Model.FontStyle;
        backColor: string;
        foreColor: string;
    }
    export interface ICustomStyleStorage<T> {
        getValue(): T[];
        setValue(value: T[]): void;
    }
    export class InMemoryStorage<T> implements ICustomStyleStorage<T> {
        value: T[];
        getValue(): T[];
        setValue(value: T[]): void;
    }
    export const conditionalFormattingEditor: {
        customColorStorage: ICustomStyleStorage<string>;
        customAppearanceStorage: ICustomStyleStorage<ICustomAppearance>;
    };
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ICustomAppearance = DevExpress.Dashboard.Internal.Designer.ICustomAppearance;
    export var Palette: {
        standard: string[];
        richColors: string[];
        allColors: string[];
        gradient: string[];
        getLabelText: (type: string, empty: string) => string;
        getCustomLabelText: (appearance: DevExpress.Dashboard.Internal.Designer.ICustomAppearance) => string;
    };
}
declare module DevExpress.Dashboard.Internal.Designer {
    import AppearanceSettings = DevExpress.Dashboard.Model.AppearanceSettings;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import ICustomAppearance = DevExpress.Dashboard.Internal.Designer.ICustomAppearance;
    interface StyleSettingsAdapter<T extends DevExpress.Dashboard.Model.StyleSettingsBase> {
        getCssStyles: (item: T) => object;
        getCssClasses: (item: T, isEmptyAllowed: boolean, isRange: boolean, isGradient: boolean) => string[];
        getLocalizedCaption: (item: T) => string;
        getLabelText: (item: T, isRange: boolean, isGradient: boolean, restrictToColor: boolean) => string;
        getPredefinedStyle: (item: T) => string;
        setPredefinedStyle: (item: T, style: string) => void;
        hasCustomStyle: (item: T) => boolean;
        isEmptyCustomStyle: (item: T) => boolean;
        getCustomColor: (item: T) => string;
        getCustomAppearance: (item: T) => DevExpress.Dashboard.Internal.Designer.ICustomAppearance;
        setCustomColor: (item: T, style: string) => void;
        setCustomAppearance: (item: T, style: DevExpress.Dashboard.Internal.Designer.ICustomAppearance) => void;
    }
    export const appearanceStyleSettingsAdapter: StyleSettingsAdapter<DevExpress.Dashboard.Model.AppearanceSettings>;
    export function styleSettingsAdapter(item: any, itemType?: any): {
        itemFactory: () => any;
        getCssStyles: () => any;
        getCssClasses: (isEmptyAllowed: any, isRange: any, isGradient: any) => any;
        getLocalizedCaption: () => any;
        getLabelText: (isRange: any, isGradient: any, restrictToColor: any) => any;
        getPredefinedStyle: () => any;
        setPredefinedStyle: (style: any) => any;
        hasCustomStyle: () => any;
        isEmptyCustomStyle: () => any;
        getCustomColor: () => any;
        getCustomAppearance: () => any;
        setCustomColor: (style: any) => any;
        setCustomAppearance: (style: any) => any;
    };
    export {};
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let target: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let differenceType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let differenceCalculationSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let summaryType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let previousValuesCount: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let nextValuesCount: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let movingCalculationSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let percentOfTotalCalculationSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let calculationRankType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let calculationRankOrder: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rankCalculationSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let runningTotalCalculationSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cardDefinitionMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let pieDefinitionMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pieWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let scatterWindowDefinitionSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cardDeltaOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardSparklineOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showSparkline: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layoutTemplate: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cards: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardSparklineArgument: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let templateId: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let minWidth: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let maxWidth: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRows: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardLayoutSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let hAlignment: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowElementSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cardRowElementColor: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowFontFamily: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowFontSize: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let predefinedForeColor: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowTextElementBaseSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cardRowDataElementValueType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowDataElementDimensionIndex: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowDataElementSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let text: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowTextElementSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let size: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowIndicatorElementSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    export abstract class CardRowElement extends TypedSerializableModel {
        hAlignment: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export abstract class CardRowTextElementBase extends CardRowElement {
        color: ko.Observable<number>;
        predefinedForeColor: ko.Observable<string>;
        fontFamily: ko.Observable<string>;
        fontSize: ko.Observable<number>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class CardRowDataElement extends CardRowTextElementBase {
        valueType: ko.Observable<string>;
        dimensionIndex: ko.Observable<number>;
        title: ko.Computed<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
    export class CardRowTextElement extends CardRowTextElementBase {
        text: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
    export class CardRowIndicatorElement extends CardRowElement {
        size: ko.Observable<number>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let vAlignment: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let indent: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowBaseSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let elements: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardRowSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let height: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardSparklineRowOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardSparklineRowSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import SparklineOptions = DevExpress.Dashboard.Model.SparklineOptions;
    import CardRowDataElement = DevExpress.Dashboard.Model.CardRowDataElement;
    import CardRowElement = DevExpress.Dashboard.Model.CardRowElement;
    import CardRowIndicatorElement = DevExpress.Dashboard.Model.CardRowIndicatorElement;
    import CardRowTextElement = DevExpress.Dashboard.Model.CardRowTextElement;
    export abstract class CardRowBase extends TypedSerializableModel {
        vAlignment: ko.Observable<string>;
        indent: ko.Observable<number>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
    export class CardRow extends CardRowBase {
        static elementItemTypes: {
            CardRowDataElement: {
                constructor: typeof DevExpress.Dashboard.Model.CardRowDataElement;
            };
            CardRowIndicatorElement: {
                constructor: typeof DevExpress.Dashboard.Model.CardRowIndicatorElement;
            };
            CardRowTextElement: {
                constructor: typeof DevExpress.Dashboard.Model.CardRowTextElement;
            };
        };
        elements: ko.ObservableArray<DevExpress.Dashboard.Model.CardRowElement>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        createRowElement(elementJSON: any, serializer: DevExpress.Analytics.Utils.ModelSerializer): DevExpress.Dashboard.Model.CardRowDataElement;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
    export class CardSparklineRow extends CardRowBase {
        height: ko.Observable<number>;
        sparklineOptions: DevExpress.Dashboard.Model.SparklineOptions;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import CardRow = DevExpress.Dashboard.Model.CardRow;
    import CardRowBase = DevExpress.Dashboard.Model.CardRowBase;
    import CardSparklineRow = DevExpress.Dashboard.Model.CardSparklineRow;
    export class CardLayout extends SerializableModel {
        static rowTypes: {
            CardRow: {
                constructor: typeof DevExpress.Dashboard.Model.CardRow;
            };
            CardSparklineRow: {
                constructor: typeof DevExpress.Dashboard.Model.CardSparklineRow;
            };
        };
        templateID: ko.Observable<number>;
        minWidth: ko.Observable<number>;
        maxWidth: ko.Observable<number>;
        rows: ko.ObservableArray<DevExpress.Dashboard.Model.CardRowBase>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        createRow(elementJSON: any, serializer: DevExpress.Analytics.Utils.ModelSerializer): DevExpress.Dashboard.Model.CardRowBase;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        grabFrom(newLayout: CardLayout): void;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import CardFormatRuleLayoutElement = DevExpress.Dashboard.Model.CardFormatRuleLayoutElement;
    import CardRowDataElementType = DevExpress.Dashboard.Model.CardRowDataElementType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cardRowElementTypeValuesMapBase: {
        [key in DevExpress.Dashboard.Model.CardRowDataElementType & DevExpress.Dashboard.Model.CardFormatRuleLayoutElement]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let cardRowDataElementTypeValuesMap: {
        [key in DevExpress.Dashboard.Model.CardRowDataElementType]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let cardFormatRuleLayoutElementValuesMap: {
        [key in DevExpress.Dashboard.Model.CardFormatRuleLayoutElement]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let cardRowDataElementTypeValuesMapEx: {
        [key in DevExpress.Dashboard.Model.CardRowDataElementType | "DeltaIndicator" | "Sparkline"]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    };
    export let cardLayoutVisible: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dimensionIndex: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardLayoutValueType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardLayoutTemplateElementBaseSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cardLayoutTemplateDataElementSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import CardRowDataElementType = DevExpress.Dashboard.Model.CardRowDataElementType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    export abstract class CardLayoutTemplateElementBase extends SerializableModel {
        visible: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        abstract _getTitle(dimensionNames?: string[]): ko.Computed<string>;
        _createEditorModel(dimensionNames?: string[]): {
            title: ko.Computed<string>;
            checked: ko.Observable<boolean>;
        };
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _initDefault(visible?: boolean, valueType?: DevExpress.Dashboard.Model.CardRowDataElementType, dimenstionIndex?: number): void;
    }
    export class CardLayoutTemplateDeltaElement extends CardLayoutTemplateElementBase {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _getTitle(): ko.Computed<string>;
    }
    export class CardLayoutTemplateSparklineElement extends CardLayoutTemplateElementBase {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _getTitle(): ko.Computed<string>;
    }
    export class CardLayoutTemplateDataElement extends CardLayoutTemplateElementBase {
        valueType: ko.Observable<DevExpress.Dashboard.Model.CardRowDataElementType>;
        dimensionIndex: ko.Observable<number>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _getTitle(dimensionNames: string[]): ko.Computed<any>;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _initDefault(visible: boolean, valueType: DevExpress.Dashboard.Model.CardRowDataElementType, dimenstionIndex?: number): void;
        _getEditorProperty(valueType: DevExpress.Dashboard.Model.CardRowDataElementType, dimensionIndex?: number, dimensionNames?: string[]): {
            value: DevExpress.Dashboard.Model.CardRowDataElementType;
            displayText: any;
            dimensionIndex: number;
            key: string;
        };
        _createEditorModel(dimensionNames: string[]): {
            lookupDataSource: {
                value: DevExpress.Dashboard.Model.CardRowDataElementType;
                displayText: any;
                dimensionIndex: number;
                key: string;
            }[];
            selectedItem: ko.PureComputed<any>;
            title: ko.Computed<string>;
            checked: ko.Observable<boolean>;
        };
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let type: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let templateSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let cardLayout: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let customTemplateSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let mainValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let subValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let deltaIndicator: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let cardLayoutSparkline: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let bottomValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let bottomSubValue1: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let bottomSubValue2: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let deltaCompactTemplateSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let topValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let bottomValue1: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let bottomValue2: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let autofitTemplateSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let nameValueTemplateSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let ultraCompactTemplateSerializationInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let customItemType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sliceTables: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let interactivityTargets: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let coloringDimensions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let coloringMeasures: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let customDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let dimensions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let measures: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sliceTableName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sliceTableSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let listBoxType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let listBoxDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let autoExpand: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let treeViewDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let latitude: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let longitude: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let tooltipDimensions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let enableClustering: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let geoPointMapDashboardItemBaseSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let bubbleMapWeight: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let bubbleMapColor: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let bubbleMapDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let valueName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let chorolpethMapValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let valueMapSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let deltaMapActualValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let deltaMapTargetValue: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let deltaMapDeltaOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let actualValueName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let deltaName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let deltaMapSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let maps: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let includeSummaryValueToShapeTitle: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let attributeDimension: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let attributeName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let tooltipAttributeName: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let choroplethMapDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let value: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let geoPointMapDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let pieMapArgument: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pieMapValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let isWeighted: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pieMapDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let urlPath: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let image64: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let imageType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let sizeMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let horizontalAlignment: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let verticalAlignment: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let imageDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let imageItem: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let dataBindingMode: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let uriPattern: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let boundImageDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let textBoxText: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let textBoxValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let textBoxDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let pieValues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let labelContentType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let tooltipContentType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pieType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let showPieCaptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let labelPosition: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pieDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let content: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let scatterPointLabelOptionsSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ScatterPointLabelContentType = DevExpress.Dashboard.Model.ScatterPointLabelContentType;
    import PointLabelOptionsBase = DevExpress.Dashboard.Model.PointLabelOptionsBase;
    export class ScatterPointLabelOptions extends PointLabelOptionsBase {
        content: ko.Observable<DevExpress.Dashboard.Model.ScatterPointLabelContentType>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let scatterArgumentsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let rotated: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let legend: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let axisX: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let axisY: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let pointLabelOptions: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let axisXMeasure: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let axisYMeasure: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let scatterChartWeight: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let scatterChartDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    export let treeMapvalues: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let treeMapArgumentsMeta: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layoutAlgorithm: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let layoutDirection: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let tilesLabelContentType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let tilesTooltipContentType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let groupsLabelContentType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let groupsTooltipContentType: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export let treemapDashboardItemSerializationsInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
}
declare module DevExpress.Dashboard.Metadata {
    export let editorTemplates: {
        radioGroup: any;
        image: any;
        text: any;
        bool: any;
        boolYesNo: any;
        boolVisibleHidden: any;
        boolDiscreteContinuous: any;
        checkBox: any;
        list: any;
        numeric: any;
        date: any;
        combobox: any;
        buttonGroup: any;
        guid: any;
    };
}
declare module DevExpress.Dashboard.Model {
}
declare module DevExpress.Dashboard.Internal.Designer {
    export var getAceTheme: () => "ace/theme/dreamweaver" | "ace/theme/ambiance";
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IExpressionEditorFunction = DevExpress.Analytics.Widgets.Internal.IExpressionEditorFunction;
    export class ExpressionEditorFunctions {
        static customFunctions: Array<DevExpress.Analytics.Widgets.Internal.IExpressionEditorFunction>;
    }
    export function getExpressionEditorFunctions(): Array<DevExpress.Analytics.Widgets.Internal.IExpressionEditorFunction>;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataMemberInfo = DevExpress.Analytics.Utils.IDataMemberInfo;
    import IItemsProvider = DevExpress.Analytics.Utils.IItemsProvider;
    import IPathRequest = DevExpress.Analytics.Utils.IPathRequest;
    export class FlatItemProviderWrapper implements IItemsProvider {
        private itemsProvider;
        constructor(itemsProvider: DevExpress.Analytics.Utils.IItemsProvider);
        getItems(path: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<DevExpress.Analytics.Utils.IDataMemberInfo[]>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisplayNameProvider = DevExpress.Analytics.Utils.IDisplayNameProvider;
    import IItemsProvider = DevExpress.Analytics.Utils.IItemsProvider;
    import ExpressionEditor = DevExpress.Analytics.Widgets.ExpressionEditor;
    import IExpressionOptions = DevExpress.Analytics.Widgets.IExpressionOptions;
    export class DashboardExpressionEditor extends ExpressionEditor {
        constructor(options: DevExpress.Analytics.Widgets.IExpressionOptions, fieldListProvider: ko.Observable<DevExpress.Analytics.Utils.IItemsProvider>, displayNameProvider: DevExpress.Analytics.Utils.IDisplayNameProvider, saveHandler?: ko.Observable<(callback: {
            (): void;
        }) => void>, disabled?: ko.Observable<boolean>);
        focus(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    export interface FilterFieldInfo {
        dataMember: () => string;
        hasItems: (path: string) => boolean;
        isGroup: () => boolean;
    }
    class FilterFieldWrapper implements FilterFieldInfo {
        private getDisplayName;
        add: (d: DevExpress.Dashboard.Model.Dimension) => number;
        dataMember: () => string;
        displayName: () => string;
        groupIndex: () => number;
        hasItems: (path: any) => boolean;
        isGroup: () => boolean;
        reorder: (dataFields: Array<DevExpress.Dashboard.Internal.Model.IDataField>) => void;
        constructor(dimension: DevExpress.Dashboard.Model.Dimension, getDisplayName: (dataItem: DevExpress.Dashboard.Model.DataItem) => string);
        private _dimensions;
    }
    export class FilterFieldSelector extends DisposableObject {
        private dashboardItem;
        private dataSourceBrowser;
        _selectedField: ko.Observable<FilterFieldWrapper>;
        _fields: ko.ObservableArray<FilterFieldWrapper>;
        constructor(dashboardItem: any, dataSourceBrowser: DevExpress.Dashboard.Internal.IDataFieldsProvider, selectedFieldChanged: (field: FilterFieldInfo) => void);
        get selectedField(): FilterFieldInfo;
        template: DevExpress.Dashboard.KnockoutTemplate;
        init(): void;
        clear(): void;
        private _loadDataFields;
        private _generateFields;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxTreeList = DevExpress.ui.dxTreeList;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IFilterItem = DevExpress.Dashboard.Internal.IFilterItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import FilterFieldInfo = DevExpress.Dashboard.Internal.Designer.FilterFieldInfo;
    interface TreeListItem {
        id: string;
        displayName: string;
        parentId: string;
        hasItems: boolean;
        data: DevExpress.Dashboard.Internal.IFilterItem;
    }
    export class SimpleFilterTreeList extends DisposableObject {
        private dashboardItem;
        private dataSourceBrowser;
        treeList: DevExpress.ui.dxTreeList;
        _dataCache: TreeListItem[];
        constructor(dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        reload(field: DevExpress.Dashboard.Internal.Designer.FilterFieldInfo): void;
        show(field: DevExpress.Dashboard.Internal.Designer.FilterFieldInfo): void;
        hide(): void;
        getTreeListItems(): Array<TreeListItem>;
        dispose(): void;
        template: DevExpress.Dashboard.KnockoutTemplate;
        private _getBranchIndexes;
        private _getStore;
        private _getTreeListOptions;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DxElement = DevExpress.core.DxElement;
    import dxPopupOptions = DevExpress.ui.dxPopup.Properties;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import FilterFieldSelector = DevExpress.Dashboard.Internal.Designer.FilterFieldSelector;
    import SimpleFilterTreeList = DevExpress.Dashboard.Internal.Designer.SimpleFilterTreeList;
    interface SimpleFilterEditorViewModel {
        getPopupOptions: (container: DevExpress.core.DxElement) => DevExpress.ui.dxPopup.Properties;
        fieldSelector: DevExpress.Dashboard.Internal.Designer.FilterFieldSelector;
        filterTreeList: DevExpress.Dashboard.Internal.Designer.SimpleFilterTreeList;
    }
    export class SimpleFilterEditor extends DisposableObject {
        dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        popupVisible: ko.Observable<boolean>;
        _fieldSelector: DevExpress.Dashboard.Internal.Designer.FilterFieldSelector;
        _filterTreeList: DevExpress.Dashboard.Internal.Designer.SimpleFilterTreeList;
        viewModel: SimpleFilterEditorViewModel;
        constructor(dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        private _onPopupHidden;
        private _onPopupShown;
        private _applyHandler;
        dispose(): void;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisplayNameProvider = DevExpress.Analytics.Utils.IDisplayNameProvider;
    import IItemsProvider = DevExpress.Analytics.Utils.IItemsProvider;
    import FilterEditor = DevExpress.Analytics.Widgets.FilterEditor;
    import IExpressionOptions = DevExpress.Analytics.Widgets.IExpressionOptions;
    import IFilterEditorOptions = DevExpress.Analytics.Widgets.IFilterEditorOptions;
    import ExpressionEditorWrapper = DevExpress.Dashboard.Internal.Designer.ExpressionEditorWrapper;
    import SimpleFilterEditor = DevExpress.Dashboard.Internal.Designer.SimpleFilterEditor;
    export interface ExpressionEditorViewModel<TEditor = DevExpress.Dashboard.Internal.Designer.ExpressionEditorWrapper | DevExpress.Analytics.Widgets.FilterEditor | DevExpress.Dashboard.Internal.Designer.SimpleFilterEditor> {
        editor: TEditor;
        editorTemplate: string;
        criteriaString: ko.Observable<string> | ko.Computed<string>;
        edit: () => void;
        remove: () => void;
    }
    export interface ExpressionEditorParamsBase<TOptions = DevExpress.Analytics.Widgets.IFilterEditorOptions | DevExpress.Analytics.Widgets.IExpressionOptions> {
        options: ko.Observable<TOptions> | ko.Computed<TOptions>;
        fieldListProvider: ko.Observable<DevExpress.Analytics.Utils.IItemsProvider>;
        displayNameProvider: DevExpress.Analytics.Utils.IDisplayNameProvider;
    }
    export interface ExpressionEditorParams extends ExpressionEditorParamsBase<DevExpress.Analytics.Widgets.IExpressionOptions> {
    }
    export interface FilterEditorParams extends ExpressionEditorParamsBase<DevExpress.Analytics.Widgets.IFilterEditorOptions> {
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ExpressionEditor = DevExpress.Analytics.Widgets.ExpressionEditor;
    import ExpressionEditorParams = DevExpress.Dashboard.Internal.Designer.ExpressionEditorParams;
    import ExpressionEditorViewModel = DevExpress.Dashboard.Internal.Designer.ExpressionEditorViewModel;
    export class CalculationExpressionEditor implements ExpressionEditorViewModel<ExpressionEditorWrapper> {
        private params;
        editor: ExpressionEditorWrapper;
        editorTemplate: string;
        criteriaString: ko.Computed<string>;
        constructor(params: DevExpress.Dashboard.Internal.Designer.ExpressionEditorParams);
        edit(): void;
        remove(): void;
    }
    export class ExpressionEditorWrapper {
        private params;
        viewModel: ko.Observable<DevExpress.Analytics.Widgets.ExpressionEditor>;
        constructor(params: DevExpress.Dashboard.Internal.Designer.ExpressionEditorParams);
        show(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    export interface ISlidableListsNavigable {
        backClick: (item: string, pathParts: string[]) => void;
        hasSearchResults?: ko.Observable<boolean>;
        isListMode?: ko.Observable<boolean>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import Color = DevExpress.Dashboard.Model.Color;
    import FormatConditionRangeGradientPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
    import FormatConditionRangeSetPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
    import ISlidableListsNavigable = DevExpress.Dashboard.Internal.Designer.ISlidableListsNavigable;
    export type RangeStyleType = "None" | "Color" | "Icon" | "Gradient" | "ColorBar" | "GradientBar";
    export interface DisplayValue<T> {
        value: T;
        displayText: string;
        constraint?: (dataType: any) => boolean;
    }
    export type ConditionTypePropertyName = "conditionValue" | "conditionTopBottom" | "conditionAverage" | "conditionDateOccuring" | "conditionExpression" | "conditionRangeSet" | "conditionRangeGradient" | "conditionBar" | "conditionColorRangeBar" | "conditionGradientRangeBar";
    export interface ConditionTypesFilters {
        conditionTypeFilter?: (conditionTypePropertyName: ConditionTypePropertyName, subType: string) => boolean;
        rangeGradientPredefinedTypeFilter?: (type: DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType) => boolean;
        rangeSetPredefinedTypeFilter?: (type: DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType) => boolean;
    }
    export interface FormatConditionTypeEditorOptions {
        dataType: ko.Observable<string>;
        conditionType: ko.Observable<string>;
        specificType: ko.Observable<string | DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType | DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType>;
        filters: ConditionTypesFilters;
    }
    export class FormatConditionTypeEditorSurface implements ISlidableListsNavigable {
        displayMode: ko.Observable<"specificTypes" | "conditionTypes">;
        availableConditionTypes: ko.Computed<Array<{
            value: string;
            displayText: string;
            hasSpecificTypes: boolean;
        }>>;
        availableSpecificTypes: ko.Computed<Array<any>>;
        selectedSpecificTypes: ko.Computed<Array<any>>;
        ancestors: ko.Observable<any[]>;
        dataType: ko.Observable<string>;
        conditionType: ko.Observable<string>;
        specificType: ko.Observable<string | DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType | DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType>;
        backClick: () => void;
        updateItemAppearance: (e: any) => void;
        constructor(options: FormatConditionTypeEditorOptions);
        getStyleList(rangeStyleType: DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType): Array<string | object>;
        getGradientColorsList(type: DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType): Array<DevExpress.Dashboard.Model.Color>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxButtonGroupOptions = DevExpress.ui.dxButtonGroupOptions;
    import dxDataGrid = DevExpress.ui.dxDataGrid;
    import dxDataGridOptions = DevExpress.ui.dxDataGridOptions;
    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import RangeInfo = DevExpress.Dashboard.Model.RangeInfo;
    import AppearanceSettings = DevExpress.Dashboard.Model.AppearanceSettings;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import StyleSettingsEditorMode = DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorMode;
    import StyleSettingsEditorOptions = DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorOptions;
    import StyleSettingsEditorItemArgs = DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs;
    export interface IRange {
        style: ko.Observable<DevExpress.Dashboard.Model.StyleSettingsBase>;
        sign: ko.Observable<string>;
        leftValue: ko.Observable<any>;
        rightValue: ko.Computed<any>;
        rangeInfo: DevExpress.Dashboard.Model.RangeInfo;
    }
    export interface RuleRangesEditorOptions {
        appearanceMode: DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorMode;
        condition: DevExpress.Dashboard.Model.FormatConditionRangeBase;
        enableCustomStyles?: boolean;
        restrictToColor?: boolean;
    }
    export type DataGridColumnTypes = "string" | "date" | "boolean" | "number" | "object";
    export class RuleRangesEditor {
        condition: DevExpress.Dashboard.Model.FormatConditionRangeBase;
        dataType: ko.Observable<string>;
        isPercent: ko.Computed<boolean>;
        selection: ko.Observable<IRange>;
        value: ko.ObservableArray<IRange>;
        enableCustomStyles: boolean;
        appearanceMode: DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorMode;
        isGradient: boolean;
        restrictToColor?: boolean;
        popoverOffset: string;
        private static patchValueToMatchSerializedType;
        constructor(options: RuleRangesEditorOptions);
        updateRangeValues(isPercent: boolean): void;
        isRangeEmptyAllowed(range: IRange): boolean;
        closeEditCell: () => void;
        private _closeEditCell;
        createStyleSettingsEditorOptions(range: IRange): DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorOptions;
        createStyleSettingsEditorItemOptions(range: IRange): DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs;
        createRangeNumberEditorViewModel(args: {
            value: ko.Observable<number | string>;
            rowIndex: number;
            grid: DevExpress.ui.dxDataGrid;
            isRightValue: boolean;
            setValue: (value: number | string) => void;
        }): {
            editorType: "numberBox" | "dateBox";
            negativeInfinityDisplayText: string;
            allowInfinity: boolean;
            infinitValue: ko.Observable<boolean>;
            editorOptions: {
                onValueChanged: (e: any) => void;
                format: string;
                value: any;
            };
            buttonOptions: DevExpress.ui.dxButtonGroupOptions;
        };
        get dataGridOptions(): DevExpress.ui.dxDataGridOptions;
        add(): void;
        remove(): void;
        getSelectedStyleChangedHandler(range: IRange): (oldStyle: DevExpress.Dashboard.Model.AppearanceSettings, newStyle: DevExpress.Dashboard.Model.AppearanceSettings) => void;
        private _updateValue;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    export var CURRENCIES: {
        name: string;
        displayName: string;
        cultures: {
            name: string;
            displayName: string;
        }[];
    }[];
}
declare module DevExpress.Dashboard.Internal.Designer {
    export class CurrencyInfo {
        name: string;
        displayText: string;
        previewText: string;
        constructor(name: string, displayText: string, previewText?: string);
        cultures: Array<CultureInfo>;
    }
    export class CultureInfo {
        name: string;
        displayText: string;
    }
    export class CurrencySelector {
        disabled: ko.Observable<boolean>;
        constructor(currencyCultureName: ko.Observable<string>, disabled: ko.Observable<boolean>);
        private _defaultCurrency;
        _getDefaultCurrencyInfo: () => CurrencyInfo;
        getPreviewText: (value: number, currency: string) => string;
        currencies: ko.ObservableArray<CurrencyInfo>;
        selectedCurrency: ko.Observable<CurrencyInfo>;
        selectedCulture: ko.Observable<CultureInfo>;
        previewPositive: ko.PureComputed<string>;
        previewNegative: ko.PureComputed<string>;
        previewWarning: ko.PureComputed<any>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import FilterEditor = DevExpress.Analytics.Widgets.FilterEditor;
    import ExpressionEditorViewModel = DevExpress.Dashboard.Internal.Designer.ExpressionEditorViewModel;
    import FilterEditorParams = DevExpress.Dashboard.Internal.Designer.FilterEditorParams;
    export class FilterExpressionEditorViewModel implements ExpressionEditorViewModel<DevExpress.Analytics.Widgets.FilterEditor> {
        private params;
        editor: DevExpress.Analytics.Widgets.FilterEditor;
        editorTemplate: string;
        criteriaString: ko.Observable<string>;
        constructor(params: DevExpress.Dashboard.Internal.Designer.FilterEditorParams);
        edit(): void;
        remove(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ExpressionEditorViewModel = DevExpress.Dashboard.Internal.Designer.ExpressionEditorViewModel;
    import SimpleFilterEditor = DevExpress.Dashboard.Internal.Designer.SimpleFilterEditor;
    export interface SimpleFilterExpressionEditorOptions {
        dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
    }
    export class SimpleFilterExpressionEditorViewModel implements ExpressionEditorViewModel<DevExpress.Dashboard.Internal.Designer.SimpleFilterEditor> {
        private options;
        editor: DevExpress.Dashboard.Internal.Designer.SimpleFilterEditor;
        editorTemplate: string;
        criteriaString: ko.Computed<string>;
        constructor(options: SimpleFilterExpressionEditorOptions);
        edit(): void;
        remove(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import DxElement = DevExpress.core.DxElement;
    import dxForm = DevExpress.ui.dxForm;
    export class FormItemTemplates {
        static buttonGroup: ((data: {
            component?: DevExpress.ui.dxForm;
            dataField?: string;
            editorOptions?: any;
            editorType?: string;
            name?: string;
        }, itemElement: DevExpress.core.DxElement) => Element);
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxList = DevExpress.ui.dxList;
    import dxListOptions = DevExpress.ui.dxList.Properties;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    export interface CollectionEditorOptionsBase<T> {
        noDataText?: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        customToolbarItems?: Array<{
            name: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId | string;
            icon: string;
            action: () => void;
        }>;
    }
    export class CollectionEditorViewModelBase<T> {
        protected listInstance: DevExpress.ui.dxList;
        private noDataText;
        isToolbarVisible: boolean;
        allowAddItem: boolean;
        allowEditItem: boolean;
        allowReorderItem: boolean;
        allowRemoveItem: boolean;
        addEnabled: ko.Observable;
        editEnabled: ko.Observable;
        upEnabled: ko.Observable;
        downEnabled: ko.Observable;
        removeEnabled: ko.Observable;
        customToolbarItems: Array<{
            name: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId | string;
            icon: string;
            action: () => void;
        }>;
        _innerSelection: T;
        edit: () => void;
        constructor(params: CollectionEditorOptionsBase<T>);
        getListOptions(): DevExpress.ui.dxList.Properties;
        get selectedValue(): T;
        dispose(): void;
        protected _itemTemplate(itemData: any, itemIndex: any, itemElement: any): void;
        protected _getDisplayText(itemData: T): string;
        protected _itemClickHandler(): void;
        protected _listSelectionChanged(): void;
        protected _updateActionsState(): void;
        protected _onSelectionChanged(): void;
        protected _setListSelection(selectedItem: any): void;
    }
    export class CollectionEditorRefreshCallback {
        private readonly callbacks;
        refresh: () => void;
        subscribe: (fn: () => void) => number;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DxElement = DevExpress.core.DxElement;
    import dxListOptions = DevExpress.ui.dxList.Properties;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import CollectionEditorOptionsBase = DevExpress.Dashboard.Internal.Designer.CollectionEditorOptionsBase;
    import CollectionEditorRefreshCallback = DevExpress.Dashboard.Internal.Designer.CollectionEditorRefreshCallback;
    import CollectionEditorViewModelBase = DevExpress.Dashboard.Internal.Designer.CollectionEditorViewModelBase;
    export interface CollectionEditorOptions<T> extends CollectionEditorOptionsBase<T> {
        propertyName?: string;
        isToolbarVisible?: boolean;
        allowAddItem?: boolean;
        allowReorderItem?: boolean;
        allowRemoveItem?: boolean;
        createNewItemHandler?: () => T;
        editItemHandler: (item: T, args: CollectionEditorEditItemArguments, container?: ko.Observable<T>) => void;
        removeItemHandler?: (item: T) => void;
        enableRemoveItem?: () => boolean;
        reorderItemsHandler?: (item: T, direction: "up" | "down") => void;
        visibleItemsFilter?: (item: T) => boolean;
        customTemplate?: (itemData: T, itemIndex: number, itemElement: DevExpress.core.DxElement) => HTMLElement;
        forceRefreshCallback?: DevExpress.Dashboard.Internal.Designer.CollectionEditorRefreshCallback;
    }
    export class CollectionEditorViewModel<T> extends CollectionEditorViewModelBase<T> {
        private dataField;
        private dataSource;
        private enableEditItem;
        private enableRemoveItem;
        private createNewItemHandler;
        private editItemHandler;
        private removeItemHandler;
        private reorderItemsHandler;
        private visibleItemsFilter;
        private customTemplate;
        private subscriptions;
        customToolbarItems: Array<{
            name: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId | string;
            icon: string;
            action: () => void;
        }>;
        constructor(params: CollectionEditorOptions<T>, dataSource: ko.ObservableArray<T>);
        getListOptions(): DevExpress.ui.dxList.Properties;
        add: () => void;
        edit: () => void;
        remove: () => void;
        up: () => void;
        down: () => void;
        protected _itemTemplate(itemData: any, itemIndex: any, itemElement: any): void;
        protected _getDisplayText(itemData: any): any;
        private _moveSelectedGridRow;
        protected _updateActionsState(): void;
        private _safeReloadDataSource;
        dispose(): void;
    }
    export class CollectionEditorEditItemArguments {
        requestRecalculation: JQuery.Callbacks<Function>;
        createImmediately: boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxListOptions = DevExpress.ui.dxList.Properties;
    import CollectionEditorOptionsBase = DevExpress.Dashboard.Internal.Designer.CollectionEditorOptionsBase;
    import CollectionEditorViewModelBase = DevExpress.Dashboard.Internal.Designer.CollectionEditorViewModelBase;
    export interface EditableListEditorOptions<T> extends CollectionEditorOptionsBase<T> {
        propertyName?: string;
        dataSource: Array<T>;
        enableEditItem?: (item: T) => boolean;
        editItemHandler: (item: T) => void;
        getDisplayText?: (item: T) => string;
        onSelectionChanged?: (item: T) => void;
    }
    export class EditableListEditorViewModel<T> extends CollectionEditorViewModelBase<T> {
        private dataField;
        private dataSource;
        private enableEditItem;
        private editItemHandler;
        private getDisplayText;
        private onSelectionChanged;
        private selectedItem;
        constructor(params: EditableListEditorOptions<T>, selectedItem: ko.Observable<T>);
        getListOptions(): DevExpress.ui.dxList.Properties;
        edit: () => void;
        protected _getDisplayText(itemData: any): any;
        protected _listSelectionChanged(): void;
        protected _updateActionsState(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxDataGridColumn = DevExpress.ui.dxDataGridColumn;
    import dxDataGridOptions = DevExpress.ui.dxDataGrid.Properties;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import CollectionEditorRefreshCallback = DevExpress.Dashboard.Internal.Designer.CollectionEditorRefreshCallback;
    export interface InlineEditCollectionEditorOptions<T> {
        dataFields: Array<string>;
        noDataText?: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        gridColumns?: Array<DevExpress.ui.dxDataGridColumn>;
        isToolbarVisible?: boolean;
        allowAddItem?: boolean;
        allowRemoveItem?: boolean;
        allowReorderItem?: boolean;
        createNewItemHandler?: () => T;
        customizeInlineEditor?: (e: any) => void;
        customizeCell?: (e: any) => void;
        enableAddItem?: (selectedItem: T) => boolean;
        enableRemoveItem?: (selectedItem: T) => boolean;
        enableEditItem?: (selectedItem: T, args: any) => boolean;
        forceRefreshCallback?: DevExpress.Dashboard.Internal.Designer.CollectionEditorRefreshCallback;
    }
    export class InlineEditCollectionEditorViewModel<T> {
        private dataFields;
        private dataSource;
        private noDataText;
        private enableAddItem;
        private enableRemoveItem;
        private enableEditItem;
        private createNewItemHandler;
        private customizeInlineEditor;
        private customizeCell;
        private gridColumns;
        private dataSourceSubscription;
        private gridInstance;
        private dataSourceMapper;
        isToolbarVisible: boolean;
        allowAddItem: boolean;
        allowRemoveItem: boolean;
        allowReorderItem: boolean;
        addEnabled: ko.Observable<boolean>;
        removeEnabled: ko.Observable<boolean>;
        upEnabled: ko.Observable<boolean>;
        downEnabled: ko.Observable<boolean>;
        constructor(params: InlineEditCollectionEditorOptions<T>, dataSource: ko.ObservableArray<T>);
        getGridOptions(): DevExpress.ui.dxDataGrid.Properties;
        get selectedValue(): T;
        add: () => void;
        remove: () => T[];
        down: () => void;
        up: () => void;
        dispose(): void;
        private _addNewItemRow;
        private _moveSelectedGridRow;
        private _updateActionsState;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DxPromise = DevExpress.core.utils.DxPromise;
    import dxButtonOptions = DevExpress.ui.dxButton.Properties;
    import dxForm = DevExpress.ui.dxForm;
    import dxNumberBoxOptions = DevExpress.ui.dxNumberBox.Properties;
    import dxSelectBoxOptions = DevExpress.ui.dxSelectBox.Properties;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import FormAdapterItem = DevExpress.Dashboard.Metadata.FormAdapterItem;
    import FormatConditionTypeEditorOptions = DevExpress.Dashboard.Internal.Designer.FormatConditionTypeEditorOptions;
    import RuleRangesEditorOptions = DevExpress.Dashboard.Internal.Designer.RuleRangesEditorOptions;
    import StyleSettingsEditorOptions = DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorOptions;
    import ExpressionEditorParams = DevExpress.Dashboard.Internal.Designer.ExpressionEditorParams;
    import FilterEditorParams = DevExpress.Dashboard.Internal.Designer.FilterEditorParams;
    import SimpleFilterExpressionEditorOptions = DevExpress.Dashboard.Internal.Designer.SimpleFilterExpressionEditorOptions;
    import ContainerTypeSelectorOptions = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelectorOptions;
    import CollectionEditorOptions = DevExpress.Dashboard.Internal.Designer.CollectionEditorOptions;
    import EditableListEditorOptions = DevExpress.Dashboard.Internal.Designer.EditableListEditorOptions;
    import InlineEditCollectionEditorOptions = DevExpress.Dashboard.Internal.Designer.InlineEditCollectionEditorOptions;
    export type dxFormTemplateArgs = {
        component?: DevExpress.ui.dxForm;
        dataField?: string;
        editorOptions?: any;
        editorType?: string;
        name?: string;
    };
    export function getFieldValue(args: dxFormTemplateArgs): any;
    export type FormAdapterEditor<T = void> = (options: T) => DevExpress.Dashboard.Metadata.FormAdapterItem;
    export const dateBoxEditor: FormAdapterEditor;
    export const colorBoxEditor: FormAdapterEditor;
    export const numberBoxEditor: FormAdapterEditor<DevExpress.ui.dxNumberBox.Properties | void>;
    export const checkBoxEditor: FormAdapterEditor<{
        text?: string;
    }>;
    export const textBoxEditor: FormAdapterEditor;
    export const guidEditor: FormAdapterEditor;
    export const selectBoxEditor: FormAdapterEditor<Array<{
        value: any;
        displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }>>;
    export type SelectBoxValues = Array<{
        value: any;
        displayValue: string;
    }>;
    export type LocalizableSelectBoxValues = Array<{
        value: any;
        displayValueId: string | DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }>;
    export type observableSelectBoxEditorOptions<T> = {
        observables: {
            [K in keyof T]: ko.Subscribable<T[K]>;
        };
        load: (args: T) => DevExpress.core.utils.DxPromise<SelectBoxValues> | SelectBoxValues;
    } & selectBoxEditorOptions;
    export type dynamicSelectBoxEditorOptions = {
        values: ko.Subscribable<LocalizableSelectBoxValues>;
    } & selectBoxEditorOptions;
    export type selectBoxEditorOptions = {
        additionalOptions?: () => DevExpress.ui.dxSelectBox.Properties;
        comparableEditorOptions?: string[];
    };
    export function dynamicSelectBoxEditor(options: dynamicSelectBoxEditorOptions): DevExpress.Dashboard.Metadata.FormAdapterItem;
    export function observableSelectBoxEditor<T>(options: observableSelectBoxEditorOptions<T>): DevExpress.Dashboard.Metadata.FormAdapterItem;
    export const buttonGroupEditor: FormAdapterEditor<Array<{
        value: any;
        displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }>>;
    export const listEditor: FormAdapterEditor<Array<{
        value: any;
        displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }>>;
    export const editableListEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.EditableListEditorOptions<any>>;
    export const collectionEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.CollectionEditorOptions<any>>;
    export const inlineEditCollectionEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.InlineEditCollectionEditorOptions<any>>;
    export const textPreviewEditor: FormAdapterEditor<{
        target: ko.Subscribable<string>;
    }>;
    export const actionButtons: FormAdapterEditor<DevExpress.ui.dxButton.Properties[]>;
    export const flagsEnumListEditor: FormAdapterEditor<{
        values: Array<{
            value: any;
            displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        }>;
        enumDeclaration: any;
    }>;
    export const flagsEnumTagBoxEditor: FormAdapterEditor<{
        values: Array<{
            value: any;
            displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        }>;
        enumDeclaration: any;
    }>;
    export const currencyEditor: FormAdapterEditor;
    export const iconTypeEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.ContainerTypeSelectorOptions>;
    type nullableNumberBoxEditorOptions = {
        defaultValue?: number;
        editorOptions?: DevExpress.ui.dxNumberBox.Properties;
    };
    export const nullableNumberBoxEditor: FormAdapterEditor<nullableNumberBoxEditorOptions>;
    export const flowModeSettingsEditor: FormAdapterEditor;
    export const calculationExpressionEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.ExpressionEditorParams>;
    export const filterEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.FilterEditorParams>;
    export const simpleFilterEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.SimpleFilterExpressionEditorOptions>;
    type filePickerEditorOptions = {
        type: "img" | "file";
        accept: string;
        showClearButton?: boolean;
        placeholderId?: "Image" | DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        readMode?: "text";
    };
    export const filePickerEditor: FormAdapterEditor<filePickerEditorOptions>;
    export const nestedPropertyGridEditor: FormAdapterEditor<string>;
    export const ruleRangesEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.RuleRangesEditorOptions>;
    export const styleSettingsEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorOptions>;
    export const conditionTypeEditor: FormAdapterEditor<DevExpress.Dashboard.Internal.Designer.FormatConditionTypeEditorOptions>;
    export {};
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IAppearanceWrapper = DevExpress.Dashboard.Internal.Designer.IAppearanceWrapper;
    import ICustomAppearance = DevExpress.Dashboard.Internal.Designer.ICustomAppearance;
    export class CustomAppearanceDialog {
        private setAppearance;
        private availableFontFamilies;
        visible: ko.Observable<boolean>;
        isMaterial: boolean;
        appearancePreview: ko.Observable<DevExpress.Dashboard.Internal.Designer.IAppearanceWrapper>;
        colorBox: (dataField: any, labelLocaleId: any) => {
            dataField: any;
            label: {
                text: any;
            };
            cssClass: string;
            editorType: string;
            editorOptions: {
                editAlphaChannel: boolean;
            };
        };
        buttonGroup: (args: any) => HTMLDivElement;
        styleButtons: () => {
            dataField: string;
            cssClass: string;
            label: {
                visible: boolean;
            };
            template: (args: any) => HTMLDivElement;
        };
        fontStyle: (type: string, labelLocaleId: any) => {
            icon: string;
            hint: any;
            dataField: string;
            elementAttr: {
                class: string;
            };
        };
        fontStyles: {
            icon: string;
            hint: any;
            dataField: string;
            elementAttr: {
                class: string;
            };
        }[];
        appearanceSettingsGroup: () => {
            itemType: string;
            colCount: number;
            cssClass: string;
            items: ({
                dataField: any;
                label: {
                    text: any;
                };
                cssClass: string;
                editorType: string;
                editorOptions: {
                    editAlphaChannel: boolean;
                };
            } | {
                dataField: string;
                cssClass: string;
                label: {
                    visible: boolean;
                };
                template: (args: any) => HTMLDivElement;
            })[];
        };
        fontFamilyEditor: (fontFamilies: any) => (args: any) => HTMLDivElement;
        fontFamily: (fontFamilies: any) => {
            dataField: string;
            label: {
                visible: boolean;
            };
            template: (args: any) => HTMLDivElement;
        };
        styledTextPreviewEditor: () => HTMLDivElement;
        preview: {
            dataField: string;
            label: {
                visible: boolean;
            };
            template: () => HTMLDivElement;
        };
        buttonItems: ko.ObservableArray<{
            toolbar: string;
            location: string;
            widget: string;
            options: {
                type: string;
                text: any;
                onClick: () => void;
            };
        } | {
            toolbar: string;
            location: string;
            widget: string;
            options: {
                text: any;
                onClick: () => any;
                type?: undefined;
            };
        }>;
        popupOptions: {
            toolbarItems: ko.ObservableArray<{
                toolbar: string;
                location: string;
                widget: string;
                options: {
                    type: string;
                    text: any;
                    onClick: () => void;
                };
            } | {
                toolbar: string;
                location: string;
                widget: string;
                options: {
                    text: any;
                    onClick: () => any;
                    type?: undefined;
                };
            }>;
            visible: ko.Observable<boolean>;
            height: string;
            width: string;
            minWidth: string;
            maxWidth: string;
            showCloseButton: boolean;
            wrapperAttr: {
                class: string;
            };
            title: any;
        };
        items: ({
            itemType: string;
            colCount: number;
            cssClass: string;
            items: ({
                dataField: any;
                label: {
                    text: any;
                };
                cssClass: string;
                editorType: string;
                editorOptions: {
                    editAlphaChannel: boolean;
                };
            } | {
                dataField: string;
                cssClass: string;
                label: {
                    visible: boolean;
                };
                template: (args: any) => HTMLDivElement;
            })[];
        } | {
            itemType: string;
            cssClass: string;
            items: {
                dataField: string;
                label: {
                    visible: boolean;
                };
                template: (args: any) => HTMLDivElement;
            }[];
        } | {
            itemType: string;
            items: {
                dataField: string;
                label: {
                    visible: boolean;
                };
                template: () => HTMLDivElement;
            }[];
            cssClass?: undefined;
        })[];
        formOptions: {
            formData: ko.Observable<DevExpress.Dashboard.Internal.Designer.IAppearanceWrapper>;
            items: ({
                itemType: string;
                colCount: number;
                cssClass: string;
                items: ({
                    dataField: any;
                    label: {
                        text: any;
                    };
                    cssClass: string;
                    editorType: string;
                    editorOptions: {
                        editAlphaChannel: boolean;
                    };
                } | {
                    dataField: string;
                    cssClass: string;
                    label: {
                        visible: boolean;
                    };
                    template: (args: any) => HTMLDivElement;
                })[];
            } | {
                itemType: string;
                cssClass: string;
                items: {
                    dataField: string;
                    label: {
                        visible: boolean;
                    };
                    template: (args: any) => HTMLDivElement;
                }[];
            } | {
                itemType: string;
                items: {
                    dataField: string;
                    label: {
                        visible: boolean;
                    };
                    template: () => HTMLDivElement;
                }[];
                cssClass?: undefined;
            })[];
            height: string;
            labelLocation: string;
            showColonAfterLabel: boolean;
            onFieldDataChanged: (e: any) => void;
        };
        constructor(setAppearance: (appearance: DevExpress.Dashboard.Internal.Designer.ICustomAppearance) => void, availableFontFamilies: ko.Subscribable<string[]>);
        show(appearance: DevExpress.Dashboard.Internal.Designer.ICustomAppearance): void;
        getValue(): DevExpress.Dashboard.Internal.Designer.ICustomAppearance;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    export class PopoverColorPicker {
        private setColor;
        color: ko.Observable<string>;
        visible: ko.Observable<boolean>;
        constructor(setColor: (color: string) => void);
        buttonItems: ko.ObservableArray<{
            toolbar: string;
            location: string;
            widget: string;
            options: {
                text: any;
                onClick: () => void;
            };
        }>;
        show(color: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import CustomAppearanceDialog = DevExpress.Dashboard.Internal.Designer.CustomAppearanceDialog;
    import PopoverColorPicker = DevExpress.Dashboard.Internal.Designer.PopoverColorPicker;
    export type styleSettingsEditorItemType = "icon" | "appearance";
    export type StyleSettingsEditorItemArgs = {
        item: DevExpress.Dashboard.Model.StyleSettingsBase;
        clickHandler: (saveCustomStyle: "SaveColor" | "SaveAppearance" | "None") => void;
        isSelected: ko.Subscribable<boolean>;
        isEmptyAllowed: boolean;
        isRange: boolean;
        isGradient: boolean;
        restrictToColor: boolean;
        getAvailableFontFamilies?: () => ko.Subscribable<string[]>;
    };
    export class StyleSettingsEditorItem {
        cssStyles: ko.PureComputed<string>;
        title: ko.PureComputed<string>;
        dataLabel: ko.PureComputed<string>;
        cssClasses: ko.PureComputed<string>;
        isRangeStop: ko.PureComputed<boolean>;
        colorPicker: DevExpress.Dashboard.Internal.Designer.PopoverColorPicker;
        customizeAppearanceDialog: DevExpress.Dashboard.Internal.Designer.CustomAppearanceDialog;
        clickHandler: () => void;
        private _item;
        private _itemAdapter;
        private _editorClickHandler;
        private _isSelected;
        constructor(args: StyleSettingsEditorItemArgs);
        clickHandlerCore(isRestrictToColor: boolean): void;
        private _showCustomStyleEditor;
        private _initialize;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import StyleSettingsEditorItemArgs = DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs;
    export type StyleSettingsEditorMode = "Appearance" | "AllColors" | "RichColors" | "GradientColors";
    export type StyleSettingsEditorViewMode = "Appearance" | "Icon";
    export interface StyleSettingsEditorOptions {
        appearanceMode: StyleSettingsEditorMode;
        allowChangeViewMode: boolean;
        isEmptyAllowed: boolean;
        enableCustomStyles?: boolean;
        selectedChanged?: (oldStyle: DevExpress.Dashboard.Model.StyleSettingsBase, newStyle: DevExpress.Dashboard.Model.StyleSettingsBase) => void;
        closeEditCell?: () => void;
        restrictToColor?: boolean;
        getAvailableFontFamilies?: () => ko.Subscribable<string[]>;
    }
    export class StyleSettingsEditor {
        value: ko.Observable<DevExpress.Dashboard.Model.StyleSettingsBase>;
        list: Array<DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs>;
        iconList: Array<DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs>;
        customStyleItems: Array<DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs>;
        customColorsSupported: boolean;
        closeEditCell: () => void;
        selectedChanged: (oldStyle: DevExpress.Dashboard.Model.StyleSettingsBase, newStyle: DevExpress.Dashboard.Model.StyleSettingsBase) => void;
        allowChangeViewMode: boolean;
        viewMode: ko.Observable<StyleSettingsEditorViewMode>;
        private isGradient;
        private isEmptyAllowed;
        private restrictToColor;
        private readonly numberOfCustomStyleItems;
        private readonly getAvailableFontFamilies;
        constructor(target: ko.Observable<DevExpress.Dashboard.Model.StyleSettingsBase>, params: StyleSettingsEditorOptions);
        _setStyleType(styleSettingsModel: DevExpress.Dashboard.Model.StyleSettingsBase, saveCustomStyle: any): void;
        _createDataSources(mode: StyleSettingsEditorMode, isEmptyAllowed: boolean, isCustomStyleEnabled: boolean, isCustomColorsOnly: boolean, selectedValue: ko.Subscribable<DevExpress.Dashboard.Model.StyleSettingsBase>, customStylesProvider: any): {
            predefinedStyles: DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs[];
            predefinedIcons: DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs[];
            customStyles: DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorItemArgs[];
        };
        private _getCustomColorStyles;
        private _getCustomAppearanceStyles;
        private _getStyles;
        private _getCustomStyles;
        private createStyleSettingsModel;
        private createCustomColorStyleSettingsModel;
        private createCustomAppearanceStyleSettingsModel;
        private createItemViewModel;
    }
}
declare module DevExpress.Dashboard.Designer {
    import dxToolbarItem = DevExpress.ui.dxToolbarItem;
    export interface DesignerToolbarItem extends dxToolbarItem {
        name?: string;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxToolbarItem = DevExpress.ui.dxToolbarItem;
    export interface DefaultDesignerToolbarItem {
        index: number;
        name: string;
    }
    export function createToolbarSeparator(): DevExpress.ui.dxToolbarItem;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import LayoutDimensionOptions = DevExpress.Dashboard.Model.LayoutDimensionOptions;
    import DesignerToolbarItem = DevExpress.Dashboard.Designer.DesignerToolbarItem;
    export function getDimensionToolbarItems(caption: string, namePrefix: string): {
        items: Array<DevExpress.Dashboard.Designer.DesignerToolbarItem>;
        assignModel: {
            (dimensionOptions: DevExpress.Dashboard.Model.LayoutDimensionOptions): void;
        };
        dispose: {
            (): void;
        };
    };
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxForm = DevExpress.ui.dxForm;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    export let twoWayUpdateInterval: number;
    export function updateFormItemsCore(form: DevExpress.ui.dxForm, target: DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper, bindingContext: ko.BindingContext<any>, propertiesToForceUpdate?: string[]): void;
    export function transformValuesDictionary(values: {
        [key: string]: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }): Array<{
        value: any;
        displayValueId: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    }>;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    export interface IPropertiesHolder {
        model: any;
        propertiesTabs: ko.ObservableArray<DevExpress.Dashboard.Internal.Designer.AccordionTab>;
    }
    export class PropertiesController implements IDisposable {
        private _disposables;
        constructor();
        mainModel: ko.Observable<{
            containingCollection?: ko.ObservableArray<any>;
            data: IPropertiesHolder;
        }>;
        secondaryModel: ko.Observable<{
            containingCollection?: ko.ObservableArray<any>;
            displayText: string | ko.Subscribable<string>;
            data: IPropertiesHolder;
        }>;
        private currentTab;
        accordionDataSource: ko.Observable<Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>>;
        secondaryAccordionDataSource: ko.Observable<Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>>;
        computator: ko.Computed<void>;
        selectedIndex: ko.Computed<number>;
        secondarySelectedIndex: ko.Observable<number>;
        processDataItemClick: (data: any) => void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    export interface IComposeTabsArgs {
    }
    export interface IDashboardItemComposeTabsArgs extends IComposeTabsArgs {
        dashboard?: DevExpress.Dashboard.Model.Dashboard;
        dataSourceBrowser?: DevExpress.Dashboard.Internal.DataSourceBrowser;
        propertiesController?: DevExpress.Dashboard.Internal.Designer.PropertiesController;
    }
    export interface IDataItemContainerComposeTabsArgs extends IComposeTabsArgs {
        dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem;
        dataSourceBrowser?: DevExpress.Dashboard.Internal.DataSourceBrowser;
        containerType?: ko.Observable<string>;
    }
    export interface IDetailsPropertiesComposer<TModel> extends IDetailsPropertiesComposerBase<TModel, IComposeTabsArgs> {
    }
    export interface IDetailsPropertiesComposerBase<TModel, TArgs extends IComposeTabsArgs> {
        composeTabs(model: TModel, args?: TArgs): Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>;
    }
    export abstract class PropertiesComposerBase<TModel, TArgs extends IComposeTabsArgs> implements IDetailsPropertiesComposerBase<TModel, TArgs> {
        private _customizeTabs;
        constructor(_customizeTabs: ((tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: TModel, args: TArgs) => void));
        protected abstract _composeTabsCore(model: TModel, args?: TArgs): any;
        composeTabs(model: TModel, args?: TArgs): Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>;
    }
    export type CustomizeDataItemContainerTabs = (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: DevExpress.Dashboard.Model.DataItemContainer, args: IDataItemContainerComposeTabsArgs) => void;
    export abstract class DataItemContainerPropertiesComposer<T extends DevExpress.Dashboard.Model.DataItemContainer> extends PropertiesComposerBase<T, IDataItemContainerComposeTabsArgs> {
        constructor(_customizeTabs: CustomizeDataItemContainerTabs);
    }
    export type CustomizeDashboardItemTabs = (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: DevExpress.Dashboard.Model.DashboardItem, args: IDashboardItemComposeTabsArgs) => void;
    export abstract class DashboardItemPropertiesComposer<T extends DevExpress.Dashboard.Model.DashboardItem> extends PropertiesComposerBase<T, IDashboardItemComposeTabsArgs> {
        constructor(_customizeTabs: CustomizeDashboardItemTabs);
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import MapItem = DevExpress.Dashboard.Model.MapItem;
    export abstract class GeoPointMapItemBase extends MapItem {
        get _actualSelectionValues(): DevExpress.Dashboard.Internal.Model.KnockoutEntry<Array<Array<any>>>;
        private __latitude;
        private __longitude;
        latitude: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        longitude: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        private __tooltipDimensions;
        tooltipDimensions: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        enableClustering: ko.Observable<boolean>;
        private _selectedClusters;
        _clustersContent: ko.Observable<{
            Cluster: {
                Latitude: number;
                Longitude: number;
            };
            Points: Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>;
        }[]>;
        _processDataRequest: () => void;
        _actualSelectedValues: ko.Computed<DevExpress.Dashboard.Data.PrimitiveType[][]>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        _getExportingSelection(): any[];
        _getDisplayFilterValues(limitCount?: number): Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        protected _getSliceDimensions(): Array<DevExpress.Dashboard.Model.DataItemLink>;
        protected _updateContentViewModel(content: any): void;
        _setSelectionData(selection: Array<Array<number>>): void;
        _isTopNEnabled(dataItem: DevExpress.Dashboard.Model.Dimension): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import GeoPointMapItemBase = DevExpress.Dashboard.Model.GeoPointMapItemBase;
    import MapLegend = DevExpress.Dashboard.Model.MapLegend;
    import WeightedLegend = DevExpress.Dashboard.Model.WeightedLegend;
    export class BubbleMapItem extends GeoPointMapItemBase {
        private __weight;
        private __color;
        weight: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        color: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        legend: DevExpress.Dashboard.Model.MapLegend;
        weightedLegend: DevExpress.Dashboard.Model.WeightedLegend;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _clearBindings(): void;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import AbsoluteVariationNumericFormat = DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
    import PercentOfTargetNumericFormat = DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
    import PercentVariationNumericFormat = DevExpress.Dashboard.Model.PercentVariationNumericFormat;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DeltaOptions = DevExpress.Dashboard.Model.DeltaOptions;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    export abstract class ChoroplethMap extends DataItemContainer {
        _displayNameSeparator: string;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
    }
    export class ValueMap extends ChoroplethMap {
        private __value;
        value: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        valueName: ko.Observable<string>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getDataId(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        protected _getDefaultItemType(): string;
    }
    export class DeltaMap extends ChoroplethMap {
        private __actualValue;
        private __targetValue;
        actualValue: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        targetValue: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        deltaOptions: DevExpress.Dashboard.Model.DeltaOptions;
        absoluteVariationNumericFormat: DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
        percentVariationNumericFormat: DevExpress.Dashboard.Model.PercentVariationNumericFormat;
        percentOfTargetNumericFormat: DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
        actualValueName: ko.Observable<string>;
        deltaName: ko.Observable<string>;
        constructor(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _getDataId(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChoroplethMap = DevExpress.Dashboard.Model.ChoroplethMap;
    import DeltaMap = DevExpress.Dashboard.Model.DeltaMap;
    import ValueMap = DevExpress.Dashboard.Model.ValueMap;
    import MapItem = DevExpress.Dashboard.Model.MapItem;
    export class ChoroplethMapItem extends MapItem {
        static choroplethMapTypesMap: {
            ValueMap: {
                constructor: typeof DevExpress.Dashboard.Model.ValueMap;
                displayName: string;
                icon: string;
            };
            DeltaMap: {
                constructor: typeof DevExpress.Dashboard.Model.DeltaMap;
                displayName: string;
                icon: string;
            };
        };
        private __attributeDimension;
        attributeDimension: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        maps: ko.ObservableArray<DevExpress.Dashboard.Model.ChoroplethMap>;
        attributeName: ko.Observable<string>;
        tooltipAttributeName: ko.Observable<string>;
        includeSummaryValueToShapeTitle: ko.Observable<boolean>;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        _createMap(mapJSON: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer): DevExpress.Dashboard.Model.ChoroplethMap;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _getLayersCount(): number;
        protected _getLayerName(): string;
        protected _updateContentViewModel(content: any): void;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import GeoPointMapItemBase = DevExpress.Dashboard.Model.GeoPointMapItemBase;
    import MapLegend = DevExpress.Dashboard.Model.MapLegend;
    import WeightedLegend = DevExpress.Dashboard.Model.WeightedLegend;
    export class PieMapItem extends GeoPointMapItemBase {
        private __argument;
        argument: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        private __values;
        values: ko.ObservableArray<DevExpress.Dashboard.Model.Measure>;
        isWeighted: ko.Observable<boolean>;
        legend: DevExpress.Dashboard.Model.MapLegend;
        weightedLegend: DevExpress.Dashboard.Model.WeightedLegend;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _getLayersCount(): number;
        protected _getLayerName(): string;
        protected _getSliceDimensions(): Array<DevExpress.Dashboard.Model.DataItemLink>;
        protected _getIsDimensionColoredByDefault(dimension: DevExpress.Dashboard.Model.Dimension): boolean;
        protected _getAreMeasuresColoredByDefault(): boolean;
        protected _getCanColorByMeasures(): boolean;
        protected _getCanColorByDimensions(): boolean;
        _getColorizableDataItemsInfo(): Array<{
            items: Array<DevExpress.Dashboard.Model.DataItemLink>;
            prefixId: string;
        }>;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import PieWindowDefinitionMode = DevExpress.Dashboard.Model.PieWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class PieWindowDefinition extends MeasureCalculationWindowDefinition {
        definitionMode: ko.Observable<DevExpress.Dashboard.Model.PieWindowDefinitionMode>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import PieValueType = DevExpress.Dashboard.Model.PieValueType;
    import PointLabelPosition = DevExpress.Dashboard.Model.PointLabelPosition;
    import TargetDimensions = DevExpress.Dashboard.Model.TargetDimensions;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartItemBase = DevExpress.Dashboard.Model.ChartItemBase;
    export class PieItem extends ChartItemBase {
        private __values;
        values: ko.ObservableArray<DevExpress.Dashboard.Model.Measure>;
        labelContentType: ko.Observable<DevExpress.Dashboard.Model.PieValueType>;
        tooltipContentType: ko.Observable<DevExpress.Dashboard.Model.PieValueType>;
        labelPosition: ko.Observable<DevExpress.Dashboard.Model.PointLabelPosition>;
        pieType: ko.Observable<string>;
        showPieCaptions: ko.Observable<boolean>;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _clearBindings(): void;
        protected _getDefaultItemType(): string;
        protected _getTargetDimensions(): DevExpress.Dashboard.Model.TargetDimensions;
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getAreMeasuresColoredByDefault(): boolean;
        protected _getIsDimensionColoredByDefault(dimension: DevExpress.Dashboard.Model.Dimension): boolean;
        protected _getLayersCount(): number;
        protected _getLayerName(): string;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class ScatterWindowDefinition extends MeasureCalculationWindowDefinition {
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartAxisY = DevExpress.Dashboard.Model.ChartAxisY;
    import ChartLegend = DevExpress.Dashboard.Model.ChartLegend;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
    import ScatterPointLabelOptions = DevExpress.Dashboard.Model.ScatterPointLabelOptions;
    export class ScatterChartItem extends DataDashboardItem {
        private __arguments;
        arguments: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        private __axisXMeasure;
        private __axisYMeasure;
        private __weight;
        weight: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        axisXMeasure: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        axisYMeasure: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
        rotated: ko.Observable<boolean>;
        legend: DevExpress.Dashboard.Model.ChartLegend;
        axisX: DevExpress.Dashboard.Model.ChartAxisY;
        axisY: DevExpress.Dashboard.Model.ChartAxisY;
        pointLabelOptions: DevExpress.Dashboard.Model.ScatterPointLabelOptions;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _isCalculationSupported(): boolean;
        protected _getDefaultItemType(): string;
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        protected _getCanColorByMeasures(): boolean;
        protected _getCanColorByDimensions(): boolean;
        _getColorizableDataItemsInfo(): Array<{
            items: Array<DevExpress.Dashboard.Model.DataItemLink>;
            prefixId: string;
        }>;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
        _isSortingEnabled(): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import CustomShapefile = DevExpress.Dashboard.Model.CustomShapefile;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IDetailsPropertiesComposer = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposer;
    export class MapCustomShapefilePropertiesComposer implements IDetailsPropertiesComposer<DevExpress.Dashboard.Model.CustomShapefile> {
        composeTabs(model: DevExpress.Dashboard.Model.CustomShapefile): DevExpress.Dashboard.Internal.Designer.AccordionTab[];
        private fillLayoutsTab;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import CustomShapefile = DevExpress.Dashboard.Model.CustomShapefile;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    export class MapCustomShapeFileSurface implements IDisposable, IPropertiesHolder {
        model: DevExpress.Dashboard.Model.CustomShapefile;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        private _disposables;
        constructor(model: DevExpress.Dashboard.Model.CustomShapefile, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController);
        propertiesTabs: ko.ObservableArray<DevExpress.Dashboard.Internal.Designer.AccordionTab<any>>;
        startEditing(args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DeltaMap = DevExpress.Dashboard.Model.DeltaMap;
    import GridDeltaColumn = DevExpress.Dashboard.Model.GridDeltaColumn;
    import KpiElement = DevExpress.Dashboard.Model.KpiElement;
    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    import ChartAxis = DevExpress.Dashboard.Model.ChartAxis;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import KpiItem = DevExpress.Dashboard.Model.KpiItem;
    import BubbleMapItem = DevExpress.Dashboard.Model.BubbleMapItem;
    import ChoroplethMapItem = DevExpress.Dashboard.Model.ChoroplethMapItem;
    import MapItem = DevExpress.Dashboard.Model.MapItem;
    import PieMapItem = DevExpress.Dashboard.Model.PieMapItem;
    import PieItem = DevExpress.Dashboard.Model.PieItem;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import ScatterChartItem = DevExpress.Dashboard.Model.ScatterChartItem;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import ObjectPropertiesRules = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesRules;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import PropertyDesciptors = DevExpress.Dashboard.Internal.Designer.PropertyDesciptors;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    export class SharedComposers {
        static getCommonTab(model: DevExpress.Dashboard.Model.DashboardItem, properties?: DevExpress.Dashboard.Internal.Designer.PropertyDesciptors, disabledRules?: DevExpress.Dashboard.Internal.Designer.ObjectPropertiesRules): DevExpress.Dashboard.Internal.Designer.AccordionTab;
        static getAllTab(model: DevExpress.Dashboard.Model.SerializableModel): DevExpress.Dashboard.Internal.Designer.AccordionTab;
        static getContentArrangementTab(model: DevExpress.Dashboard.Model.PieItem | DevExpress.Dashboard.Model.KpiItem): DevExpress.Dashboard.Internal.Designer.AccordionTab;
        static getCommonWrapper(model: DevExpress.Dashboard.Model.DashboardItem, specificProperties?: DevExpress.Dashboard.Internal.Designer.PropertyDesciptors, specificDisabledRules?: DevExpress.Dashboard.Internal.Designer.ObjectPropertiesRules, specificVisibilityRules?: DevExpress.Dashboard.Internal.Designer.ObjectPropertiesRules): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<DashboardItem>;
        static getCommonMapWrapper(model: DevExpress.Dashboard.Model.MapItem, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController, specificProperties?: DevExpress.Dashboard.Internal.Designer.PropertyDesciptors): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<DashboardItem>;
        static updateValidationMessages(rules: any[]): void;
        static getAxisWrapper(model: DevExpress.Dashboard.Model.ChartAxis, axisComputedTitle: ko.Subscribable<string>, alwaysShowZeroLevelInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo, isDateField?: boolean, isNumericField?: boolean, groupInterval?: DevExpress.Dashboard.Model.DateTimeGroupInterval): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<ChartAxis>;
        static getLegendWrapper(model: DevExpress.Dashboard.Model.ChartItem | DevExpress.Dashboard.Model.ScatterChartItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<ChartItem | ScatterChartItem>;
        static getContentArrangementWrapper(model: DevExpress.Dashboard.Model.PieItem | DevExpress.Dashboard.Model.KpiItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<KpiItem | PieItem>;
        static getLabelsWrapper(model: DevExpress.Dashboard.Model.ChartSeries | DevExpress.Dashboard.Model.ScatterChartItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<ChartSeries | ScatterChartItem>;
        static getAttributeNamesSerializationInfo(model: DevExpress.Dashboard.Model.MapItem, propertyInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo, includeNoneValue?: boolean, noneValueCaption?: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
        static getShapeTitleSerializationInfo(model: DevExpress.Dashboard.Model.MapItem): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
        static getColorLegendWrapper(model: DevExpress.Dashboard.Model.ChoroplethMapItem | DevExpress.Dashboard.Model.PieMapItem | DevExpress.Dashboard.Model.BubbleMapItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<BubbleMapItem | ChoroplethMapItem | PieMapItem>;
        static getWeightedLegendWrapper(model: DevExpress.Dashboard.Model.PieMapItem | DevExpress.Dashboard.Model.BubbleMapItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<BubbleMapItem | PieMapItem>;
        static getNumericFormatWrapper(model: DevExpress.Dashboard.Model.DataItemNumericFormat): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<DataItemNumericFormat>;
        static getDeltaOptionsWrapper(model: any): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<any>;
        static getDeltaFormatsOptionsWrapper(model: DevExpress.Dashboard.Model.KpiElement | DevExpress.Dashboard.Model.GridDeltaColumn | DevExpress.Dashboard.Model.DeltaMap, editFormat?: (model: any) => void, ...additionalFormats: {
            title: string;
            numericFormat: DevExpress.Dashboard.Model.DataItemNumericFormat;
        }[]): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<{
            deltaFormats: ko.ObservableArray<any>;
        }>;
        static getDeltaFormats(kpiElement: DevExpress.Dashboard.Model.KpiElement | DevExpress.Dashboard.Model.GridDeltaColumn | DevExpress.Dashboard.Model.DeltaMap): any[];
        static getCustomRangesWrapper(model: DevExpress.Dashboard.Model.RangeFilterItem | DevExpress.Dashboard.Model.DateFilterItem, editRuleHandler: any, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, dimension: any): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
        static getSparklineOptionsProperties(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class SharedPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.DashboardItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.DashboardItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    export class ConfirmDialogViewModel {
        confirm(title: string, message: string, okButtonText?: string, cancelButtonText?: string): JQueryPromise<boolean>;
        confirmTitle: ko.Observable<string>;
        confirmText: ko.Observable<string>;
        confirmVisible: ko.Observable<boolean>;
        confirmButtons: ko.Observable<any[]>;
        confirmHidden: {
            (e: any): void;
        };
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DifferenceTarget = DevExpress.Dashboard.Model.DifferenceTarget;
    import DifferenceType = DevExpress.Dashboard.Model.DifferenceType;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
    export class DifferenceCalculation extends MeasureCalculation {
        private static getLookupShiftExpression;
        target: ko.Observable<DevExpress.Dashboard.Model.DifferenceTarget>;
        differenceType: ko.Observable<DevExpress.Dashboard.Model.DifferenceType>;
        get name(): string;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        get lookupShiftExpression(): string;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _createInstance(): DifferenceCalculation;
        _getExpression(argument: string): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SummaryType = DevExpress.Dashboard.Model.SummaryType;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
    export class MovingCalculation extends MeasureCalculation {
        summaryType: ko.Observable<DevExpress.Dashboard.Model.SummaryType>;
        previousValuesCount: ko.Observable<number>;
        nextValuesCount: ko.Observable<number>;
        get name(): string;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _createInstance(): MovingCalculation;
        _getExpression(argument: string): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
    export class PercentOfTotalCalculation extends MeasureCalculation {
        get name(): string;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _createInstance(): PercentOfTotalCalculation;
        _getExpression(argument: string): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import RankOrder = DevExpress.Dashboard.Model.RankOrder;
    import RankType = DevExpress.Dashboard.Model.RankType;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
    export class RankCalculation extends MeasureCalculation {
        private static _getRankFunction;
        rankType: ko.Observable<DevExpress.Dashboard.Model.RankType>;
        rankOrder: ko.Observable<DevExpress.Dashboard.Model.RankOrder>;
        get name(): string;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _createInstance(): RankCalculation;
        _getExpression(argument: string): string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import SummaryType = DevExpress.Dashboard.Model.SummaryType;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
    export class RunningTotalCalculation extends MeasureCalculation {
        summaryType: ko.Observable<DevExpress.Dashboard.Model.SummaryType>;
        get name(): string;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _createInstance(): RunningTotalCalculation;
        _getExpression(argument: string): string;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import CriteriaOperator = DevExpress.Analytics.Criteria.CriteriaOperator;
    import OperandProperty = DevExpress.Analytics.Criteria.OperandProperty;
    import ICriteriaOperatorVisitor = DevExpress.Analytics.Criteria.Utils.ICriteriaOperatorVisitor;
    export function getFilterCriteria(filterString: string): DevExpress.Analytics.Criteria.CriteriaOperator;
    export function insertDimensionsExpressionsIntoFilterExpression(filterString: string, dimensionsExpressions: {
        [dimensionName: string]: string;
    }): string;
    export class DimensionExpressionInserter implements ICriteriaOperatorVisitor {
        static patch(criteria: DevExpress.Analytics.Criteria.CriteriaOperator, dimensionsCriteria: {
            [dimensionName: string]: DevExpress.Analytics.Criteria.CriteriaOperator;
        }): DevExpress.Analytics.Criteria.CriteriaOperator;
        private _dimensionsCriteria;
        constructor(dimensionsCriteria: {
            [dimensionName: string]: DevExpress.Analytics.Criteria.CriteriaOperator;
        });
        visitOperandProperty(element: DevExpress.Analytics.Criteria.OperandProperty): DevExpress.Analytics.Criteria.CriteriaOperator;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import SpecificWindowDefinition = DevExpress.Dashboard.Model.SpecificWindowDefinition;
    import WindowDefinition = DevExpress.Dashboard.Model.WindowDefinition;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import FormAdapterEditor = DevExpress.Dashboard.Internal.Designer.FormAdapterEditor;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    export enum WindowDefinitionMode {
        Predefined = 0,
        Specific = 1
    }
    export interface WindowDefinitionEditorParams {
        dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
    }
    export class WindowDefinitionEditor {
        private _params;
        value: ko.Observable<DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition>;
        mode: ko.Observable<any>;
        formAdapterWrapper: ko.Computed<DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper>;
        constructor(windowDefinition: DevExpress.Dashboard.Model.WindowDefinition, _params: WindowDefinitionEditorParams);
        get dataSource(): {
            value: WindowDefinitionMode;
            displayValue: string;
        }[];
        setValue(newMode: WindowDefinitionMode): void;
        static createPatchSpecificWindowDimensionsInfo: (definition: DevExpress.Dashboard.Model.SpecificWindowDefinition, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser) => (propertyInfo: DevExpress.Dashboard.Metadata.IDashboardSerializationInfo) => DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    }
    export const windowDefinitionEditor: DevExpress.Dashboard.Internal.Designer.FormAdapterEditor<WindowDefinitionEditorParams>;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisplayNameProvider = DevExpress.Analytics.Utils.IDisplayNameProvider;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import IDataSourceProvider = DevExpress.Dashboard.Internal.IDataSourceProvider;
    export class ExpressionEditorDisplayNameProvider implements IDisplayNameProvider {
        private _dataFieldsProvider;
        private _dataSourceName;
        private _dataMember;
        static create(dataSourceProvider: DevExpress.Dashboard.Internal.IDataSourceProvider, dataFieldsProvider: DevExpress.Dashboard.Internal.IDataFieldsProvider, dataSourceName: string, dataMember: string): ExpressionEditorDisplayNameProvider;
        protected constructor(_dataFieldsProvider: DevExpress.Dashboard.Internal.IDataFieldsProvider, _dataSourceName: string, _dataMember: string);
        getDisplayNameByPath(dataSourcePath: string, fieldPath: string): JQueryPromise<string>;
        getRealName(dataSourcePath: string, fieldDisplayPath: string): JQueryPromise<string>;
        _getRealNameRecursive(curFieldPath: string, displayNameParts: string[]): JQueryPromise<string>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataMemberInfo = DevExpress.Analytics.Utils.IDataMemberInfo;
    import IItemsProvider = DevExpress.Analytics.Utils.IItemsProvider;
    import IPathRequest = DevExpress.Analytics.Utils.IPathRequest;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import IDataItemValuesProvider = DevExpress.Dashboard.Internal.IDataItemValuesProvider;
    import IDataSourceProvider = DevExpress.Dashboard.Internal.IDataSourceProvider;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    export class ExpressionEditorItemsProvider implements IItemsProvider {
        private dataFieldsProvider;
        private dataSourceProvider;
        private dataItemValuesProvider;
        private parameters;
        private dataSourceName;
        private dataMember;
        private filterPredicate;
        constructor(dataFieldsProvider: DevExpress.Dashboard.Internal.IDataFieldsProvider, dataSourceProvider: DevExpress.Dashboard.Internal.IDataSourceProvider, dataItemValuesProvider: DevExpress.Dashboard.Internal.IDataItemValuesProvider, parameters: DevExpress.Dashboard.Model.Parameter[], dataSourceName: DevExpress.Dashboard.Internal.Model.KnockoutEntry<string>, dataMember: DevExpress.Dashboard.Internal.Model.KnockoutEntry<string>, filterPredicate?: (field?: any) => boolean);
        getValues(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQuery.Promise<DevExpress.Analytics.Utils.IDataMemberInfo[], any, any>;
        getItems(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<DevExpress.Analytics.Utils.IDataMemberInfo[]>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
    export class CalculationPropertiesComposer implements IDetailsPropertiesComposerBase<DevExpress.Dashboard.Model.Measure, ICalculationComposeTabsArgs> {
        composeTabs(model: DevExpress.Dashboard.Model.Measure, args: ICalculationComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        fillCommonWrapper(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, model: DevExpress.Dashboard.Model.Measure, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): void;
    }
    export interface ICalculationComposeTabsArgs extends IComposeTabsArgs {
        dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
    }
    export function getCalculationArgumentExpression(measure: DevExpress.Dashboard.Model.Measure, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataFieldProvider: DevExpress.Dashboard.Internal.IDataFieldsProvider): JQueryPromise<string>;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    export class CalculationSurface implements IDisposable, IPropertiesHolder {
        model: any;
        measure: DevExpress.Dashboard.Model.Measure;
        dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        private _disposables;
        constructor(model: any, measure: DevExpress.Dashboard.Model.Measure, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController);
        propertiesTabs: ko.ObservableArray<DevExpress.Dashboard.Internal.Designer.AccordionTab<any>>;
        updatePropertiesTabs(): void;
        startEditing(args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import FilterStringOptions = DevExpress.Analytics.Widgets.FilterStringOptions;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataItemValuesProvider = DevExpress.Dashboard.Internal.IDataItemValuesProvider;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    export function formatValue(value: any, dataItem: DevExpress.Dashboard.Model.DataItem, fieldTypeName: string): any;
    type GetValuesListFunctionOptions = {
        dataItemValuesProvider: DevExpress.Dashboard.Internal.IDataItemValuesProvider;
        dataSource: string;
        dataMember: string;
        dataField: DevExpress.Dashboard.Internal.Model.IDataField;
        dataItem: DevExpress.Dashboard.Model.Dimension;
    };
    export var getValuesList: ({ dataItemValuesProvider, dataSource, dataMember, dataField, dataItem }: GetValuesListFunctionOptions) => JQuery.Promise<any, any, any>;
    export var createItemFilterOptions: (expression: ko.Observable<string>, item: any, _dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, title?: {
        text: string;
        localizationId?: string;
    }) => ko.Computed<DevExpress.Analytics.Widgets.FilterStringOptions>;
    export {};
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisplayNameProvider = DevExpress.Analytics.Utils.IDisplayNameProvider;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    export class ItemFilterDisplayNameProvider implements IDisplayNameProvider {
        private dashboardItem;
        private dataSourceBrowser;
        constructor(dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.IDataFieldsProvider);
        _mapDataItemProperties(getSourceProperty: (i: DevExpress.Dashboard.Model.DataItem) => any, getTargetProperty: (i: DevExpress.Dashboard.Model.DataItem) => any, value: any): JQueryPromise<string>;
        getDisplayNameByPath(path: string, dataMember: string): JQueryPromise<string>;
        getRealName(path: string, displayDataMember: string): JQueryPromise<string>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataMemberInfo = DevExpress.Analytics.Utils.IDataMemberInfo;
    import IItemsProvider = DevExpress.Analytics.Utils.IItemsProvider;
    import IPathRequest = DevExpress.Analytics.Utils.IPathRequest;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import IDataItemValuesProvider = DevExpress.Dashboard.Internal.IDataItemValuesProvider;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    export var getRealDimensionType: (dimension: DevExpress.Dashboard.Model.IDimensionDefinition, dataField: DevExpress.Dashboard.Internal.Model.IDataField) => DevExpress.Dashboard.Model.DataFieldType;
    export var isCategoricalDateTime: (dimension: DevExpress.Dashboard.Model.IDimensionDefinition, dataField: DevExpress.Dashboard.Internal.Model.IDataField) => boolean;
    export class ItemFilterItemsProvider implements IItemsProvider {
        private dataItemValuesProvider;
        private dataFieldProvider;
        private parameters;
        private dataDashboardItem;
        private filterPredicate;
        constructor(dataItemValuesProvider: DevExpress.Dashboard.Internal.IDataItemValuesProvider, dataFieldProvider: DevExpress.Dashboard.Internal.IDataFieldsProvider, parameters: ko.ObservableArray<DevExpress.Dashboard.Model.Parameter>, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, filterPredicate?: (di: DevExpress.Dashboard.Model.DataItem) => boolean);
        getItems(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<DevExpress.Analytics.Utils.IDataMemberInfo[]>;
        getValues(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<any[]>;
        private _getDashboardItemDataFields;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import BindingAccordionTab = DevExpress.Dashboard.Internal.Designer.BindingAccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
    export interface ICalculationDefinition {
        title: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        data: {
            type?: typeof DevExpress.Dashboard.Model.MeasureCalculation;
            default?: any;
            isEqual?: (c: DevExpress.Dashboard.Model.MeasureCalculation) => boolean;
        };
    }
    export class DataItemsPropertiesComposer implements IDetailsPropertiesComposerBase<DevExpress.Dashboard.Model.DataItemLink, IDataItemsLinkComposeTabsArgs> {
        private static _addConstraint;
        private static _mergeRules;
        composeTabs(model: DevExpress.Dashboard.Model.DataItemLink, args: IDataItemsLinkComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        fillBindingTab(bindingTab: DevExpress.Dashboard.Internal.Designer.BindingAccordionTab, model: DevExpress.Dashboard.Model.DataItemLink, choosenField: ko.Observable<DevExpress.Dashboard.Internal.Model.IDataField>, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, constraint: DevExpress.Dashboard.Internal.IFieldConstraint): void;
        fillOptionsTab(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, dataItem: DevExpress.Dashboard.Model.DataItem, model: DevExpress.Dashboard.Model.DataItemLink, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem): void;
        fillDataShapingPropertiesTab(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, model: DevExpress.Dashboard.Model.DataItemLink, dataField: DevExpress.Dashboard.Internal.Model.IDataField, measures: Array<DevExpress.Dashboard.Model.DataItem>, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): void;
        private _createExactDateProperties;
        fillDataItemExactDatetimeFormatTab(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, model: DevExpress.Dashboard.Model.DataItem): void;
        private _createExactDatePropertiesWrapper;
        fillDimensionDatetimeFormatTab(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, model: DevExpress.Dashboard.Model.Dimension): void;
        fillTopNTab(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataItem: DevExpress.Dashboard.Model.Dimension, dataField: DevExpress.Dashboard.Internal.Model.IDataField, measures: Array<DevExpress.Dashboard.Model.Measure>, supportsTopNOther: boolean, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): void;
        fillCalculationsTab(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, measure: DevExpress.Dashboard.Model.Measure, dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController): void;
        private _fillFilterTab;
        static getCellFormatRuleCreator(dataItem: DevExpress.Dashboard.Model.DataItem, dataItemApplyTo: DevExpress.Dashboard.Model.DataItem, formatRuleItemType: string): () => DevExpress.Dashboard.Model.DashboardItemFormatRule;
        static getCellFormatRuleFilter(dataItem: DevExpress.Dashboard.Model.DataItem): (rule: DevExpress.Dashboard.Model.DashboardItemFormatRule) => boolean;
        static getFormatRulesWrapper(model: DevExpress.Dashboard.Model.DataDashboardItem, createNewItemHandler: () => DevExpress.Dashboard.Model.DashboardItemFormatRule, visibleItemsFilter: (rule: DevExpress.Dashboard.Model.DashboardItemFormatRule) => boolean, editHandler: any): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<DataDashboardItem>;
    }
    export interface IDataItemsLinkComposeTabsArgs extends IComposeTabsArgs {
        dataDashboardItem: DevExpress.Dashboard.Model.DataDashboardItem;
        choosenField: ko.Observable<DevExpress.Dashboard.Internal.Model.IDataField>;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        unwrappedDataItem: boolean;
        constraint?: DevExpress.Dashboard.Internal.IFieldConstraint;
        propertiesController?: DevExpress.Dashboard.Internal.Designer.PropertiesController;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    export class DataItemSurface implements IDisposable, IPropertiesHolder {
        model: DevExpress.Dashboard.Model.DataItemLink;
        binding: DevExpress.Dashboard.Model.IBindingProperty;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        private unwrappedDataItem;
        fieldConstraint?: DevExpress.Dashboard.Internal.IFieldConstraint;
        extendTabsHandler?: (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any) => void;
        private _disposables;
        private _changeNewField;
        private _changeExistingField;
        get commonDataItemTypeConstraint(): DevExpress.Dashboard.Internal.IFieldConstraint;
        get fullConstraint(): (field: DevExpress.Dashboard.Internal.Model.IDataField) => boolean;
        constructor(model: DevExpress.Dashboard.Model.DataItemLink, binding: DevExpress.Dashboard.Model.IBindingProperty, container: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController, unwrappedDataItem: boolean, fieldConstraint?: DevExpress.Dashboard.Internal.IFieldConstraint, extendTabsHandler?: (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any) => void);
        propertiesTabs: ko.ObservableArray<DevExpress.Dashboard.Internal.Designer.AccordionTab<any>>;
        choosenField: ko.Observable<DevExpress.Dashboard.Internal.Model.IDataField>;
        newItemCreated: JQuery.Callbacks<Function>;
        itemSelected: JQuery.Callbacks<Function>;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    import ICollectionBindingProperty = DevExpress.Dashboard.Internal.Model.ICollectionBindingProperty;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
    export interface IDataSectionSurface extends IDisposable {
        template: string;
    }
    export interface IDataSectionInfo<TModel> extends ISectionInfoBase<TModel, DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs> {
    }
    export interface IDataItemContainerSectionInfo<TModel extends DevExpress.Dashboard.Model.DataItemContainer> extends ISectionInfoBase<TModel, DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs> {
        detailsPropertiesComposer?: DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer<DataItemContainer>;
    }
    export interface ISectionInfoBase<TModel, TArgs extends DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs> {
        title: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        bindingProperty?: DevExpress.Dashboard.Internal.Model.ICollectionBindingProperty;
        detailsPropertiesComposer?: DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase<TModel, TArgs>;
        actions?: {
            title: string;
            icon: string;
            action: () => void;
        }[];
    }
    export interface IDataItemHolder {
        selectItem(holder: any, binding: DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty): any;
        dataItemDisplayNameProvider(item: DevExpress.Dashboard.Model.DataItem): string;
        removeDataItem(dataItemLink: DevExpress.Dashboard.Model.DataItemLink): any;
    }
    export interface IItemsCollection {
        items: ko.ObservableArray<any>;
        supportGroups: boolean;
        relocateItem: (item: DevExpress.Dashboard.Model.DataItemContainer | DevExpress.Dashboard.Model.DataItemLink, placeholderIndex: number) => void;
        isOlap: () => boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DataItemSurface = DevExpress.Dashboard.Internal.Designer.DataItemSurface;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataSectionInfo = DevExpress.Dashboard.Internal.Designer.IDataSectionInfo;
    import IDataSectionSurface = DevExpress.Dashboard.Internal.Designer.IDataSectionSurface;
    import IItemsCollection = DevExpress.Dashboard.Internal.Designer.IItemsCollection;
    export interface IGroupedItemsHolder {
        groupIndex: undefined | number;
        position: number;
        items: Array<DevExpress.Dashboard.Model.DataItemLink | DevExpress.Dashboard.Model.DataItemContainer>;
    }
    export class DataItemCollectionSurface implements IDisposable, IDataSectionSurface, IItemsCollection {
        itemSurface: DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface<DataDashboardItem>;
        sectionInfo: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<DataItem>;
        extendTabsHandler?: (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any) => void;
        warning?: ko.Subscribable<boolean>;
        private _disposables;
        dataItems: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        supportGroups: boolean;
        constructor(itemSurface: DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface<DataDashboardItem>, sectionInfo: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<DataItem>, extendTabsHandler?: (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any) => void, warning?: ko.Subscribable<boolean>);
        groups: ko.Computed<Array<IGroupedItemsHolder>>;
        get items(): ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        private _addDataItem;
        addClick: () => void;
        private _removeDataItem;
        removeDataItem: (data: DevExpress.Dashboard.Model.DataItemLink) => void;
        dataItemDisplayNameProvider: (dataItem: DevExpress.Dashboard.Model.DataItem) => string;
        selectDataItem: (data: DevExpress.Dashboard.Model.DataItemLink) => void;
        dataItemSurface: ko.Observable<DevExpress.Dashboard.Internal.Designer.DataItemSurface>;
        newItemSample: ko.Observable<DevExpress.Dashboard.Model.DataItemLink>;
        relocateItem(item: DevExpress.Dashboard.Model.DataItemContainer | DevExpress.Dashboard.Model.DataItemLink, placeholderIndex: number): void;
        isOlap(): boolean;
        errorFactory(link: DevExpress.Dashboard.Model.DataItemLink): ko.Observable<boolean>;
        template: string;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import CustomizeDataItemContainerSectionsEventArgs = DevExpress.Dashboard.Designer.CustomizeDataItemContainerSectionsEventArgs;
    import CustomizeSectionsEventArgs = DevExpress.Dashboard.Designer.CustomizeSectionsEventArgs;
    import ConfirmDialogViewModel = DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    import IDataSectionSurface = DevExpress.Dashboard.Internal.Designer.IDataSectionSurface;
    export class BaseItemSurface<T extends DevExpress.Dashboard.Model.DashboardItem> extends DisposableObject {
        customizeDashboardItemTabs: (args: DevExpress.Dashboard.Designer.CustomizeSectionsEventArgs) => void;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        protected _dashboardItemCustomization: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<T>;
    }
    export class DataDashboardItemSurface<T extends DevExpress.Dashboard.Model.DataDashboardItem> extends BaseItemSurface<T> {
        dashboardItem: T;
        dashboardModel: DevExpress.Dashboard.Model.Dashboard;
        _dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        notificationController: DevExpress.Dashboard.NotificationController;
        findExtension?: (name: string) => DevExpress.Dashboard.IExtension;
        protected get showDefaultSections(): boolean;
        protected fillSections(): void;
        protected extendHiddenDimensionsTabs(tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any): void;
        protected extendHiddenMeasuresTabs(tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any): void;
        constructor(dashboardItem: T, dashboardModel: DevExpress.Dashboard.Model.Dashboard, _dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController, findExtension?: (name: string) => DevExpress.Dashboard.IExtension);
        customizeDataItemContainerTabs: (args: DevExpress.Dashboard.Designer.CustomizeDataItemContainerSectionsEventArgs) => void;
        protected _dataItemContainerCustomization: (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], target: DevExpress.Dashboard.Model.DataItemContainer, args: DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs) => void;
        changeDataSource(): void;
        private _changeDataSource;
        saveDataSourceChanges(): void;
        get dataSourceBrowser(): any;
        dataSourceName: ko.Observable<string>;
        dataMemberName: ko.Observable<string>;
        dataSourceDisplayText: ko.Computed<string>;
        needSetDataSource: ko.Computed<boolean>;
        changeDataSourcePanelVisible: ko.Observable<boolean>;
        template: string;
        confirmDialogViewModel: DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
        dataSections: ko.ObservableArray<DevExpress.Dashboard.Internal.Designer.IDataSectionSurface>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import BaseItemSurface = DevExpress.Dashboard.Internal.Designer.BaseItemSurface;
    import IDataSectionInfo = DevExpress.Dashboard.Internal.Designer.IDataSectionInfo;
    export var SectionDescriptors: {
        HiddenDimensions: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        HiddenMeasures: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Measure>;
        SeriesDimension: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        Arguments: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        Values: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Measure>;
        FilterDimensions: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        SparklineArgument: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        SingleArgument: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        Value: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Measure>;
        Latitude: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        Longitude: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        TooltipDimensions: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        TooltipMeasures: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Measure>;
        Columns: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        Rows: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        Weight: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Measure>;
        Color: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Measure>;
        AttributeDimension: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        Argument: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Dimension>;
        AxisXMeasure: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Measure>;
        AxisYMeasure: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<Measure>;
    };
    export interface ISurfaceConstructor {
        new (dashboardItem: DevExpress.Dashboard.Model.DashboardItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController, findExtension: (name: string) => DevExpress.Dashboard.IExtension): any;
    }
    export class SurfaceItemsFactory {
        private _itemsMap;
        register(dashboardItemType: string, surfaceTypeConstructor: ISurfaceConstructor): void;
        createSurfaceItem<T extends DevExpress.Dashboard.Model.DashboardItem>(dashboardItem: T, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController, findExtension: (name: string) => DevExpress.Dashboard.IExtension): DevExpress.Dashboard.Internal.Designer.BaseItemSurface<T>;
    }
    export var surfaceItemsFactory: SurfaceItemsFactory;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import GroupItem = DevExpress.Dashboard.Model.GroupItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import BaseItemSurface = DevExpress.Dashboard.Internal.Designer.BaseItemSurface;
    export class GroupItemSurface extends BaseItemSurface<DevExpress.Dashboard.Model.GroupItem> {
        constructor(dashboardItem: DevExpress.Dashboard.Model.GroupItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<GroupItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataMemberInfo = DevExpress.Analytics.Utils.IDataMemberInfo;
    import TreeListController = DevExpress.Analytics.Widgets.Internal.TreeListController;
    import TreeListItemViewModel = DevExpress.Analytics.Widgets.Internal.TreeListItemViewModel;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataSourceConsumer = DevExpress.Dashboard.Model.IDataSourceConsumer;
    export class FieldListPicker {
        disabled: ko.Observable<boolean>;
        constructor(dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, _value: ko.Observable<string>, model: DevExpress.Dashboard.Model.IDataSourceConsumer, disabled: ko.Observable<boolean>);
        itemsProvider: any;
        treeListController: DashboardTreeListFieldController;
        pathToMembers: ko.Computed<string>;
        value: ko.Computed<string>;
        displayValue: ko.Computed<string>;
    }
    class DashboardTreeListFieldController extends TreeListController {
        private _value;
        constructor(_value: ko.Observable<string>);
        hasItems(item: DevExpress.Analytics.Utils.IDataMemberInfo): boolean;
        canSelect(value: DevExpress.Analytics.Widgets.Internal.TreeListItemViewModel): boolean;
        select(value: DevExpress.Analytics.Widgets.Internal.TreeListItemViewModel): void;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisplayNameProvider = DevExpress.Analytics.Utils.IDisplayNameProvider;
    import IDisplayedValue = DevExpress.Analytics.Utils.IDisplayedValue;
    import IItemsProvider = DevExpress.Analytics.Utils.IItemsProvider;
    import IExpressionOptions = DevExpress.Analytics.Widgets.IExpressionOptions;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
    export class CalcFieldEditor {
        private dataSourceBrowser;
        viewModel: ko.Observable<CalcFieldEditorViewModel>;
        constructor(dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        canAddCalculatedField(dataSourceName: string): boolean;
        showAddDialog(dataSourceName: string, dataMemberName: string): JQuery.Promise<DevExpress.Dashboard.Model.CalculatedField, any, any>;
        showEditDialog(calculatedField: DevExpress.Dashboard.Model.CalculatedField, dataSourceName: string, dataMemberName: string): JQueryPromise<DevExpress.Dashboard.Model.CalculatedField>;
        removeCalcField(calculatedField: DevExpress.Dashboard.Model.CalculatedField, dataSourceName: string): JQueryPromise<DevExpress.Dashboard.Model.CalculatedField>;
        private show;
    }
    export class CalcFieldEditorViewModel {
        toolbarItems: any[];
        expressionEditable: DevExpress.Analytics.Widgets.IExpressionOptions;
        itemsProvider: DevExpress.Analytics.Utils.IItemsProvider;
        displayNameProvider?: DevExpress.Analytics.Utils.IDisplayNameProvider;
        saveHandler?: ko.Observable<(callback: {
            (): void;
        }) => void>;
        getInfo: Function;
        nameValidationRules: Array<any>;
        calculatedField: DevExpress.Dashboard.Model.CalculatedField;
        dataMember: ko.Observable<string>;
        fieldType: ko.Observable<string>;
        availableTypes: DevExpress.Analytics.Utils.IDisplayedValue[];
        name: ko.Observable<string>;
        expression: ko.Observable<string>;
        isCalcFieldNameValid: ko.Observable<boolean>;
        popupVisible: ko.Observable<boolean>;
        onResize: ko.Observable<() => void>;
        resizeAceEditor(): void;
        getKeyLocalizationPair(values: any): DevExpress.Analytics.Utils.IDisplayedValue[];
        constructor(calculatedField: DevExpress.Dashboard.Model.CalculatedField, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, dataSourceName: string, onSave: (calcField: DevExpress.Dashboard.Model.CalculatedField) => void, onBeforeSave?: () => void);
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import DimensionKey = DevExpress.Dashboard.Model.DimensionKey;
    import MeasureDefinition = DevExpress.Dashboard.Model.MeasureDefinition;
    import DimensionDefinition = DevExpress.Dashboard.Internal.Model.DimensionDefinition;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    export class ColorSchemeEntryCreator {
        constructor();
        static createMeasureKey(dataMember: string, summaryType: string): DevExpress.Dashboard.Model.MeasureDefinition;
        static createMeasureDefinitionFromMeasure(measure: DevExpress.Dashboard.Model.Measure, otherDataItems: DevExpress.Dashboard.Model.DataItem[]): DevExpress.Dashboard.Model.MeasureDefinition;
        static createDimensionDefinitionFromDimension(dimension: DevExpress.Dashboard.Model.Dimension): DevExpress.Dashboard.Internal.Model.DimensionDefinition;
        static createMeasureDefinitionCopy(measureKey: DevExpress.Dashboard.Model.MeasureDefinition): DevExpress.Dashboard.Model.MeasureDefinition;
        static createDimensionKey(dataMember: string, groupInterval: string, valueType: string, value: any): DevExpress.Dashboard.Model.DimensionKey;
        addColor(color: DevExpress.Dashboard.Model.Color): ColorSchemeEntryCreator;
        addItemComponentName(name: string): ColorSchemeEntryCreator;
        addPaletteIndex(paletteIndex: number): ColorSchemeEntryCreator;
        addDataSourceName(dataSourceName: string): ColorSchemeEntryCreator;
        addDataMemberName(dataMember: string): ColorSchemeEntryCreator;
        addMeasureKey(dataMember: string, summaryType: string): ColorSchemeEntryCreator;
        addDimensionKey(dataMember: string, groupInterval: string, valueType: string, value: any): ColorSchemeEntryCreator;
        getEntry(): DevExpress.Dashboard.Model.ColorSchemeEntry;
        private _entry;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardUpdateHub = DevExpress.Dashboard.Internal.DashboardUpdateHub;
    import ColorSchemeDefinition = DevExpress.Dashboard.Model.ColorSchemeDefinition;
    import AutoColorSchemeEntry = DevExpress.Dashboard.Model.AutoColorSchemeEntry;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import MeasureDefinition = DevExpress.Dashboard.Model.MeasureDefinition;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    export class ItemColorScheme extends DisposableObject {
        constructor(item: DevExpress.Dashboard.Model.Dashboard | DevExpress.Dashboard.Model.DataDashboardItem, _requestColorSchemeDelegate: (itemName?: string) => JQueryPromise<{}>, _updateHub: DevExpress.Dashboard.Internal.DashboardUpdateHub);
        customEntries: ko.ObservableArray<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        generatedEntries: ko.ObservableArray<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        componentName: string;
        name: string;
        allEntries: ko.Computed<DevExpress.Dashboard.Model.ColorSchemeEntry[]>;
    }
    export class ColorSchemeModel {
        private dashboard;
        private _requestColorSchemeDelegate;
        private _updateHub;
        constructor(dashboard: DevExpress.Dashboard.Model.Dashboard, _requestColorSchemeDelegate: (itemName?: string) => JQueryPromise<{}>, _updateHub: DevExpress.Dashboard.Internal.DashboardUpdateHub);
        createItemColorScheme(item: DevExpress.Dashboard.Model.DataDashboardItem): void;
        getScheme(componentName?: string): ko.ObservableArray<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        isSignatureAutogenerated: (definition: DevExpress.Dashboard.Model.ColorSchemeDefinition) => boolean;
        removeEntry: (entry: DevExpress.Dashboard.Model.ColorSchemeEntry) => void;
        removeTable: (definition: DevExpress.Dashboard.Model.ColorSchemeDefinition) => void;
        retainColorIndex(entry: DevExpress.Dashboard.Model.AutoColorSchemeEntry): void;
        initNewEntry: () => void;
        generateDefaultNames(newEntry: DevExpress.Dashboard.Model.ColorSchemeEntry): any[];
        updateEntry: (entry: DevExpress.Dashboard.Model.ColorSchemeEntry, editedEntry: DevExpress.Dashboard.Model.ColorSchemeEntry) => void;
        getAvailableMeasureKeys: () => DevExpress.Dashboard.Model.MeasureDefinition[];
        isEntryAutogenerated(entry: DevExpress.Dashboard.Model.ColorSchemeEntry): boolean;
        availableSignatures: DevExpress.Dashboard.Internal.Model.KnockoutEntry<ColorSchemeDefinition[]>;
        editableSignatures: DevExpress.Dashboard.Internal.Model.KnockoutEntry<ColorSchemeDefinition[]>;
        selectedSignatures: ko.Observable<DevExpress.Dashboard.Model.ColorSchemeDefinition[]>;
        selectedSignatureEntries: DevExpress.Dashboard.Internal.Model.KnockoutEntry<ColorSchemeEntry[]>;
        itemColorSchemes: {
            [key: string]: ItemColorScheme;
        };
        allEntries: ko.Computed<DevExpress.Dashboard.Model.ColorSchemeEntry[]>;
        newEntry: ko.Observable<DevExpress.Dashboard.Model.ColorSchemeEntry>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import ColorSchemeModel = DevExpress.Dashboard.Internal.Designer.ColorSchemeModel;
    export class ColorPickerModel {
        private colorSchemeModel;
        private colorPalette;
        constructor(colorSchemeModel: DevExpress.Dashboard.Internal.Designer.ColorSchemeModel, colorPalette: ko.ObservableArray<DevExpress.Dashboard.Model.Color>);
        target: ko.Observable<HTMLElement>;
        visible: ko.Observable<boolean>;
        colorCss: ko.Observable<string>;
        confirm: () => void;
        init(entry: DevExpress.Dashboard.Model.ColorSchemeEntry, target?: HTMLElement): void;
        buttonItems: ko.ObservableArray<{
            toolbar: string;
            location: string;
            widget: string;
            options: {
                text: any;
                onClick: () => void;
            };
        }>;
        private entry;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import FormAdapterEditor = DevExpress.Dashboard.Internal.Designer.FormAdapterEditor;
    import ColorPickerModel = DevExpress.Dashboard.Internal.Designer.ColorPickerModel;
    interface UniqueColorValue {
        id: string;
        displayValue: string;
    }
    export class ColorEntryTreeItem {
        value: string;
        uniqueKey: string;
        entry: DevExpress.Dashboard.Model.ColorSchemeEntry;
        constructor(value: string, uniqueKey: string, entry: DevExpress.Dashboard.Model.ColorSchemeEntry, editColor: (entry: DevExpress.Dashboard.Model.ColorSchemeEntry, event: JQueryEventObject) => void, entryComputedColor: DevExpress.Dashboard.Model.Color);
        editColor: any;
        color: string;
        items: ColorEntryTreeItem[];
        expanded: boolean;
        custom: boolean;
    }
    export interface ColorTreeViewModelOptions {
        dataSource: DevExpress.Dashboard.Internal.Model.KnockoutEntry<ColorSchemeEntry[]>;
        editColor: (entry: DevExpress.Dashboard.Model.ColorSchemeEntry, event: JQueryEventObject) => void;
        colorPalette: ko.ObservableArray<DevExpress.Dashboard.Model.Color>;
        allowModify?: boolean;
        selectedEntry?: DevExpress.Dashboard.Internal.Model.KnockoutEntry<ColorSchemeEntry>;
        addNewEntry?: () => void;
        removeEntry?: any;
        colorPickerModel?: ko.Computed<DevExpress.Dashboard.Internal.Designer.ColorPickerModel>;
    }
    export class ColorTreeViewModel {
        static construct(values: Array<UniqueColorValue>, children: ColorEntryTreeItem[], entry: DevExpress.Dashboard.Model.ColorSchemeEntry, editColor: (entry: DevExpress.Dashboard.Model.ColorSchemeEntry, event: JQueryEventObject) => void, entryComputedColor: DevExpress.Dashboard.Model.Color): void;
        constructor(params: ColorTreeViewModelOptions);
        addNewEntry: () => void;
        removeItem: (item: ColorEntryTreeItem) => void;
        allowAddNewEntry: ko.Computed<boolean>;
        dataSource: ko.Computed<ColorEntryTreeItem[]>;
        isTreeMode: ko.Computed<boolean>;
        colorPickerModel: ko.Computed<DevExpress.Dashboard.Internal.Designer.ColorPickerModel>;
        allowModify: boolean;
        selectedTreeItems: ko.Observable<ColorEntryTreeItem[]>;
        private selectedEntry;
        private removeEntry;
        onItemSelectionChanged: (e: any) => void;
    }
    export const colorSchemeTreeViewEditor: DevExpress.Dashboard.Internal.Designer.FormAdapterEditor<ColorTreeViewModelOptions>;
    export {};
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import DimensionKey = DevExpress.Dashboard.Model.DimensionKey;
    import MeasureDefinition = DevExpress.Dashboard.Model.MeasureDefinition;
    export class EntryEditorViewModel {
        private colorPalette;
        constructor(colorPalette: ko.ObservableArray<DevExpress.Dashboard.Model.Color>);
        editEntry: (dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, entry: DevExpress.Dashboard.Model.ColorSchemeEntry, colorByMeasures: boolean, availableMeasures: DevExpress.Dashboard.Model.MeasureDefinition[], updateEntry: (entry: DevExpress.Dashboard.Model.ColorSchemeEntry) => void, isAutoGenerated?: boolean) => void;
        close: () => void;
        private subscribeObservables;
        private validate;
        private invalidate;
        visible: ko.Observable<boolean>;
        entryToEdit: ko.Observable<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        updateEntry: (entry: DevExpress.Dashboard.Model.ColorSchemeEntry) => void;
        isAutogenerated: ko.Observable<boolean>;
        hasMeasures: ko.Observable<boolean>;
        availableMeasures: ko.ObservableArray<DevExpress.Dashboard.Model.MeasureDefinition>;
        measuresValidationRules: any[];
        dimensionEditors: ko.ObservableArray<any>;
        dimensionKeys: ko.ObservableArray<DevExpress.Dashboard.Model.DimensionKey>;
        measureKeys: ko.ObservableArray<DevExpress.Dashboard.Model.MeasureDefinition>;
        selectedMeasuresIds: ko.Computed<Array<any>>;
        color: ko.Observable<string>;
        private _subscriptions;
        private _validationGroupName;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import CardItemDeltaFormatRule = DevExpress.Dashboard.Model.CardItemDeltaFormatRule;
    import CardItemFormatRule = DevExpress.Dashboard.Model.CardItemFormatRule;
    import CellsItemFormatRule = DevExpress.Dashboard.Model.CellsItemFormatRule;
    import ChartItemFormatRule = DevExpress.Dashboard.Model.ChartItemFormatRule;
    import ScatterChartItemFormatRule = DevExpress.Dashboard.Model.ScatterChartItemFormatRule;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ObjectPropertiesInfo = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesInfo;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ConditionTypesFilters = DevExpress.Dashboard.Internal.Designer.ConditionTypesFilters;
    export interface KeyText {
        uniqueName: string | ko.Observable<string>;
        displayName: string | ko.Observable<string>;
    }
    export interface FormatRulePropertiesComposerOptions<TRule extends DevExpress.Dashboard.Model.DashboardItemFormatRule, TDashboardItem extends DevExpress.Dashboard.Model.DataDashboardItem> {
        conditionTypeFilter?: DevExpress.Dashboard.Internal.Designer.ConditionTypesFilters;
        createDataTypeObservable: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser) => ConditionEditorDataType;
        getCommonFormatRuleProperties: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, ruleAdded?: JQueryCallback) => DevExpress.Dashboard.Internal.Designer.ObjectPropertiesInfo<TRule>;
        getConditionFormatRuleProperties: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser) => DevExpress.Dashboard.Internal.Designer.ObjectPropertiesInfo<TRule>;
        getMiscFormatRuleProperties: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser) => DevExpress.Dashboard.Internal.Designer.ObjectPropertiesInfo<TRule>;
        getAdditionalTabs?: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser) => DevExpress.Dashboard.Internal.Designer.AccordionTab[];
    }
    export class FormatRulePropertiesComposer<TRule extends DevExpress.Dashboard.Model.DashboardItemFormatRule, TDashboardItem extends DevExpress.Dashboard.Model.DataDashboardItem> implements IDetailsPropertiesComposerBase<DevExpress.Dashboard.Model.DashboardItemFormatRule, FormatRuleComposeTabsArgs<TDashboardItem>> {
        private _options;
        constructor(_options: FormatRulePropertiesComposerOptions<TRule, TDashboardItem>);
        composeTabs(model: TRule, args: FormatRuleComposeTabsArgs<TDashboardItem>): DevExpress.Dashboard.Internal.Designer.AccordionTab[];
        private _fillCommonFormatRuleCommonWrapper;
        private _fillConditionWrapper;
        protected _fillMiscWrapper(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): void;
    }
    export function createDeltaDataTypeObservable(model: DevExpress.Dashboard.Model.CardItemDeltaFormatRule, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): ConditionEditorDataType;
    export interface ConditionEditorDataType {
        dataType: ko.Observable<string>;
        dateTimeGroupInterval: ko.Observable<DevExpress.Dashboard.Model.DateTimeGroupInterval>;
    }
    export function createDataTypeObservable(formatRule: DevExpress.Dashboard.Model.ChartItemFormatRule | DevExpress.Dashboard.Model.ScatterChartItemFormatRule | DevExpress.Dashboard.Model.CellsItemFormatRule | DevExpress.Dashboard.Model.CardItemFormatRule, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): ConditionEditorDataType;
    export function addConditionEditor(wrapper: DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<DashboardItemFormatRule>, dataTypeInfo: ConditionEditorDataType, formatRuleModel: DevExpress.Dashboard.Model.DashboardItemFormatRule, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, requestRecalculation: JQueryCallback, specificTypeChanged: () => void, conditionTypeFilter?: DevExpress.Dashboard.Internal.Designer.ConditionTypesFilters): void;
    export function getCommonCellsFormatRuleProperties(formatRule: DevExpress.Dashboard.Model.CellsItemFormatRule, getDataItems: () => KeyText[], getApplyToDataItems: () => KeyText[]): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesInfo<CellsItemFormatRule>;
    export interface FormatRuleComposeTabsArgs<TDashboardItem extends DevExpress.Dashboard.Model.DataDashboardItem> extends IComposeTabsArgs {
        dashboardItem: TDashboardItem;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        requestRecalculation: JQueryCallback;
        specificTypeChanged: () => void;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import CardLayout = DevExpress.Dashboard.Model.CardLayout;
    import CardLayoutTemplateDataElement = DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
    import CardLayoutTemplateDeltaElement = DevExpress.Dashboard.Model.CardLayoutTemplateDeltaElement;
    import CardLayoutTemplateSparklineElement = DevExpress.Dashboard.Model.CardLayoutTemplateSparklineElement;
    export type CardLayoutTemplateType = "Stretched" | "Centered" | "Lightweight" | "Compact" | "Custom" | "None";
    export abstract class CardLayoutTemplate extends SerializableModel {
        title: string;
        minWidth: ko.Observable<number>;
        maxWidth: ko.Observable<number>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        abstract _collectProperties(dimensionNames: string[]): Array<any>;
        abstract getType(): string;
        abstract _createInstance(): CardLayoutTemplate;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _resetToDefaults(): void;
        clone(): CardLayoutTemplate;
        private _clone;
    }
    export class CardEmptyLayoutTemplate extends CardLayoutTemplate {
        isEmpty: ko.Observable<boolean>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _collectProperties(dimensionNames: string[]): any[];
        getType(): CardLayoutTemplateType;
        getInfo(): any[];
        _createInstance(): CardLayoutTemplate;
    }
    export class CardCustomLayoutTemplate extends CardLayoutTemplate {
        layout: DevExpress.Dashboard.Model.CardLayout;
        type: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _collectProperties(dimensionNames: string[]): Array<any>;
        _resetToDefaults(): void;
        getType(): string;
        _createInstance(): CardLayoutTemplate;
    }
    export class CardCenteredLayoutTemplate extends CardLayoutTemplate {
        mainValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        subValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomSubValue1: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomSubValue2: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        deltaIndicator: DevExpress.Dashboard.Model.CardLayoutTemplateDeltaElement;
        sparkline: DevExpress.Dashboard.Model.CardLayoutTemplateSparklineElement;
        type: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _collectProperties(dimensionNames: string[]): Array<any>;
        _resetToDefaults(): void;
        getType(): string;
        _createInstance(): CardLayoutTemplate;
    }
    export class CardStretchedLayoutTemplate extends CardLayoutTemplate {
        topValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        mainValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        subValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomValue1: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomValue2: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        deltaIndicator: DevExpress.Dashboard.Model.CardLayoutTemplateDeltaElement;
        sparkline: DevExpress.Dashboard.Model.CardLayoutTemplateSparklineElement;
        type: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _collectProperties(dimensionNames: string[]): Array<any>;
        _resetToDefaults(): void;
        getType(): string;
        _createInstance(): CardLayoutTemplate;
    }
    export class CardLightweightLayoutTemplate extends CardLayoutTemplate {
        mainValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        subValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        deltaIndicator: DevExpress.Dashboard.Model.CardLayoutTemplateDeltaElement;
        sparkline: DevExpress.Dashboard.Model.CardLayoutTemplateSparklineElement;
        type: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _collectProperties(dimensionNames: string[]): Array<any>;
        _resetToDefaults(): void;
        getType(): string;
        _createInstance(): CardLayoutTemplate;
    }
    export class CardCompactLayoutTemplate extends CardLayoutTemplate {
        mainValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        subValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomValue: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomSubValue1: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        bottomSubValue2: DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
        deltaIndicator: DevExpress.Dashboard.Model.CardLayoutTemplateDeltaElement;
        sparkline: DevExpress.Dashboard.Model.CardLayoutTemplateSparklineElement;
        type: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        _collectProperties(dimensionNames: string[]): Array<any>;
        _resetToDefaults(): void;
        getType(): string;
        _createInstance(): CardLayoutTemplate;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import KpiElement = DevExpress.Dashboard.Model.KpiElement;
    import CardDeltaOptions = DevExpress.Dashboard.Model.CardDeltaOptions;
    import SparklineOptions = DevExpress.Dashboard.Model.SparklineOptions;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    export class Card extends KpiElement {
        private static templateTypes;
        private static _createTemplate;
        type: ko.Observable<string>;
        cardDeltaOptions: DevExpress.Dashboard.Model.CardDeltaOptions;
        sparklineOptions: DevExpress.Dashboard.Model.SparklineOptions;
        showSparkline: ko.Observable<boolean>;
        layoutTemplate: ko.Observable<DevExpress.Dashboard.Model.CardLayoutTemplate>;
        constructor(dataItemProvider: DevExpress.Dashboard.Model.DataDashboardItem, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
        _isTypeEmpty(): boolean;
        _setTemplateSwitchingOptions(newTemplate: any): void;
        private _switchToCardDeltaOptions;
        private _switchToKpiDeltaOptions;
        protected _getDefaultItemType(): string;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import CardWindowDefinitionMode = DevExpress.Dashboard.Model.CardWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    export class CardWindowDefinition extends MeasureCalculationWindowDefinition {
        definitionMode: ko.Observable<DevExpress.Dashboard.Model.CardWindowDefinitionMode>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        equals(def: any): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import KpiItem = DevExpress.Dashboard.Model.KpiItem;
    import Card = DevExpress.Dashboard.Model.Card;
    export class CardItem extends KpiItem {
        private __sparklineArgument;
        sparklineArgument: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        cards: ko.ObservableArray<DevExpress.Dashboard.Model.Card>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _clearBindings(): void;
        protected _getDefaultItemType(): string;
        protected _getLayersCount(): number;
        protected _getLayerName(): string;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
        _itemInteractivityByColumnAxis(): boolean;
        _getInteractivityAxisDimensionCount(): number;
        _conditionFormattingExpressionEditorFilter(dataItem: DevExpress.Dashboard.Model.DataItem): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import CardItemDeltaFormatRule = DevExpress.Dashboard.Model.CardItemDeltaFormatRule;
    import CardItemFormatRule = DevExpress.Dashboard.Model.CardItemFormatRule;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import CardItem = DevExpress.Dashboard.Model.CardItem;
    import ConditionTypesFilters = DevExpress.Dashboard.Internal.Designer.ConditionTypesFilters;
    import FormatRulePropertiesComposer = DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer;
    export function isDataItemFormatRuleAvaliable(dashboardItem: DevExpress.Dashboard.Model.CardItem): boolean;
    export function createCardItemFormatRulePropertiesComposer(selectedRuleContainer: ko.Observable<DevExpress.Dashboard.Model.DashboardItemFormatRule>): DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer<CardItemFormatRule, CardItem>;
    export function isDeltaFormatRuleAvaliable(dashboardItem: DevExpress.Dashboard.Model.CardItem): boolean;
    export function createCardItemDeltaFormatRulePropertiesComposer(selectedRuleContainer: ko.Observable<DevExpress.Dashboard.Model.DashboardItemFormatRule>): DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer<CardItemDeltaFormatRule, CardItem>;
    export let cardItemConditionTypeFilters: DevExpress.Dashboard.Internal.Designer.ConditionTypesFilters;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ScatterChartItemFormatRule = DevExpress.Dashboard.Model.ScatterChartItemFormatRule;
    import ChartItemFormatRule = DevExpress.Dashboard.Model.ChartItemFormatRule;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ConditionTypesFilters = DevExpress.Dashboard.Internal.Designer.ConditionTypesFilters;
    import FormatRulePropertiesComposer = DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer;
    export function createChartItemFormatRulePropertiesComposer(): DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer<ChartItemFormatRule, ChartItem>;
    export const chartFormatRuleConditionFilters: DevExpress.Dashboard.Internal.Designer.ConditionTypesFilters;
    export function getChartFormatRuleLegendSettingsTab<T extends DevExpress.Dashboard.Model.ChartItemFormatRule | DevExpress.Dashboard.Model.ScatterChartItemFormatRule>(formatRule: T): DevExpress.Dashboard.Internal.Designer.AccordionTab[];
}
declare module DevExpress.Dashboard.Internal.Designer {
    import GridItemFormatRule = DevExpress.Dashboard.Model.GridItemFormatRule;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import FormatRulePropertiesComposer = DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer;
    export function createGridItemFormatRulePropertiesComposer(): DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer<GridItemFormatRule, GridItem>;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import PivotItemFormatRule = DevExpress.Dashboard.Model.PivotItemFormatRule;
    import PivotItem = DevExpress.Dashboard.Model.PivotItem;
    import FormatRulePropertiesComposer = DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer;
    export function createPivotItemFormatRulePropertiesComposer(): DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer<PivotItemFormatRule, PivotItem>;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ScatterChartItemFormatRule = DevExpress.Dashboard.Model.ScatterChartItemFormatRule;
    import ScatterChartItem = DevExpress.Dashboard.Model.ScatterChartItem;
    import FormatRulePropertiesComposer = DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer;
    export function createScatterChartItemFormatRulePropertiesComposer(): DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer<ScatterChartItemFormatRule, ScatterChartItem>;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    export class FormatRuleSurface implements IDisposable {
        model: ko.Observable<DevExpress.Dashboard.Model.DashboardItemFormatRule>;
        dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        private _disposables;
        constructor(model: ko.Observable<DevExpress.Dashboard.Model.DashboardItemFormatRule>, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController);
        updatePropertiesTabs(requestRecalculation: JQueryCallback): void;
        startEditing(args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IConnectionStringDefinition = DevExpress.Analytics.Wizard.IConnectionStringDefinition;
    import IDataSourceWizardConnectionStrings = DevExpress.Analytics.Wizard.IDataSourceWizardConnectionStrings;
    import IDataSourceWizardState = DevExpress.Analytics.Wizard.IDataSourceWizardState;
    export function ToDataSourceTypeNumber(dashboardType: DashboardDataSourceType): number;
    export function ToDashboardDataSourceType(typeNumber: number): DashboardDataSourceType;
    export type DashboardDataSourceType = "Sql" | "Olap" | "Json" | "Federation";
    export interface IOlapDataSourceWizardState {
        connectionName?: string;
    }
    export interface IDashboardDataSourceWizardState extends IDataSourceWizardState {
        dashboardDataSourceType?: DashboardDataSourceType;
        olapDataSourceWizard?: IOlapDataSourceWizardState;
    }
    export interface IDashboardConnectionStringDefinition extends IConnectionStringDefinition {
        connectionType?: DashboardDataSourceType;
    }
    export interface IDashboardDataSourceWizardConnectionStrings extends IDataSourceWizardConnectionStrings {
        olap?: IDashboardConnectionStringDefinition[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IAjaxSettings = DevExpress.Analytics.Internal.IAjaxSettings;
    import _DataSourceWizardOptions = DevExpress.Analytics.Wizard._DataSourceWizardOptions;
    import _MultiQueryDataSourceWizardOptions = DevExpress.Analytics.Wizard._MultiQueryDataSourceWizardOptions;
    import RequestWrapper = DevExpress.QueryBuilder.Utils.RequestWrapper;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import IDashboardDataSourceWizardSettings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    export class DashboardRequestWrapper extends RequestWrapper {
        private dashboardControl;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        _sendRequest(settings: DevExpress.Analytics.Internal.IAjaxSettings): JQuery.Promise<any, any, any>;
        sendRequest(action: string, arg: string): JQuery.Promise<any, any, any>;
    }
    export class DashboardDataSourceWizardOptions extends _DataSourceWizardOptions {
        constructor();
        connectionStrings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
        wizardSettings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    }
    export class DashboardMultiQueryDataSourceWizardOptions extends _MultiQueryDataSourceWizardOptions {
        constructor();
        connectionStrings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
        wizardSettings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import PathRequest = DevExpress.Analytics.Utils.PathRequest;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    export class ParametersItemProvider {
        private dashboardParameters;
        constructor(dashboardParameters?: Array<DevExpress.Dashboard.Model.Parameter>);
        getItems(pathRequest: DevExpress.Analytics.Utils.PathRequest): JQuery.Promise<any, any, any>;
    }
}
declare module DevExpress.Dashboard.Designer {
    export const DataSourceWizardPageId: {
        ChooseDataSourceTypePage: string;
    };
    export const OlapDataSourceWizardPageId: {
        ChooseConnectionPage: string;
    };
}
declare module DevExpress.Dashboard.Designer {
    import ChooseDataSourceTypePage = DevExpress.Analytics.Wizard.ChooseDataSourceTypePage;
    import ITypeItem = DevExpress.Analytics.Wizard.ITypeItem;
    import PageFactory = DevExpress.Analytics.Wizard.PageFactory;
    import _DataSourceWizardOptions = DevExpress.Analytics.Wizard._DataSourceWizardOptions;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import DashboardDataSourceWizardOptions = DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardOptions;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    import IDashboardDataSourceWizardState = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardState;
    export class DashboardChooseDataSourceTypePage extends ChooseDataSourceTypePage {
        connectionStrings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
        private _dataSources;
        private _confirmDialogViewModel;
        private _confirmDialogCustomTemplate;
        private _customTemplates;
        constructor(wizardOptions: DevExpress.Analytics.Wizard._DataSourceWizardOptions, customTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>);
        protected _createTypeItems(): DevExpress.Analytics.Wizard.ITypeItem[];
        commit(): JQueryPromise<DevExpress.Dashboard.Designer.IDashboardDataSourceWizardState>;
        dispose(): void;
    }
    export function _registerChooseDataSourceTypePage(factory: DevExpress.Analytics.Wizard.PageFactory, wizardOptions: DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardOptions, customTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>): void;
}
declare module DevExpress.Dashboard.Designer {
    import PageFactory = DevExpress.Analytics.Wizard.PageFactory;
    import WizardPageBase = DevExpress.Analytics.Wizard.WizardPageBase;
    import IDashboardConnectionStringDefinition = DevExpress.Dashboard.Designer.IDashboardConnectionStringDefinition;
    import IOlapDataSourceWizardState = DevExpress.Dashboard.Designer.IOlapDataSourceWizardState;
    export class DashboardChooseOlapConnectionStringPage extends WizardPageBase<DevExpress.Dashboard.Designer.IOlapDataSourceWizardState, DevExpress.Dashboard.Designer.IOlapDataSourceWizardState> {
        _selectedConnectionString: ko.ObservableArray<DevExpress.Dashboard.Designer.IDashboardConnectionStringDefinition>;
        _connectionStrings: DevExpress.Dashboard.Designer.IDashboardConnectionStringDefinition[];
        constructor(connectionStrings: DevExpress.Dashboard.Designer.IDashboardConnectionStringDefinition[]);
        canNext(): boolean;
        canFinish(): boolean;
        commit(): JQuery.Promise<DevExpress.Dashboard.Designer.IOlapDataSourceWizardState, any, any>;
        initialize(state: DevExpress.Dashboard.Designer.IOlapDataSourceWizardState): JQueryPromise<any>;
    }
    export function _registerOlapConnectionStringsPage(factory: DevExpress.Analytics.Wizard.PageFactory, connectionStrings: DevExpress.Dashboard.Designer.IDashboardConnectionStringDefinition[]): void;
}
declare module DevExpress.Dashboard.Designer {
    import PageFactory = DevExpress.Analytics.Wizard.PageFactory;
    import _MultiQueryDataSourceWizardOptions = DevExpress.Analytics.Wizard._MultiQueryDataSourceWizardOptions;
    export function _registerFederatedQueryConfigurePage(factory: DevExpress.Analytics.Wizard.PageFactory, wizardOptions: DevExpress.Analytics.Wizard._MultiQueryDataSourceWizardOptions): void;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import PageFactory = DevExpress.Analytics.Wizard.PageFactory;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    export let JsonDataSourceWizardSettings: {
        allowObjectPropertiesAsRoot: boolean;
    };
    export function _registerChooseJsonSchemaPage(factory: DevExpress.Analytics.Wizard.PageFactory, requestWrapper: DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper, parameters: ko.Computed<DevExpress.Dashboard.Model.Parameter[]>): void;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataMemberInfo = DevExpress.Analytics.Utils.IDataMemberInfo;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    export interface IDashboardDataMemberInfo extends IDataMemberInfo {
        hasItems: boolean;
        field: DevExpress.Dashboard.Internal.Model.IDataField;
    }
    export function createDataMemberInfo(field: DevExpress.Dashboard.Internal.Model.IDataField, dataSource: DevExpress.Dashboard.Model.DataSource): IDashboardDataMemberInfo;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IPathRequest = DevExpress.Analytics.Utils.IPathRequest;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import IDataSourceProvider = DevExpress.Dashboard.Internal.IDataSourceProvider;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import IDashboardDataMemberInfo = DevExpress.Dashboard.Internal.Designer.IDashboardDataMemberInfo;
    export function getFieldList(pathRequest: DevExpress.Analytics.Utils.IPathRequest, dataFieldsProvider: DevExpress.Dashboard.Internal.IDataFieldsProvider, dataSourceProvider: DevExpress.Dashboard.Internal.IDataSourceProvider, filterDelegate?: (field: DevExpress.Dashboard.Internal.Model.IDataField) => boolean): JQueryPromise<DevExpress.Dashboard.Internal.Designer.IDashboardDataMemberInfo[]>;
    export class FlatteningDataFieldsProviderWrapper implements IDataFieldsProvider {
        private _basic;
        private _shouldFlatten;
        constructor(basic: DevExpress.Dashboard.Internal.IDataFieldsProvider, shouldFlatten?: (field: DevExpress.Dashboard.Internal.Model.IDataField) => boolean);
        findDataField(dataSourceName: string, dataMemberName: string, fullFieldName: string, hasGroupSeparator?: boolean): JQueryPromise<DevExpress.Dashboard.Internal.Model.IDataField>;
        getDataFieldsArray(dataSourceName: string, dataMember: string, fieldPath: string, filterDelegate: (field: DevExpress.Dashboard.Internal.Model.IDataField) => boolean): JQueryPromise<DevExpress.Dashboard.Internal.Model.IDataField[]>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import AnalyticsFederationDataSource = DevExpress.Analytics.Data.FederationDataSource;
    import FederationSource = DevExpress.Analytics.Data.FederationSource;
    import TransformQuery = DevExpress.Analytics.Data.TransformQuery;
    import UnionQuery = DevExpress.Analytics.Data.UnionQuery;
    import IDataSourceInfo = DevExpress.Analytics.Internal.IDataSourceInfo;
    import IDataMemberInfo = DevExpress.Analytics.Utils.IDataMemberInfo;
    import IItemsProvider = DevExpress.Analytics.Utils.IItemsProvider;
    import IPathRequest = DevExpress.Analytics.Utils.IPathRequest;
    import IFederationDataSourceWizardState = DevExpress.Analytics.Wizard.IFederationDataSourceWizardState;
    import IFederationQuery = DevExpress.QueryBuilder.Utils.IFederationQuery;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataSourceProvider = DevExpress.Dashboard.Internal.IDataSourceProvider;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import FederationDataSource = DevExpress.Dashboard.Model.FederationDataSource;
    import QueryNode = DevExpress.Dashboard.Model.QueryNode;
    import Source = DevExpress.Dashboard.Model.Source;
    import IDashboardDataSourceWizardSettings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    export interface IDashboardDataSourceInfo extends IDataSourceInfo {
        componentName: string;
    }
    export function getDataSourceInfo(dataSource: DevExpress.Dashboard.Model.DataSource): IDashboardDataSourceInfo;
    export function createNewFederationDataSource(federationWizardModel: DevExpress.Analytics.Wizard.IFederationDataSourceWizardState, usedDataSources: ko.Computed<IDashboardDataSourceInfo[]>): DevExpress.Dashboard.Model.FederationDataSource;
    export function toFederationDataSource(analyticsDataSource: DevExpress.Analytics.Data.FederationDataSource, usedDataSources: IDashboardDataSourceInfo[]): DevExpress.Dashboard.Model.FederationDataSource;
    export function addSourceIfNotExists(analyticsSource: DevExpress.Analytics.Data.FederationSource, dashboardFederationDataSource: DevExpress.Dashboard.Model.FederationDataSource, usedDataSources: IDashboardDataSourceInfo[]): void;
    export function toSameSourcesFederationQuery(analyticsQuery: DevExpress.QueryBuilder.Utils.IFederationQuery): DevExpress.Dashboard.Model.QueryNode;
    export function toAnalyticsFederationDataSource(federationDataSource: DevExpress.Dashboard.Model.FederationDataSource, usedDataSources: IDashboardDataSourceInfo[], dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): DevExpress.Analytics.Data.FederationDataSource;
    export let initialQueryAliasSymbol: string;
    export function addOrUpdateQuery(dashboard: DevExpress.Dashboard.Model.Dashboard, federationDataSource: DevExpress.Dashboard.Model.FederationDataSource, index: number, newQuery: DevExpress.Dashboard.Model.QueryNode): void;
    export function createDataSourceInfos(dashboardDataSources: DevExpress.Dashboard.Model.DataSource[]): IDashboardDataSourceInfo[];
    export function createWizardSettings(publicSettings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings): DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    export function getFederationFieldList(pathRequest: DevExpress.Analytics.Utils.IPathRequest, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): JQueryPromise<DevExpress.Analytics.Utils.IDataMemberInfo[]>;
    export class FederationDataSourceProviderWrapper implements IDataSourceProvider {
        private readonly _basic;
        constructor(basic: DevExpress.Dashboard.Internal.IDataSourceProvider);
        findDataSource(name: string): DevExpress.Dashboard.Model.DataSource;
    }
    export class FederationDataSourceAnalyticsWrapper extends AnalyticsFederationDataSource {
        private readonly _sources;
        private readonly _dataSources;
        constructor(sources: DevExpress.Dashboard.Model.Source[], dataSources: ko.ObservableArray<IDashboardDataSourceInfo>, fieldListProvider: DevExpress.Analytics.Utils.IItemsProvider);
        getQueryNameFromPath(path: string): string;
        getPathFromQueryName(sourceName: string): string;
        createQuery(queryJson: any): DevExpress.QueryBuilder.Utils.IFederationQuery | DevExpress.Analytics.Data.UnionQuery | DevExpress.Analytics.Data.TransformQuery;
    }
    export function renameDataMember(dashboard: DevExpress.Dashboard.Model.Dashboard, dataSource: DevExpress.Dashboard.Model.DataSource, oldDataMember: string, newDataMember: string): void;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataSourceWizardCallbacks = DevExpress.Analytics.Wizard.Internal.IDataSourceWizardCallbacks;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    export function createQueryPageCallback(requestWrapper: DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper, parameters: ko.Computed<Array<DevExpress.Dashboard.Model.Parameter>>, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, customQueriesPreset?: any): DevExpress.Analytics.Wizard.Internal.IDataSourceWizardCallbacks;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import PageIterator = DevExpress.Analytics.Wizard.PageIterator;
    export abstract class DataSourceWizardPageIteratorBase extends PageIterator {
        getInitialPage(): string;
        getNextPageId(pageId: string): string;
        getConfigureQueryPage(): string;
        getConfigureSqlParametersPage(): string;
        getConfigureObjectParametersPage(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import PageFactory = DevExpress.Analytics.Wizard.PageFactory;
    import PopupWizard = DevExpress.Analytics.Wizard.PopupWizard;
    import StateManager = DevExpress.Analytics.Wizard.StateManager;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IDashboardDataSourceWizardSettings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    import DashboardDataSourceType = DevExpress.Dashboard.Designer.DashboardDataSourceType;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    import IDashboardDataSourceWizardState = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardState;
    import DashboardDataSourceWizardOptions = DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardOptions;
    import DashboardMultiQueryDataSourceWizardOptions = DevExpress.Dashboard.Internal.Designer.DashboardMultiQueryDataSourceWizardOptions;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    import IDashboardDataSourceInfo = DevExpress.Dashboard.Internal.Designer.IDashboardDataSourceInfo;
    import DataSourceWizardPageIteratorBase = DevExpress.Dashboard.Internal.Designer.DataSourceWizardPageIteratorBase;
    export class CreateNewDataSourceWizardIterator extends DataSourceWizardPageIteratorBase {
        constructor(factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager);
    }
    export class EditQueryWizardIterator extends DataSourceWizardPageIteratorBase {
        constructor(factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager);
        getInitialPage(): string;
    }
    export abstract class DashboardDataSourceWizardBase extends PopupWizard {
        abstract get options(): DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardOptions | DevExpress.Dashboard.Internal.Designer.DashboardMultiQueryDataSourceWizardOptions;
        constructor(factory: DevExpress.Analytics.Wizard.PageFactory);
    }
    export class DashboardDataSourceWizard extends DashboardDataSourceWizardBase {
        title: any;
        _container: (element: any) => any;
        _extendCssClass: string;
        private readonly _options;
        get options(): DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardOptions;
        constructor(factory: DevExpress.Analytics.Wizard.PageFactory, options: DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardOptions);
    }
    export class DashboardDataSourceWizardState implements IDashboardDataSourceWizardState {
        sqlDataSourceWizard: {};
        jsonDataSourceWizard: {};
        olapDataSourceWizard: {};
        objectDataSourceWizard: {};
        federationDataSourceWizard: {};
        dataSourceType: number;
        get dashboardDataSourceType(): DevExpress.Dashboard.Designer.DashboardDataSourceType;
        set dashboardDataSourceType(value: DevExpress.Dashboard.Designer.DashboardDataSourceType);
    }
    export function createDashboardDataSourceWizard(requestWrapper: DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper, parameters: ko.Computed<DevExpress.Dashboard.Model.Parameter[]>, disableCustomSql: boolean, allowCreateNewJsonConnection: boolean, wizardSettings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings, dashboardConnectionStrings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings, dataSources: DevExpress.Dashboard.Internal.Designer.IDashboardDataSourceInfo[], dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, customTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>): DashboardDataSourceWizard;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import PageFactory = DevExpress.Analytics.Wizard.PageFactory;
    import PageIterator = DevExpress.Analytics.Wizard.PageIterator;
    import PopupWizard = DevExpress.Analytics.Wizard.PopupWizard;
    import StateManager = DevExpress.Analytics.Wizard.StateManager;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    export class EditJsonDataSourceWizardIterator extends PageIterator {
        constructor(factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager);
        getNextPageId(pageId: string): string;
    }
    export class EditJsonDataSourceWizard extends PopupWizard {
        title: any;
        _container: (element: any) => JQuery<HTMLElement>;
        _extendCssClass: string;
    }
    export function createEditJsonDataSourceWizard(requestWrapper: DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper, parameters: ko.Computed<DevExpress.Dashboard.Model.Parameter[]>): EditJsonDataSourceWizard;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import SqlDataSource = DevExpress.Analytics.Data.SqlDataSource;
    import TableQuery = DevExpress.Analytics.Data.TableQuery;
    import PageFactory = DevExpress.Analytics.Wizard.PageFactory;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IDashboardDataSourceWizardSettings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    import DashboardMultiQueryDataSourceWizardOptions = DevExpress.Dashboard.Internal.Designer.DashboardMultiQueryDataSourceWizardOptions;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    import IDashboardDataSourceInfo = DevExpress.Dashboard.Internal.Designer.IDashboardDataSourceInfo;
    import DashboardDataSourceWizardBase = DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardBase;
    import DataSourceWizardPageIteratorBase = DevExpress.Dashboard.Internal.Designer.DataSourceWizardPageIteratorBase;
    export class DashboardMultiQueryWizardIterator extends DataSourceWizardPageIteratorBase {
        getInitialPage(): string;
        getConfigureQueryPage(): string;
        getConfigureSqlParametersPage(): string;
    }
    export class DashboardMultiQueryDataSourceWizard extends DashboardDataSourceWizardBase {
        static customQueriesPreset: (dataSource: DevExpress.Analytics.Data.SqlDataSource) => JQueryPromise<DevExpress.Analytics.Data.TableQuery[]>;
        _extendCssClass: string;
        private readonly _options;
        get options(): DevExpress.Dashboard.Internal.Designer.DashboardMultiQueryDataSourceWizardOptions;
        constructor(pageFactory: DevExpress.Analytics.Wizard.PageFactory, options: DevExpress.Dashboard.Internal.Designer.DashboardMultiQueryDataSourceWizardOptions);
    }
    export function createDashboardMultiQueryWizard(requestWrapper: DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper, parameters: ko.Computed<DevExpress.Dashboard.Model.Parameter[]>, disableCustomSql: boolean, allowCreateNewJsonConnection: boolean, wizardSettings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings, dashboardConnectionStrings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings, dataSources: DevExpress.Dashboard.Internal.Designer.IDashboardDataSourceInfo[], dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, customTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>): DashboardMultiQueryDataSourceWizard;
}
declare module DevExpress.Dashboard.Designer {
    import BaseWizard = DevExpress.Analytics.Wizard.BaseWizard;
    import IDataSourceWizardSettings = DevExpress.Analytics.Wizard.IDataSourceWizardSettings;
    import IWizardEventArgs = DevExpress.Analytics.Wizard.IWizardEventArgs;
    import PageFactory = DevExpress.Analytics.Wizard.PageFactory;
    import PageIterator = DevExpress.Analytics.Wizard.PageIterator;
    import PopupWizard = DevExpress.Analytics.Wizard.PopupWizard;
    import StateManager = DevExpress.Analytics.Wizard.StateManager;
    import DashboardOptionChangedArgs = DevExpress.Dashboard.DashboardOptionChangedArgs;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import FederationDataSource = DevExpress.Dashboard.Model.FederationDataSource;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import JsonDataSource = DevExpress.Dashboard.Model.JsonDataSource;
    import SqlDataSource = DevExpress.Dashboard.Model.SqlDataSource;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    import DashboardDataSourceWizardBase = DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardBase;
    import IDashboardDataSourceInfo = DevExpress.Dashboard.Internal.Designer.IDashboardDataSourceInfo;
    /**
     * @docid dxDashboardControlOptions.extensions.dataSourceWizard
     * @type object
     * @public
     */
    export interface DataSourceWizardExtensionOptions {
        /**
        * @docid dxDashboardControlOptions.extensions.dataSourceWizard.enableCustomSql
        * @type boolean
        * @default false
        * @public
        */
        enableCustomSql?: boolean;
        /**
        * @docid dxDashboardControlOptions.extensions.dataSourceWizard.allowCreateNewJsonConnection
        * @type boolean
        * @default false
        * @public
        */
        allowCreateNewJsonConnection?: boolean;
        /**
         * @docid dxDashboardControlOptions.extensions.dataSourceWizard.wizardSettings
         * @type IDashboardDataSourceWizardSettings
         * @public
         */
        wizardSettings?: IDashboardDataSourceWizardSettings;
        /**
         * @docid dxDashboardControlOptions.extensions.dataSourceWizard.onCustomizeDataSourceWizard
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onCustomizeDataSourceWizard?: (args: IDashboardWizardEventArgs) => void;
    }
    export type DataSourceWizardExtensionEvents = {
        customizeDataSourceWizard: IDashboardWizardEventArgs;
    };
    /**
     * @docid IDashboardDataSourceWizardSettings
     * @type object
     * @public
     */
    export interface IDashboardDataSourceWizardSettings extends IDataSourceWizardSettings {
        /**
        * @docid IDashboardDataSourceWizardSettings.enableOlapDataSource
        * @type boolean
        * @default true
        * @public
        */
        enableOlapDataSource?: boolean;
    }
    export type DataSourceWizardType = "EditQueryWizard" | "EditJsonDataSourceWizard" | "DataSourceWizard" | "MultiQueryDataSourceWizard";
    export interface IDashboardWizardEventArgs extends IWizardEventArgs<DevExpress.Analytics.Wizard.BaseWizard> {
        type: DataSourceWizardType;
    }
    export class DataSourceWizardExtension implements ISupportOptionExtension<DataSourceWizardExtensionOptions> {
        protected dashboardControl: DevExpress.Dashboard.DashboardControl;
        private static _convertDataSource;
        private _subscriptions;
        protected _requestWrapper: DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
        private _getConnectionStringsCallback;
        private _loadingPanelVisible;
        private _wizardElement;
        protected _dashboardParameters: ko.Computed<Array<DevExpress.Dashboard.Model.Parameter>>;
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<DataSourceWizardExtensionOptions, DataSourceWizardExtensionEvents>;
        private _customTemplate;
        get isCustomSqlEnabled(): any;
        protected get _dataSourceBrowser(): DevExpress.Dashboard.Internal.DataSourceBrowser;
        name: string;
        on: DevExpress.Dashboard.Internal.EventSubscriber<DataSourceWizardExtensionEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<DataSourceWizardExtensionEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: DataSourceWizardExtensionOptions);
        start(): void;
        stop(): void;
        showDataSourceCreatingDialog(): JQueryPromise<DevExpress.Dashboard.Model.DataSource>;
        private _getDashboardDataSources;
        private _getFederationDataProviders;
        _showDataSourceCreatingDialog(federationDataProviders: DevExpress.Dashboard.Model.DataSource[]): JQueryPromise<DevExpress.Dashboard.Model.DataSource>;
        showSqlQueryEditingDialog(dashboardSqlDataSource: DevExpress.Dashboard.Model.SqlDataSource, queryName?: string): void;
        showFederationQueryEditingDialog(dashboardFederationDataSource: DevExpress.Dashboard.Model.FederationDataSource, queryName: string): void;
        showManageFederationQueriesDialog(dashboardFederationDataSource: DevExpress.Dashboard.Model.FederationDataSource): void;
        private _createEditQueryWizard;
        _optionChanged(args: DevExpress.Dashboard.DashboardOptionChangedArgs<DataSourceWizardExtensionOptions>): any;
        protected createDataSourceWizard(connectionStrings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings, federationSources: DevExpress.Dashboard.Internal.Designer.IDashboardDataSourceInfo[]): DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardBase;
        private _createEditJsonDataSourceWizard;
        protected _customizeDataSourceWizard(customizationType: DataSourceWizardType, wizard: DevExpress.Analytics.Wizard.PopupWizard): void;
        protected _createNewDataSourceWizardIterator(factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager): DevExpress.Analytics.Wizard.PageIterator;
        private _initializeDataSourceWizard;
        _showEditJsonDataSourceDialog(jsonDataSource: DevExpress.Dashboard.Model.JsonDataSource): void;
        private _renderAndStartWizard;
    }
    export class MultiQueryDataSourceWizardExtension extends DataSourceWizardExtension {
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: DataSourceWizardExtensionOptions);
        protected _createNewDataSourceWizardIterator(factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager): DevExpress.Analytics.Wizard.PageIterator;
        protected createDataSourceWizard(connectionStrings: DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings, federationSources: DevExpress.Dashboard.Internal.Designer.IDashboardDataSourceInfo[]): DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardBase;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import Notification = DevExpress.Dashboard.Internal.Model.Notification;
    import UiStateType = DevExpress.Dashboard.Model.UiStateType;
    export class AvailableDataSourcesViewModel {
        private _dataSources;
        selectedDataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>;
        uiState: ko.Computed<DevExpress.Dashboard.Model.UiStateType>;
        errorState: ko.Observable<DevExpress.Dashboard.Internal.Model.Notification>;
        private _showCreateDataSourceWizardDelegate;
        constructor(_dataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>, selectedDataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>, uiState: ko.Computed<DevExpress.Dashboard.Model.UiStateType>, errorState: ko.Observable<DevExpress.Dashboard.Internal.Model.Notification>, _showCreateDataSourceWizardDelegate: ko.Computed<{
            (federationSources: DevExpress.Dashboard.Model.DataSource[]): void;
        }>);
        getDataSources(dataSourcesFilter?: {
            (ds: DevExpress.Dashboard.Model.DataSource): boolean;
        }): DevExpress.Dashboard.Model.DataSource[];
        get canCreateDataSourceWizard(): boolean;
        showCreateDataSourceWizard: (federationSources: DevExpress.Dashboard.Model.DataSource[]) => void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import AvailableDataSourcesViewModel = DevExpress.Dashboard.Internal.Designer.AvailableDataSourcesViewModel;
    export class AvailableDataSourcesExtension extends DisposableObject implements IExtension {
        private dashboardControl;
        name: string;
        templateName: string;
        viewModel: DevExpress.Dashboard.Internal.Designer.AvailableDataSourcesViewModel;
        selectedDataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>;
        dataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>;
        private _errorState;
        private _uiState;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        loadAvailableDataSources(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxPopupToolbarItem = DevExpress.ui.dxPopupToolbarItem;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import AvailableDataSourcesExtension = DevExpress.Dashboard.Designer.AvailableDataSourcesExtension;
    import IPopupContentViewModel = DevExpress.Dashboard.Internal.Designer.IPopupContentViewModel;
    export class AddDataSourcePopup implements IPopupContentViewModel {
        addButtonDisable: ko.Computed<boolean>;
        title: any;
        toolbarItems: Array<DevExpress.ui.dxPopupToolbarItem>;
        template: string;
        bindingData: any;
        dataSourcesFilter: {
            (dataSource: DevExpress.Dashboard.Model.DataSource): boolean;
        };
        constructor(accessibleDataSourcesExtension: ko.Computed<DevExpress.Dashboard.Designer.AvailableDataSourcesExtension>, dataSourceFilter: {
            (dataSource: DevExpress.Dashboard.Model.DataSource): boolean;
        }, addDataSourcesCallback: (d: Array<DevExpress.Dashboard.Model.DataSource>) => void, popupVisible: DevExpress.Dashboard.Internal.Model.KnockoutEntry<boolean>);
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxPopupToolbarItem = DevExpress.ui.dxPopupToolbarItem;
    import dxValidatorOptions = DevExpress.ui.dxValidatorOptions;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class RenameDataSourceViewModel {
        _dataSource: DevExpress.Dashboard.Model.DataSource;
        _dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        title: any;
        label: any;
        isDataSourceNameValid: ko.Observable<boolean>;
        popupVisible: ko.Observable<boolean>;
        toolbarItems: Array<DevExpress.ui.dxPopupToolbarItem>;
        dsName: ko.Observable<string>;
        nameValidationRules: Array<any>;
        nameTextBoxOptions: any;
        nameValidatorOptions: DevExpress.ui.dxValidatorOptions;
        constructor(dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        _dataSourceNameValid: (dsName: string) => boolean;
        show(dataSource: DevExpress.Dashboard.Model.DataSource): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    export class RenameDataSourcePopup {
        private readonly _viewModel;
        private readonly template;
        constructor(dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        show(dataSource: DevExpress.Dashboard.Model.DataSource): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import FilterEditor = DevExpress.Analytics.Widgets.FilterEditor;
    import ITreeListOptions = DevExpress.Analytics.Widgets.Internal.ITreeListOptions;
    import dxPopupToolbarItem = DevExpress.ui.dxPopupToolbarItem;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DashboardUpdateHub = DevExpress.Dashboard.Internal.DashboardUpdateHub;
    import FederationDataSource = DevExpress.Dashboard.Model.FederationDataSource;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import SqlDataSource = DevExpress.Dashboard.Model.SqlDataSource;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import CalcFieldEditor = DevExpress.Dashboard.Internal.Designer.CalcFieldEditor;
    import DataSourceWizardExtension = DevExpress.Dashboard.Designer.DataSourceWizardExtension;
    import AvailableDataSourcesExtension = DevExpress.Dashboard.Designer.AvailableDataSourcesExtension;
    import RenameDataSourcePopup = DevExpress.Dashboard.Internal.Designer.RenameDataSourcePopup;
    export interface IDataSourceAction {
        click: Function;
        text: string;
        disabled: ko.Computed<boolean>;
    }
    export interface IEditDataSourceAction {
        click: Function;
        text: string;
        visible: ko.Computed<boolean>;
    }
    export interface IDataSourceBrowserViewModel {
        selectedDataSource: ko.Observable<DevExpress.Dashboard.Model.DataSource>;
        canEditDataSource: boolean;
        canEditCustomSqlQueries: boolean;
        editQuery(queryName: string): any;
        editFederationQuery?(queryName: string): any;
        removeQuery(queryName: string): any;
        removeFederationQuery?(queryName: string): any;
        editCalcField(field: DevExpress.Dashboard.Model.CalculatedField): any;
        removeCalcField(field: DevExpress.Dashboard.Model.CalculatedField): any;
    }
    export interface IDashboardActionInfo {
        title?: string;
        icon: string;
        click: () => void;
        style?: string;
    }
    export class DataSourceBrowserViewModel extends DisposableObject implements IDataSourceBrowserViewModel {
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        dataSourceWizardExtension: ko.Computed<DevExpress.Dashboard.Designer.DataSourceWizardExtension>;
        accessibleDataSourcesExtension: ko.Computed<DevExpress.Dashboard.Designer.AvailableDataSourcesExtension>;
        calcFieldEditor: DevExpress.Dashboard.Internal.Designer.CalcFieldEditor;
        renameDataSourcePopup: DevExpress.Dashboard.Internal.Designer.RenameDataSourcePopup;
        dataSourceTreeListViewModel: DataSourceTreeListViewModel;
        constructor(dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, dataSourceWizardExtension: ko.Computed<DevExpress.Dashboard.Designer.DataSourceWizardExtension>, accessibleDataSourcesExtension: ko.Computed<DevExpress.Dashboard.Designer.AvailableDataSourcesExtension>, updateHub: DevExpress.Dashboard.Internal.DashboardUpdateHub);
        _expandQuery(dataSource: DevExpress.Dashboard.Model.SqlDataSource | DevExpress.Dashboard.Model.FederationDataSource, queryName: string): void;
        editDataSourceActions: ko.ObservableArray<IEditDataSourceAction>;
        get canEditDataSource(): boolean;
        get canEditCustomSqlQueries(): boolean;
        addDataSources: (dataSources: Array<DevExpress.Dashboard.Model.DataSource>) => void;
        refreshFieldList(): void;
        showAddDataSourceForm(): void;
        addQuery: () => void;
        manageQueries: () => void;
        editQuery(queryName: string): void;
        editFederationQuery(queryName: string): void;
        manageFederationQueries(): void;
        removeQuery(queryName: string): void;
        removeFederationQuery(queryName: string): void;
        editDataSource(): void;
        dataSourceActions: ko.ObservableArray<IDataSourceAction>;
        private _removeDataSource;
        removeDataSource: (dataSource: DevExpress.Dashboard.Model.DataSource) => void;
        showRenameDataSourceForm: (dataSource: DevExpress.Dashboard.Model.DataSource) => void;
        usedDataSourcesExist: () => boolean;
        availableDataSourcesExist: () => boolean;
        get canAddCalculatedField(): boolean;
        popupContent: ko.Observable<IPopupContentViewModel>;
        popupVisible: ko.Computed<boolean>;
        addCalculatedField: () => void;
        private _onDataSourcePropertyChanged;
        editCalcField: (field: DevExpress.Dashboard.Model.CalculatedField) => void;
        removeCalcField: (field: DevExpress.Dashboard.Model.CalculatedField) => void;
        selectedPath: ko.Observable<string>;
        selectedDataSource: ko.Observable<DevExpress.Dashboard.Model.DataSource>;
        allowAddQuery: ko.Computed<boolean>;
        allowManageQueries: ko.Computed<boolean>;
        allowEditDataSource: ko.Computed<boolean>;
        selectedDataSourceComponentName: ko.Computed<string>;
        filterEditorModel: ko.Computed<DevExpress.Analytics.Widgets.FilterEditor>;
        editFilter: () => void;
    }
    export class DataSourceTreeListViewModel {
        private _itemsProvider;
        constructor(dataSourceBrowserViewModel: DataSourceBrowserViewModel);
        triggerItemsChanged(): void;
        treeListEditorOption: ko.Observable<DevExpress.Analytics.Widgets.Internal.ITreeListOptions>;
    }
    export interface IPopupContentViewModel {
        toolbarItems: Array<DevExpress.ui.dxPopupToolbarItem>;
        title: string;
        template: string;
        bindingData?: any;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataMemberInfo = DevExpress.Analytics.Utils.IDataMemberInfo;
    import IItemsProvider = DevExpress.Analytics.Utils.IItemsProvider;
    import IPathRequest = DevExpress.Analytics.Utils.IPathRequest;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import IDataSourceBrowserViewModel = DevExpress.Dashboard.Internal.Designer.IDataSourceBrowserViewModel;
    export class DataFieldViewModel implements IDataMemberInfo {
        name: string;
        displayName: string;
        hasItems: boolean;
        specifics: string;
        field: DevExpress.Dashboard.Internal.Model.IDataField;
        isList: boolean;
        isCorruptedCalcField: boolean;
        constructor(name: string, displayName: string, hasItems: boolean, specifics: string, field: DevExpress.Dashboard.Internal.Model.IDataField, isList: boolean, isCorruptedCalcField: boolean);
        style: string;
        innerActions: ko.ObservableArray<IDataFieldViewModelAction>;
    }
    export interface IDataFieldViewModelAction {
        click: () => void;
        icon: string;
        style?: string;
    }
    export class FieldListItemProvider implements IItemsProvider {
        private _dataSourceBrowserViewModel;
        private _getDataFieldArrayCallback;
        private isFieldValid?;
        loading: ko.Observable<boolean>;
        private _changeTrigger;
        constructor(_dataSourceBrowserViewModel: DevExpress.Dashboard.Internal.Designer.IDataSourceBrowserViewModel, _getDataFieldArrayCallback: (dataSourceName: string, dataMember: string, fieldPath: string) => JQueryPromise<Array<DevExpress.Dashboard.Internal.Model.IDataField>>, isFieldValid?: (field: DevExpress.Dashboard.Internal.Model.IDataField) => boolean);
        triggerItemsChanged(): void;
        getItems(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<Array<DevExpress.Analytics.Utils.IDataMemberInfo>>;
        customizeDataFieldViewModel: (dataField: DataFieldViewModel) => void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import DataItemType = DevExpress.Dashboard.Model.DataItemType;
    import DataField = DevExpress.Dashboard.Internal.Model.DataField;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    import ICollectionBindingProperty = DevExpress.Dashboard.Internal.Model.ICollectionBindingProperty;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    export class DataItemContainerSeed extends DataItemContainer {
        dataItemType?: DevExpress.Dashboard.Model.DataItemType;
        private _fieldConstraint?;
        _getDataId(): string;
        constructor(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider, dataItemType?: DevExpress.Dashboard.Model.DataItemType, _fieldConstraint?: DevExpress.Dashboard.Internal.IFieldConstraint);
        name: ko.Observable<string>;
        _getContainerType(): string;
        dataLink: DevExpress.Dashboard.Model.DataItemLink;
        _getBindingModel(): Array<DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty>;
        grow(dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider, bindingProperty: DevExpress.Dashboard.Internal.Model.ICollectionBindingProperty, dataField: DevExpress.Dashboard.Internal.Model.DataField): Array<DevExpress.Dashboard.Model.DataItemContainer>;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import ConstrainedBindingProperty = DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty;
    import IBindingModelProvider = DevExpress.Dashboard.Internal.Model.IBindingModelProvider;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataItemHolder = DevExpress.Dashboard.Internal.Designer.IDataItemHolder;
    import DataItemSurface = DevExpress.Dashboard.Internal.Designer.DataItemSurface;
    export class DataItemContainerSurface implements IDisposable, IPropertiesHolder, IDataItemHolder {
        detailsPropertiesComposer: DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer<DataItemContainer>;
        itemSurface: DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface<DataDashboardItem>;
        private _removeDataItemContainer;
        private _disposables;
        constructor(model: DevExpress.Dashboard.Model.DataItemContainer, detailsPropertiesComposer: DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer<DataItemContainer>, itemSurface: DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface<DataDashboardItem>, _removeDataItemContainer: (container: DevExpress.Dashboard.Model.DataItemContainer) => void);
        propertiesTabs: ko.ObservableArray<DevExpress.Dashboard.Internal.Designer.AccordionTab<any>>;
        selectItem: (model: DevExpress.Dashboard.Internal.Model.IBindingModelProvider, binding: DevExpress.Dashboard.Internal.Model.ConstrainedBindingProperty) => void;
        model: ko.Observable<DevExpress.Dashboard.Model.DataItemContainer>;
        containerType: ko.Observable<string>;
        singleItemSurface: ko.Observable<DevExpress.Dashboard.Internal.Designer.DataItemSurface>;
        dataFieldChoosed: JQuery.Callbacks<Function>;
        private _removeDataItem;
        removeDataItem: (dataItemLink: DevExpress.Dashboard.Model.DataItemLink) => void;
        dataItemDisplayNameProvider: (dataItem: DevExpress.Dashboard.Model.DataItem) => string;
        dataItemErrorFactory(dataItem: DevExpress.Dashboard.Model.DataItem): ko.Observable<boolean>;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import ImageDataBindingMode = DevExpress.Dashboard.Model.ImageDataBindingMode;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemBaseInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemBaseInteractivityOptions;
    export class BoundImageItem extends DataDashboardItem {
        private __imageItem;
        imageItem: ko.Observable<DevExpress.Dashboard.Model.Dimension>;
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemBaseInteractivityOptions;
        sizeMode: ko.Observable<string>;
        horizontalAlignment: ko.Observable<string>;
        verticalAlignment: ko.Observable<string>;
        dataBindingMode: ko.Observable<DevExpress.Dashboard.Model.ImageDataBindingMode>;
        uriPattern: ko.Observable<string>;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _isCalculationSupported(): boolean;
        _isSortingEnabled(): boolean;
        _isTopNEnabled(dataItem: DevExpress.Dashboard.Model.Dimension): boolean;
        protected _getDefaultItemType(): string;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getIsVisualInteractivitySupported(): boolean;
        protected _updateContentViewModel(content: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import BoundImageItem = DevExpress.Dashboard.Model.BoundImageItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    export class BoundImageItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.BoundImageItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.BoundImageItem): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import BubbleMapItem = DevExpress.Dashboard.Model.BubbleMapItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class BubleMapItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.BubbleMapItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.BubbleMapItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import CardItemFormatRuleBase = DevExpress.Dashboard.Model.CardItemFormatRuleBase;
    import Card = DevExpress.Dashboard.Model.Card;
    import CardItem = DevExpress.Dashboard.Model.CardItem;
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    export class CardElementPropertiesComposer extends DataItemContainerPropertiesComposer<DevExpress.Dashboard.Model.Card> {
        private editTemplateHandler;
        private editFormat;
        private applyTemplateToAllCards;
        editRuleHandler: (selection: DevExpress.Dashboard.Model.CardItemFormatRuleBase, args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments, container: ko.Observable<DevExpress.Dashboard.Model.CardItemFormatRuleBase>) => void;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs, editTemplateHandler?: (model: any) => void, editFormat?: (model: any) => void, applyTemplateToAllCards?: (template: DevExpress.Dashboard.Model.CardLayoutTemplate) => void, editRuleHandler?: (selection: DevExpress.Dashboard.Model.CardItemFormatRuleBase, args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments, container: ko.Observable<DevExpress.Dashboard.Model.CardItemFormatRuleBase>) => void);
        protected _composeTabsCore(model: DevExpress.Dashboard.Model.Card, args: DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getCommonWrapper(model: DevExpress.Dashboard.Model.Card, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<Card>;
        getSparklineWrapper(model: DevExpress.Dashboard.Model.Card): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<Card>;
        fillTemplatesTab(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, card: DevExpress.Dashboard.Model.Card): void;
        switchTemplate(card: DevExpress.Dashboard.Model.Card, newTemplate: DevExpress.Dashboard.Model.CardLayoutTemplate): void;
        getAvailableTemplates(card: DevExpress.Dashboard.Model.Card): any[];
        getFormatRulesWrapper(model: DevExpress.Dashboard.Model.Card, dashboardItem: DevExpress.Dashboard.Model.CardItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<CardItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import CardItem = DevExpress.Dashboard.Model.CardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class CardItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.CardItem> {
        editRuleHandler: any;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs, editRuleHandler: any);
        _composeTabsCore(model: DevExpress.Dashboard.Model.CardItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
    export class CardTemplatePropertiesComposer implements IDetailsPropertiesComposerBase<DevExpress.Dashboard.Model.CardLayoutTemplate, ICardLayoutTemplateComposeTabsArgs> {
        composeTabs(model: DevExpress.Dashboard.Model.CardLayoutTemplate, args: ICardLayoutTemplateComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab[];
        private fillLayoutsTab;
        resetTemplate(template: DevExpress.Dashboard.Model.CardLayoutTemplate): void;
    }
    export interface ICardLayoutTemplateComposeTabsArgs extends IComposeTabsArgs {
        dimensionNames: string[];
        applyTemplateToAllCards: (template: DevExpress.Dashboard.Model.CardLayoutTemplate) => void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    /**
     * @docid dxDashboardControlOptions.extensions.chartIndicators
     * @type object
     * @public
     */
    export interface ChartIndicatorsExtensionOptions {
        /**
        * @docid dxDashboardControlOptions.extensions.chartIndicators.customIndicatorTypes
        * @type object
        * @default []
        * @public
        */
        customIndicatorTypes?: {
            type: string;
            displayName: string;
        }[];
    }
    export class ChartIndicatorsExtension implements IExtension {
        protected dashboardControl: DevExpress.Dashboard.DashboardControl;
        protected options: ChartIndicatorsExtensionOptions;
        get customChartIndicators(): {
            type: string;
            displayName: string;
        }[];
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options: ChartIndicatorsExtensionOptions);
        name: string;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IExtension = DevExpress.Dashboard.IExtension;
    import ChartIndicator = DevExpress.Dashboard.Model.ChartIndicator;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    export class ChartIndicatorPropertiesComposer {
        static getIndicatorsWrapper(model: DevExpress.Dashboard.Model.ChartItem, createIndicatorDelegate: () => DevExpress.Dashboard.Model.ChartIndicator, editHandler: (item: DevExpress.Dashboard.Model.ChartIndicator, args: any, container: ko.Observable<DevExpress.Dashboard.Model.ChartIndicator>) => void): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<ChartItem>;
        static getIndicatorPropertiesWrapper(model: DevExpress.Dashboard.Model.ChartIndicator, dashboardItem: DevExpress.Dashboard.Model.ChartItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, requestRecalculation: JQueryCallback, findExtension: (name: string) => DevExpress.Dashboard.IExtension): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<ChartIndicator>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import ChartItemFormatRule = DevExpress.Dashboard.Model.ChartItemFormatRule;
    import ChartIndicator = DevExpress.Dashboard.Model.ChartIndicator;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export interface IChartItemPropertiesComposerOptions {
        customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
        editCFRuleHandler?: (item: DevExpress.Dashboard.Model.ChartItemFormatRule, args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments, container?: ko.Observable<DevExpress.Dashboard.Model.ChartItemFormatRule>) => void;
        createCFRuleDelegate?: () => DevExpress.Dashboard.Model.ChartItemFormatRule;
        editChartIndicatorHandler?: (item: DevExpress.Dashboard.Model.ChartIndicator, args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments, container?: ko.Observable<DevExpress.Dashboard.Model.ChartIndicator>) => void;
        createIndicatorDelegate?: () => DevExpress.Dashboard.Model.ChartIndicator;
    }
    export class ChartItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.ChartItem> {
        private options;
        constructor(options: IChartItemPropertiesComposerOptions);
        _getAxisXTabModel(model: DevExpress.Dashboard.Model.ChartItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, argumentDataField: DevExpress.Dashboard.Internal.Model.IDataField): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
        _composeTabsCore(model: DevExpress.Dashboard.Model.ChartItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import ChartItemFormatRule = DevExpress.Dashboard.Model.ChartItemFormatRule;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    export class ChartSeriesPropertiesComposer extends DataItemContainerPropertiesComposer<DevExpress.Dashboard.Model.ChartSeries> {
        private _containerTypesMap;
        private _allowConfigurePointLabels;
        private _allowSecondaryAxis;
        private _editCFRuleHandler?;
        private _createCFRuleDelegate?;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs, _containerTypesMap?: any, _allowConfigurePointLabels?: boolean, _allowSecondaryAxis?: boolean, _editCFRuleHandler?: (item: DevExpress.Dashboard.Model.ChartItemFormatRule, args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments, container?: ko.Observable<DevExpress.Dashboard.Model.ChartItemFormatRule>) => void, _createCFRuleDelegate?: () => DevExpress.Dashboard.Model.ChartItemFormatRule);
        protected _composeTabsCore(model: DevExpress.Dashboard.Model.ChartSeries, args: DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        private _fillSeriesTypeWrapper;
        private _showPointMarkersVisible;
        protected _showIgnoreEmptyPointsVisible(model: DevExpress.Dashboard.Model.ChartSeries): boolean;
        private _fillSeriesGeneralTab;
        protected _fillConditionalFormattingTab(tab: DevExpress.Dashboard.Internal.Designer.AccordionTab, series: DevExpress.Dashboard.Model.ChartSeries, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ChoroplethMap = DevExpress.Dashboard.Model.ChoroplethMap;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    export class ChoroplethMapElementPropertiesComposer extends DataItemContainerPropertiesComposer<DevExpress.Dashboard.Model.ChoroplethMap> {
        private editDeltaFormatHandler;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs, editDeltaFormatHandler?: (model: any) => void);
        protected _composeTabsCore(model: DevExpress.Dashboard.Model.ChoroplethMap, args: DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getMapTypeWrapper(model: any, containerType: ko.Observable<string>): DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ChoroplethMapItem = DevExpress.Dashboard.Model.ChoroplethMapItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class ChoroplethMapItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.ChoroplethMapItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.ChoroplethMapItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getShapeLabelsWrapper(model: DevExpress.Dashboard.Model.ChoroplethMapItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<ChoroplethMapItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
    export class CustomRangePropertiesComposer implements IDetailsPropertiesComposerBase<DevExpress.Dashboard.Model.DateTimePeriod, IDateTimePeriodComposeTabsArgs> {
        composeTabs(model: DevExpress.Dashboard.Model.DateTimePeriod, args: IDateTimePeriodComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getCommonWrapper(model: DevExpress.Dashboard.Model.DateTimePeriod, argument: DevExpress.Dashboard.Model.Dimension, rangeFilterItem: DevExpress.Dashboard.Model.RangeFilterItem | DevExpress.Dashboard.Model.DateFilterItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    }
    export interface IDateTimePeriodComposeTabsArgs extends IComposeTabsArgs {
        argument: DevExpress.Dashboard.Model.Dimension;
        rangeFilterItem: DevExpress.Dashboard.Model.RangeFilterItem | DevExpress.Dashboard.Model.DateFilterItem;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class DateFilterItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.DateFilterItem> {
        editRuleHandler: any;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs, editRuleHandler: any);
        _composeTabsCore(model: DevExpress.Dashboard.Model.DateFilterItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getLayoutWrapper(model: DevExpress.Dashboard.Model.DateFilterItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<DateFilterItem>;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ListBoxDashboardItemType = DevExpress.Dashboard.Model.ListBoxDashboardItemType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
    export class ListBoxItem extends FilterElementItemBase {
        listBoxType: ko.Observable<DevExpress.Dashboard.Model.ListBoxDashboardItemType>;
        showAllValue: ko.Observable<boolean>;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _allowAllValue(): boolean;
        protected _isMultiselectable(): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    export class FilterItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.FilterElementItemBase> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.FilterElementItemBase): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import Gauge = DevExpress.Dashboard.Model.Gauge;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    export class GaugeElementPropertiesComposer extends DataItemContainerPropertiesComposer<DevExpress.Dashboard.Model.Gauge> {
        private editFormatHandler;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs, editFormatHandler?: (model: any) => void);
        protected _composeTabsCore(model: DevExpress.Dashboard.Model.Gauge, args: DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getCommonWrapper(model: DevExpress.Dashboard.Model.Gauge, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<Gauge>;
        getScaleWrapper(model: DevExpress.Dashboard.Model.Gauge): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<Gauge>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import GaugeItem = DevExpress.Dashboard.Model.GaugeItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    export class GaugeItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.GaugeItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.GaugeItem): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getTypeWrapper(model: DevExpress.Dashboard.Model.GaugeItem): DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import GeoPointMapItemBase = DevExpress.Dashboard.Model.GeoPointMapItemBase;
    export class GeoPointMapItem extends GeoPointMapItemBase {
        private __value;
        value: ko.Observable<DevExpress.Dashboard.Model.Measure>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import GeoPointMapItem = DevExpress.Dashboard.Model.GeoPointMapItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class GeoPointMapItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.GeoPointMapItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.GeoPointMapItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import GridColumn = DevExpress.Dashboard.Model.GridColumn;
    import GridDeltaColumn = DevExpress.Dashboard.Model.GridDeltaColumn;
    import GridSparklineColumn = DevExpress.Dashboard.Model.GridSparklineColumn;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    export class GridColumnPropertiesComposer extends DataItemContainerPropertiesComposer<DevExpress.Dashboard.Model.GridColumn> {
        editRuleHandler: any;
        private editDeltaFormatHandler;
        private _totals;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs, editRuleHandler: any, editDeltaFormatHandler?: (model: any) => void);
        protected _composeTabsCore(model: DevExpress.Dashboard.Model.GridColumn, args: DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getColumnTypeWrapper(model: DevExpress.Dashboard.Model.GridColumn, containerType: ko.Observable<string>): DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
        getColumnWrapper(model: DevExpress.Dashboard.Model.GridColumn, dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<GridColumn>;
        getWidthWrapper(model: DevExpress.Dashboard.Model.GridColumn): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<GridColumn>;
        getTotalsWrapper(model: DevExpress.Dashboard.Model.GridColumn, p: DevExpress.Dashboard.Internal.Model.IDataItemProvider): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<GridColumn>;
        getDeltaWrapper(model: DevExpress.Dashboard.Model.GridDeltaColumn): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<GridDeltaColumn>;
        getSparklineWrapper(model: DevExpress.Dashboard.Model.GridSparklineColumn): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<GridSparklineColumn>;
        getFormatRulesWrapper(model: DevExpress.Dashboard.Model.GridColumn, dashboardItem: DevExpress.Dashboard.Model.GridItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<GridItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import GridOptions = DevExpress.Dashboard.Model.GridOptions;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class GridItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.GridItem> {
        editRuleHandler: any;
        private dataSourceBrowser;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs, editRuleHandler: any, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        _composeTabsCore(model: DevExpress.Dashboard.Model.GridItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getColumnFilterWrapper(model: DevExpress.Dashboard.Model.GridItem): any;
        getLayoutWrapper(model: DevExpress.Dashboard.Model.GridOptions): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<GridOptions>;
        getFormatRulesWrapper(model: DevExpress.Dashboard.Model.GridItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<GridItem>;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ImageHorizontalAlignment = DevExpress.Dashboard.Model.ImageHorizontalAlignment;
    import ImageSizeMode = DevExpress.Dashboard.Model.ImageSizeMode;
    import ImageVerticalAlignment = DevExpress.Dashboard.Model.ImageVerticalAlignment;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    export class ImageItem extends DashboardItem {
        urlPath: ko.Observable<string>;
        image64: ko.Observable<string>;
        sizeMode: ko.Observable<DevExpress.Dashboard.Model.ImageSizeMode>;
        horizontalAlignment: ko.Observable<DevExpress.Dashboard.Model.ImageHorizontalAlignment>;
        verticalAlignment: ko.Observable<DevExpress.Dashboard.Model.ImageVerticalAlignment>;
        imageType: ko.Observable<string>;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _updateContentViewModel(content: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ImageItem = DevExpress.Dashboard.Model.ImageItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    export class ImageItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.ImageItem> {
        protected _composeTabsCore(model: DevExpress.Dashboard.Model.ImageItem, args?: DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs): void;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        composeTabs(model: DevExpress.Dashboard.Model.ImageItem): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import PieItem = DevExpress.Dashboard.Model.PieItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    export class PieItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.PieItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.PieItem): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getTypeWrapper(model: DevExpress.Dashboard.Model.PieItem): DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
        getLabelsWrapper(model: DevExpress.Dashboard.Model.PieItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<PieItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import PieMapItem = DevExpress.Dashboard.Model.PieMapItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class PieMapItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.PieMapItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.PieMapItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import PivotItem = DevExpress.Dashboard.Model.PivotItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class PivotItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.PivotItem> {
        editRuleHandler: any;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs, editRuleHandler: any);
        _composeTabsCore(model: DevExpress.Dashboard.Model.PivotItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        static getFormatRulesWrapper(model: DevExpress.Dashboard.Model.PivotItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, editHandler: any): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<PivotItem>;
        getLayoutDataWrapper(model: DevExpress.Dashboard.Model.PivotItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<PivotItem>;
        getInitialStateDataWrapper(model: DevExpress.Dashboard.Model.PivotItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<PivotItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class RangeFilterItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.RangeFilterItem> {
        editRuleHandler: any;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs, editRuleHandler: any);
        _composeTabsCore(model: DevExpress.Dashboard.Model.RangeFilterItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ScatterChartItemFormatRule = DevExpress.Dashboard.Model.ScatterChartItemFormatRule;
    import ScatterChartItem = DevExpress.Dashboard.Model.ScatterChartItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class ScatterChartItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.ScatterChartItem> {
        private editCFRuleHandler;
        private createCFRuleDelegate;
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs, editCFRuleHandler: (item: DevExpress.Dashboard.Model.ScatterChartItemFormatRule, args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments, container?: ko.Observable<DevExpress.Dashboard.Model.ScatterChartItemFormatRule>) => void, createCFRuleDelegate: () => DevExpress.Dashboard.Model.ScatterChartItemFormatRule);
        _composeTabsCore(model: DevExpress.Dashboard.Model.ScatterChartItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
    export class DashboardLayoutTabPage extends DashboardLayoutGroup {
        protected get _template(): string;
        constructor(modelJson?: Object, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getDefaultItemType(): string;
        _deleteDashbordItem(): void;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import DashboardLayoutTabPage = DevExpress.Dashboard.Model.DashboardLayoutTabPage;
    export class DashboardLayoutTabContainer extends DashboardLayoutGroup {
        private get _tabContainer();
        protected _getDefaultItemType(): string;
        protected get _template(): string;
        protected get _visibleItems(): ko.ObservableArray<DevExpress.Dashboard.Model.DashboardLayoutNode>;
        protected get _ignoreChildMaxHeight(): boolean;
        protected get _dragOverInnerElementController(): {
            selector: string;
            onDragOver: (index: number) => void;
        };
        private _visibleItemsCore;
        protected _activeTabIndex: ko.Computed<number>;
        constructor(modelJson?: Object, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _setItemCore(newItem: DevExpress.Dashboard.Model.DashboardItem): void;
        _createTabPage(): DevExpress.Dashboard.Model.DashboardLayoutTabPage;
        _removeLayoutTabPage(tabPageModel: DevExpress.Dashboard.Model.DashboardTabPage): void;
        _activeTabPage: ko.Computed<DevExpress.Dashboard.Model.DashboardTabPage>;
        _deleteDashbordItem(): void;
        private _addLayoutTabPage;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import TabContainerItem = DevExpress.Dashboard.Model.TabContainerItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class TabContainerItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.TabContainerItem> {
        private editTabPageHandler;
        constructor(editTabPageHandler: (tabPage: DevExpress.Dashboard.Model.DashboardTabPage, args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments) => void);
        _composeTabsCore(): void;
        composeTabs(tabContainer: DevExpress.Dashboard.Model.TabContainerItem, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemBaseInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemBaseInteractivityOptions;
    export class TextBoxItem extends DataDashboardItem {
        private __values;
        values: ko.ObservableArray<DevExpress.Dashboard.Model.Measure>;
        text: ko.Observable<string>;
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemBaseInteractivityOptions;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _isCalculationSupported(): boolean;
        protected _getDefaultItemType(): string;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getIsVisualInteractivitySupported(): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import TextBoxItem = DevExpress.Dashboard.Model.TextBoxItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    export class TextBoxItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.TextBoxItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.TextBoxItem): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DashboardTreemapLayoutAlgorithm = DevExpress.Dashboard.Model.DashboardTreemapLayoutAlgorithm;
    import DashboardTreemapLayoutDirection = DevExpress.Dashboard.Model.DashboardTreemapLayoutDirection;
    import TreemapValueType = DevExpress.Dashboard.Model.TreemapValueType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemColoringOptions = DevExpress.Dashboard.Model.DashboardItemColoringOptions;
    import DashboardItemInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
    export class TreemapItem extends DataDashboardItem {
        private __values;
        values: ko.ObservableArray<DevExpress.Dashboard.Model.Measure>;
        private __arguments;
        arguments: ko.ObservableArray<DevExpress.Dashboard.Model.Dimension>;
        layoutAlgorithm: ko.Observable<DevExpress.Dashboard.Model.DashboardTreemapLayoutAlgorithm>;
        layoutDirection: ko.Observable<DevExpress.Dashboard.Model.DashboardTreemapLayoutDirection>;
        tilesLabelContentType: ko.Observable<DevExpress.Dashboard.Model.TreemapValueType>;
        tilesTooltipContentType: ko.Observable<DevExpress.Dashboard.Model.TreemapValueType>;
        groupsLabelContentType: ko.Observable<DevExpress.Dashboard.Model.TreemapValueType>;
        groupsTooltipContentType: ko.Observable<DevExpress.Dashboard.Model.TreemapValueType>;
        interactivityOptions: DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
        colorScheme: ko.ObservableArray<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        coloringOptions: DevExpress.Dashboard.Model.DashboardItemColoringOptions;
        constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        _clearBindings(): void;
        _isCalculationSupported(): boolean;
        protected _getDefaultItemType(): string;
        protected _getCanColorByMeasures(): boolean;
        protected _getCanColorByDimensions(): boolean;
        protected _getAreMeasuresColoredByDefault(): boolean;
        protected _getIsDimensionColoredByDefault(dimension: DevExpress.Dashboard.Model.Dimension): boolean;
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        protected _getLayersCount(): number;
        protected _getLayerName(): string;
        _getColorizableDataItemsInfo(): Array<{
            items: Array<DevExpress.Dashboard.Model.DataItemLink>;
            prefixId: string;
        }>;
        _isSortingEnabled(): boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import TreemapItem = DevExpress.Dashboard.Model.TreemapItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    export class TreemapItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.TreemapItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(model: DevExpress.Dashboard.Model.TreemapItem): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
        getLayoutWrapper(model: DevExpress.Dashboard.Model.TreemapItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<TreemapItem>;
        getLabelsWrapper(model: DevExpress.Dashboard.Model.TreemapItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<TreemapItem>;
        static getTileOptionsTab(model: DevExpress.Dashboard.Model.TreemapItem, dataItem: DevExpress.Dashboard.Model.DataItem): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>;
        protected static getTileOptionsWrapper(model: DevExpress.Dashboard.Model.TreemapItem, dataItem: DevExpress.Dashboard.Model.DataItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<DataItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataItemContainerSectionInfo = DevExpress.Dashboard.Internal.Designer.IDataItemContainerSectionInfo;
    import IDataSectionSurface = DevExpress.Dashboard.Internal.Designer.IDataSectionSurface;
    import IItemsCollection = DevExpress.Dashboard.Internal.Designer.IItemsCollection;
    import IGroupedItemsHolder = DevExpress.Dashboard.Internal.Designer.IGroupedItemsHolder;
    export class DataItemContainerCollectionSurface implements IDataSectionSurface, IItemsCollection {
        itemSurface: DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface<DataDashboardItem>;
        holder: any;
        sectionInfo: DevExpress.Dashboard.Internal.Designer.IDataItemContainerSectionInfo<DataItemContainer>;
        warning?: ko.Subscribable<boolean>;
        private _disposables;
        supportGroups: boolean;
        constructor(itemSurface: DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface<DataDashboardItem>, holder: any, sectionInfo: DevExpress.Dashboard.Internal.Designer.IDataItemContainerSectionInfo<DataItemContainer>, warning?: ko.Subscribable<boolean>);
        groups: ko.Computed<Array<DevExpress.Dashboard.Internal.Designer.IGroupedItemsHolder>>;
        get items(): ko.ObservableArray<DevExpress.Dashboard.Model.DataItemContainer>;
        private _chooseDataField;
        addDataItemContainerClick: () => void;
        selectContainerSample: (dataItemContainer: DevExpress.Dashboard.Model.DataItemContainer) => void;
        private _removeDataItem;
        removeDataItem: (container: DevExpress.Dashboard.Model.DataItemContainer) => void;
        dataItemDisplayNameProvider: (dataItem: DevExpress.Dashboard.Model.DataItem) => string;
        getDisplayName: (object: any) => string;
        private _processChangeContainer;
        private getCompatibleTransfers;
        private _processChangeContainerType;
        selectDataItemContainer: (container: DevExpress.Dashboard.Model.DataItemContainer) => void;
        newContainerSample: ko.Observable<any>;
        template: string;
        relocateItem(item: DevExpress.Dashboard.Model.DataItemContainer | DevExpress.Dashboard.Model.DataItemLink, placeholderIndex: number): void;
        isOlap(): boolean;
        errorFactory(container: DevExpress.Dashboard.Model.DataItemContainer): ko.Observable<boolean>;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DockingLayoutController = DevExpress.Dashboard.Internal.DockingLayoutController;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import SurfaceItemsFactory = DevExpress.Dashboard.Internal.Designer.SurfaceItemsFactory;
    export class DataItemLinkComponent {
        surface: DevExpress.Dashboard.Internal.DockingLayoutController;
        $element: JQuery;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        surfaceItemsFactory: DevExpress.Dashboard.Internal.Designer.SurfaceItemsFactory;
        constructor(surface: DevExpress.Dashboard.Internal.DockingLayoutController, $element: JQuery, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController, surfaceItemsFactory: DevExpress.Dashboard.Internal.Designer.SurfaceItemsFactory);
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DataItemSurface = DevExpress.Dashboard.Internal.Designer.DataItemSurface;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataSectionInfo = DevExpress.Dashboard.Internal.Designer.IDataSectionInfo;
    import IDataSectionSurface = DevExpress.Dashboard.Internal.Designer.IDataSectionSurface;
    import IItemsCollection = DevExpress.Dashboard.Internal.Designer.IItemsCollection;
    export interface SingleDataItemSurfaceOptions {
        itemSurface: DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface<DataDashboardItem>;
        sectionInfo: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<DataItem>;
        warning?: ko.Subscribable<boolean>;
        fieldConstraint?: DevExpress.Dashboard.Internal.IFieldConstraint;
        extendTabsHandler?: (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any) => void;
    }
    export class SingleDataItemSurface implements IDataSectionSurface, IItemsCollection {
        private _disposables;
        private extendTabsHandler?;
        dataItemLink: DevExpress.Dashboard.Model.DataItemLink;
        itemSurface: DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface<DataDashboardItem>;
        sectionInfo: DevExpress.Dashboard.Internal.Designer.IDataSectionInfo<DataItem>;
        warning: ko.Subscribable<boolean>;
        fieldConstraint: DevExpress.Dashboard.Internal.IFieldConstraint;
        supportGroups: boolean;
        constructor(options: SingleDataItemSurfaceOptions);
        private _removeDataItem;
        removeDataItem: () => void;
        dataItemDisplayNameProvider: (dataItem: DevExpress.Dashboard.Model.DataItem) => string;
        selectDataItem: () => void;
        dataItemSurface: ko.Observable<DevExpress.Dashboard.Internal.Designer.DataItemSurface>;
        items: ko.ObservableArray<any>;
        relocateItem(item: DevExpress.Dashboard.Model.DataItemContainer | DevExpress.Dashboard.Model.DataItemLink, placeholderIndex: number): void;
        isOlap(): boolean;
        errorFactory(link: DevExpress.Dashboard.Model.DataItemLink): ko.Observable<boolean>;
        template: string;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import BoundImageItem = DevExpress.Dashboard.Model.BoundImageItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class BoundImageItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.BoundImageItem> {
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.BoundImageItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<BoundImageItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import BubbleMapItem = DevExpress.Dashboard.Model.BubbleMapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class BubbleMapItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.BubbleMapItem> {
        constructor(dashboardItem: DevExpress.Dashboard.Model.BubbleMapItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        fillSections(): void;
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<BubbleMapItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    export class DeltaNumericFormatSurface implements IDisposable, IPropertiesHolder {
        model: {
            title: string;
            numericFormat: DevExpress.Dashboard.Model.DataItemNumericFormat;
        };
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        private _disposables;
        constructor(model: {
            title: string;
            numericFormat: DevExpress.Dashboard.Model.DataItemNumericFormat;
        }, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController);
        propertiesTabs: ko.ObservableArray<DevExpress.Dashboard.Internal.Designer.AccordionTab<any>>;
        updatePropertiesTabs(): void;
        startEditing(args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    export class EditCardTemplateSurface implements IDisposable, IPropertiesHolder {
        model: DevExpress.Dashboard.Model.CardLayoutTemplate;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        private dimensionNames;
        private applyTemplateToAllCards;
        private _disposables;
        constructor(model: DevExpress.Dashboard.Model.CardLayoutTemplate, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController, dimensionNames: string[], applyTemplateToAllCards?: (template: DevExpress.Dashboard.Model.CardLayoutTemplate) => void);
        propertiesTabs: ko.ObservableArray<DevExpress.Dashboard.Internal.Designer.AccordionTab<any>>;
        updatePropertiesTabs(): void;
        startEditing(args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import CardItem = DevExpress.Dashboard.Model.CardItem;
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class CardItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.CardItem> {
        private _editRuleHandler;
        private addConditionalFormattingOptions;
        protected extendHiddenMeasuresTabs(tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any): void;
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.CardItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<CardItem>;
        applyLayoutTemplateToAllCards(template: DevExpress.Dashboard.Model.CardLayoutTemplate): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ChartIndicator = DevExpress.Dashboard.Model.ChartIndicator;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    export class IndicatorSurface {
        model: ko.Observable<DevExpress.Dashboard.Model.ChartIndicator>;
        dashboardItem: DevExpress.Dashboard.Model.ChartItem;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        constructor(model: ko.Observable<DevExpress.Dashboard.Model.ChartIndicator>, dashboardItem: DevExpress.Dashboard.Model.ChartItem, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController);
        updatePropertiesTabs(requestRecalculation: JQueryCallback, findExtension: (name: string) => DevExpress.Dashboard.IExtension): void;
        startEditing(args: DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments, findExtension: (name: string) => DevExpress.Dashboard.IExtension): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class ChartItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.ChartItem> {
        private editCFRuleRuleHandler;
        private createCFRuleDelegate;
        private editChartIndicatorHandler;
        private createChartIndicatorDelegate;
        private addConditionalFormattingOptions;
        protected extendHiddenMeasuresTabs(tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any): void;
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.ChartItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController, findExtension?: (name: string) => DevExpress.Dashboard.IExtension);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<ChartItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ChoroplethMapItem = DevExpress.Dashboard.Model.ChoroplethMapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class ChoroplethMapItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.ChoroplethMapItem> {
        constructor(dashboardItem: DevExpress.Dashboard.Model.ChoroplethMapItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        fillSections(): void;
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<ChoroplethMapItem>;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfo = DevExpress.Analytics.Utils.ISerializationInfo;
    export interface ICustomItemProperty extends ISerializationInfo {
        sectionName?: string;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ICustomItemProperty = DevExpress.Dashboard.Model.ICustomItemProperty;
    import FormAdapterItem = DevExpress.Dashboard.Metadata.FormAdapterItem;
    export class CustomItemPropertiesComposerHelper {
        private static _getEditorValues;
        private static _mapEditor;
        static convertToDashboardSerializationInfo(property: DevExpress.Dashboard.Model.ICustomItemProperty): {
            propertyName: string;
            formAdapterItem: DevExpress.Dashboard.Metadata.FormAdapterItem;
            editorOptions: any;
        };
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import CustomItem = DevExpress.Dashboard.Model.CustomItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class CustomItemPropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.CustomItem> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        private _mapLegacyPropertiesToTabs;
        _composeTabsCore(model: DevExpress.Dashboard.Model.CustomItem): Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>;
    }
    export class CustomItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.CustomItem> {
        protected get showDefaultSections(): boolean;
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.CustomItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<CustomItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class DateFilterItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.DateFilterItem> {
        constructor(dashboardItem: DevExpress.Dashboard.Model.DateFilterItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        fillSections(): void;
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<DateFilterItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class FilterItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.FilterElementItemBase> {
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.FilterElementItemBase, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<FilterElementItemBase>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import GaugeItem = DevExpress.Dashboard.Model.GaugeItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class GaugeItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.GaugeItem> {
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.GaugeItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<GaugeItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import GeoPointMapItem = DevExpress.Dashboard.Model.GeoPointMapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class GeoPointItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.GeoPointMapItem> {
        constructor(dashboardItem: DevExpress.Dashboard.Model.GeoPointMapItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        fillSections(): void;
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<GeoPointMapItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class GridItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.GridItem> {
        private addConditionalFormattingOptions;
        protected extendHiddenMeasuresTabs(tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any): void;
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.GridItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        private editRuleHandler;
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<GridItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ImageItem = DevExpress.Dashboard.Model.ImageItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import BaseItemSurface = DevExpress.Dashboard.Internal.Designer.BaseItemSurface;
    export class ImageItemSurface extends BaseItemSurface<DevExpress.Dashboard.Model.ImageItem> {
        constructor(dashboardItem: DevExpress.Dashboard.Model.ImageItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<ImageItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import PieItem = DevExpress.Dashboard.Model.PieItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class PieItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.PieItem> {
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.PieItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<PieItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import PieMapItem = DevExpress.Dashboard.Model.PieMapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class PieMapItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.PieMapItem> {
        constructor(dashboardItem: DevExpress.Dashboard.Model.PieMapItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        fillSections(): void;
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<PieMapItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import PivotItem = DevExpress.Dashboard.Model.PivotItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class PivotItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.PivotItem> {
        private addConditionalFormattingOptions;
        protected extendHiddenMeasuresTabs(tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any): void;
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.PivotItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<PivotItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import ChartSeriesPropertiesComposer = DevExpress.Dashboard.Internal.Designer.ChartSeriesPropertiesComposer;
    export class RangeSeriesPropertiesComposer extends ChartSeriesPropertiesComposer {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs);
        protected _showIgnoreEmptyPointsVisible(model: DevExpress.Dashboard.Model.ChartSeries): boolean;
        protected _fillConditionalFormattingTab(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class RangeFilterItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.RangeFilterItem> {
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.RangeFilterItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<RangeFilterItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ScatterChartItem = DevExpress.Dashboard.Model.ScatterChartItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class ScatterChartItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.ScatterChartItem> {
        constructor(dashboardItem: DevExpress.Dashboard.Model.ScatterChartItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        fillSections(): void;
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<ScatterChartItem>;
        private editCFRuleRuleHandler;
        private createCFRuleDelegate;
        private addConditionalFormattingOptions;
        protected extendHiddenMeasuresTabs(tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
    export class DashboardTabPagePropertiesComposer extends DashboardItemPropertiesComposer<DevExpress.Dashboard.Model.DashboardTabPage> {
        constructor(customizeHandler: DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs);
        _composeTabsCore(tabPage: DevExpress.Dashboard.Model.DashboardTabPage, args: DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs): DevExpress.Dashboard.Internal.Designer.AccordionTab<any>[];
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import TabContainerItem = DevExpress.Dashboard.Model.TabContainerItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import BaseItemSurface = DevExpress.Dashboard.Internal.Designer.BaseItemSurface;
    export class TabContainerItemSurface extends BaseItemSurface<DevExpress.Dashboard.Model.TabContainerItem> {
        private dashboardItem;
        private _dashboardModel;
        constructor(dashboardItem: DevExpress.Dashboard.Model.TabContainerItem, _dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<TabContainerItem>;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import TextBoxItem = DevExpress.Dashboard.Model.TextBoxItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class TextBoxItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.TextBoxItem> {
        extendTabsHandler: (tabs: DevExpress.Dashboard.Internal.Designer.AccordionTab[], model: any, dashboardItem: DevExpress.Dashboard.Model.TextBoxItem) => void;
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.TextBoxItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<TextBoxItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import TreemapItem = DevExpress.Dashboard.Model.TreemapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    export class TreemapItemSurface extends DataDashboardItemSurface<DevExpress.Dashboard.Model.TreemapItem> {
        fillSections(): void;
        constructor(dashboardItem: DevExpress.Dashboard.Model.TreemapItem, dashboardModel: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser, notificationController: DevExpress.Dashboard.NotificationController);
        getPropertiesComposer(): DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer<TreemapItem>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardItemMenu = DevExpress.Dashboard.Internal.Designer.DashboardItemMenu;
    import IContextPopupMenu = DevExpress.Dashboard.Internal.Designer.IContextPopupMenu;
    export const createPopoverOptionsGetterFunction: (menuItem: DevExpress.Dashboard.Internal.Designer.IContextPopupMenu, dashboardItemMenu: DevExpress.Dashboard.Internal.Designer.DashboardItemMenu) => (rootContainer: any) => {
        target: any;
        container: any;
        visible: ko.PureComputed<boolean>;
        position: {
            my: ko.PureComputed<"left" | "right">;
            at: ko.PureComputed<"left" | "right">;
            boundary: any;
            collision: string;
            boundaryOffset: string;
            offset: ko.PureComputed<"+10, 0" | "-10, 0">;
        };
        height: any;
        width: number;
        hoverStateEnabled: boolean;
        onShown: (options: any) => void;
        hideOnOutsideClick: boolean;
        animation: {
            enabled: boolean;
        };
        onInitialized: (args: any) => void;
        onDisposing: () => void;
        hideOnParentScroll: boolean;
        wrapperAttr: ko.PureComputed<{
            class: string;
        }>;
    };
}
declare module DevExpress.Dashboard.Internal.Designer {
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import DockingLayoutController = DevExpress.Dashboard.Internal.DockingLayoutController;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import BaseItemSurface = DevExpress.Dashboard.Internal.Designer.BaseItemSurface;
    export var DashboardItemMenuSizes: {
        BindingPanelPanelWidth: (collapsed?: boolean) => 300 | 220 | 600 | 495;
        OptionsPanelWidth: (content?: boolean) => 300 | 298 | 274;
    };
    export interface IContextPopupMenu {
        menuItemId: string;
        icon: string;
        title?: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        hint?: DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
        detailVisible: ko.Observable<boolean>;
        templateName: string;
        popoverClass?: string;
        panelWidth: ko.Observable<number> | number;
        customData: any;
        showMenu?: () => void;
        index?: number;
        isDisposing?: boolean;
    }
    export interface IContextPopupMenuViewModel {
        menuButton: {
            icon: string;
            hint: string;
            cssClass: ko.PureComputed<string>;
            clickHandler: () => void;
        };
        menuPropertiesPanel: {
            title: string;
            panelContent: {
                view: string;
                viewModel: any;
            };
            cssClasses: ko.PureComputed<string>;
            style: ko.PureComputed<{
                width: string;
                marginLeft: string;
            }>;
            detailVisible: ko.Observable<boolean>;
            hidePanelAction: () => void;
        };
        getPopoverOptions: any;
    }
    export const createContextPopupMenuViewModel: (menuItem: IContextPopupMenu, dashboardItemMenu: DashboardItemMenu) => IContextPopupMenuViewModel;
    export interface IDashboardItemMenu {
        contextMenuItems: ko.ObservableArray<IContextPopupMenu>;
    }
    export interface IDashboardItemMenuViewModel {
        menuContainerCssClasses: ko.PureComputed<string>;
        menuItemDetailVisible: ko.PureComputed<boolean>;
        contextMenuItemViewModels: ko.PureComputed<IContextPopupMenuViewModel[]>;
        isCollapsedStateToggleVisible: ko.Subscribable<boolean>;
        isCollapsed: ko.Subscribable<boolean>;
        collapsedStateToggle: () => void;
        deleteCurrentItemAction: () => void;
        deleteCurrentItemActionCaption: string;
    }
    export class DashboardItemMenu extends DisposableObject implements IDashboardItemMenu {
        layoutController: DevExpress.Dashboard.Internal.DockingLayoutController;
        layoutItem: DevExpress.Dashboard.Internal.LayoutItem;
        private _positionCalculator;
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        constructor(layoutController: DevExpress.Dashboard.Internal.DockingLayoutController, layoutItem: DevExpress.Dashboard.Internal.LayoutItem, _positionCalculator: ItemMenuPositionCalculator, propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController, itemSurface: DevExpress.Dashboard.Internal.Designer.BaseItemSurface<DashboardItem>);
        createViewModel(): IDashboardItemMenuViewModel;
        menuItemClick: (menuItemId: string) => void;
        selectedItemSurface: DevExpress.Dashboard.Internal.Designer.BaseItemSurface<DashboardItem>;
        contextMenuItems: ko.ObservableArray<IContextPopupMenu>;
        contextMenuItemViewModels: ko.PureComputed<IContextPopupMenuViewModel[]>;
        menuItemDetailVisible: ko.PureComputed<boolean>;
        propertiesPanelStyle: ko.PureComputed<{
            width: string;
            marginLeft: string;
        }>;
        verticalPosition: ko.Observable<ItemMenuPosition>;
        isLeft: ko.Observable<boolean>;
        isCollapsed: ko.Observable<boolean>;
        isCollapsedStateToggleVisible: ko.Observable<boolean>;
        _recalculatePosition: () => void;
        _recalculatePositionDebounced: (...args: any[]) => void;
        hideBindingProperties: () => void;
        hideBindingPanel: () => void;
        isSecondaryPanelVisible: ko.Observable<boolean>;
        __secondaryPanelVisibleTimeout: number;
        private _repaintHandlers;
        subscribeLayoutItemRepaintRequest(handler: any): void;
        unsubscribeLayoutItemRepaintRequest(handler: any): void;
        dispose(): void;
    }
    export class ItemMenuPositionCalculator {
        element: HTMLElement;
        layoutContainer: HTMLElement;
        private _isValidElement;
        constructor(element: HTMLElement);
        calculateIsLeft(): boolean;
        calculateVPosition(): ItemMenuPosition;
        calculateIsLeftAndInside(): boolean;
    }
    export type ItemMenuPosition = "center" | "top" | "bottom";
}
declare module DevExpress.Dashboard.Internal.Designer {
    import IItemsCollection = DevExpress.Dashboard.Internal.Designer.IItemsCollection;
    export class DragProcessor {
        rootElement: HTMLElement;
        CSS_DRAG_IN_PROGRESS: string;
        CSS_HIGHLIGHT_PLACEHOLDER: string;
        COLLECTION_SELECTOR: string;
        TARGET_SELECTOR: string;
        EVENT_NAMESPACE: string;
        currentDrag: {
            clonedElement: HTMLElement;
            itemPosition: number;
            originalEvent: DragEvent;
            itemElement: HTMLElement;
            sourceCollection: DevExpress.Dashboard.Internal.Designer.IItemsCollection;
        };
        constructor(rootElement: HTMLElement);
        state: "pending" | "dragging";
        startDrag(ev: JQueryEventObject): boolean;
        setDataItemsPositions: (sourceCollectionRoot: HTMLElement) => void;
        processHtmlDragEvent: () => void;
        finishDrag: () => void;
        checkItemIsDraggableToPosition(itemIndex: number, placeholderIndex: number): boolean;
        interchange(items: ko.ObservableArray<any>, newOwner: {
            relocateItem: (item: any, placeholderIndex: number) => void;
        }, sourceIndex: number, placeholderIndex: number, groupSize: number): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import IDetailsPropertiesComposer = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposer;
    export class InteractivityPropertiesComposer implements IDetailsPropertiesComposer<any> {
        propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController;
        constructor(propertiesController: DevExpress.Dashboard.Internal.Designer.PropertiesController);
        composeTabs(model: any): Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import FormAdapterEditor = DevExpress.Dashboard.Internal.Designer.FormAdapterEditor;
    export const singleLookupValueEditor: DevExpress.Dashboard.Internal.Designer.FormAdapterEditor<{
        parameter: Parameter;
        dataSourceBrowser: DataSourceBrowser;
    }>;
    export const multipleLookupValueEditor: DevExpress.Dashboard.Internal.Designer.FormAdapterEditor<{
        parameter: Parameter;
        dataSourceBrowser: DataSourceBrowser;
    }>;
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DynamicListLookUpSettings = DevExpress.Dashboard.Model.DynamicListLookUpSettings;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import StaticListLookUpSettings = DevExpress.Dashboard.Model.StaticListLookUpSettings;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    export class ParameterEditorViewModel extends DisposableObject {
        parameter: DevExpress.Dashboard.Model.Parameter;
        private _dataSourceBrowserGetter?;
        get dataSourceBrowser(): DevExpress.Dashboard.Internal.DataSourceBrowser;
        commonParameterSettings: DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
        lookUpParameterType: DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
        staticListLookUpSettings: ko.Computed<DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper>;
        dynamicListLookUpSettings: ko.Computed<DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper>;
        constructor(parameter: DevExpress.Dashboard.Model.Parameter, _dataSourceBrowserGetter?: () => DevExpress.Dashboard.Internal.DataSourceBrowser, isNameValid?: (string: any) => boolean);
        _getStaticListLookUpSettingsWrapper(staticListLookUpSettings: DevExpress.Dashboard.Model.StaticListLookUpSettings, parameterType: string): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<StaticListLookUpSettings>;
        _getDynamicListLookUpSettingsWrapper(dynamicListLookUpSettings: DevExpress.Dashboard.Model.DynamicListLookUpSettings): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<DynamicListLookUpSettings>;
        _getCommonParameterSettingsWrapper(parameter: DevExpress.Dashboard.Model.Parameter, isNameValid: (string: any) => boolean): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper<Parameter>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import ParameterEditorViewModel = DevExpress.Dashboard.Internal.Designer.ParameterEditorViewModel;
    export class ParameterListEditorViewModel extends DisposableObject {
        dashboard: ko.Computed<DevExpress.Dashboard.Model.Dashboard>;
        private _dataSourceBrowserGetter?;
        constructor(dashboard: ko.Computed<DevExpress.Dashboard.Model.Dashboard>, _dataSourceBrowserGetter?: () => DevExpress.Dashboard.Internal.DataSourceBrowser);
        initialize(): void;
        selectedParameters: ko.Observable<DevExpress.Dashboard.Model.Parameter[]>;
        selectedParameter: ko.Computed<DevExpress.Dashboard.Model.Parameter>;
        parameterEditorViewModel: ko.Observable<DevExpress.Dashboard.Internal.Designer.ParameterEditorViewModel>;
        allowReordering: ko.Observable<boolean>;
        toggleReordering: () => void;
        addParameter: () => void;
        removeParameter: () => void;
        reorderParameters: (e: any) => void;
    }
}
declare module DevExpress.Dashboard.Designer {
    export class DashboardMenuItem {
        id: string;
        title: string;
        index: number;
        hotKey: number;
        click: () => void;
        template: string;
        selected: ko.Subscribable<boolean>;
        disabled: ko.Subscribable<boolean>;
        hasSeparator: boolean;
        data: any;
        constructor(id: string, title: string, index: number, hotKey: number, click?: () => void);
    }
    export class DashboardToolboxItem {
        name: string;
        click: (itemTypeName: string) => void;
        icon: string;
        title: string;
        type: string;
        disabled: ko.Subscribable<boolean>;
        constructor(name: string, click: (itemTypeName: string) => void, icon: string, title?: string, type?: string);
    }
    export class DashboardToolbarItem {
        name: string;
        click: (itemTypeName: string) => void;
        icon: string;
        title: string;
        template: string;
        disabled: ko.Subscribable<boolean>;
        constructor(name: string, click: (itemTypeName: string) => void, icon?: string, title?: string);
    }
    export class DashboardToolboxGroup {
        name: string;
        title: string;
        index: number;
        items: ko.ObservableArray<DashboardToolboxItem>;
        constructor(name: string, title: string, index: number, ...items: Array<DashboardToolboxItem>);
    }
    export class DashboardToolbarGroup {
        name: string;
        title: string;
        index: number;
        items: ko.ObservableArray<DashboardToolbarItem>;
        constructor(name: string, title: string, index: number, ...items: Array<DashboardToolbarItem>);
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    export let toolboxConstants: {
        menuTitleHeight: number;
        leftPanelWidth: number;
    };
}
declare module DevExpress.Dashboard.Internal.Designer {
    import KeyEventType = DevExpress.Dashboard.KeyEventType;
    import LayoutDragController = DevExpress.Dashboard.Internal.LayoutDragController;
    import ElementAccessorKoComponentArgs = DevExpress.Dashboard.Internal.ElementAccessorKoComponentArgs;
    import DashboardMenuItem = DevExpress.Dashboard.Designer.DashboardMenuItem;
    import DashboardToolbarGroup = DevExpress.Dashboard.Designer.DashboardToolbarGroup;
    import DashboardToolboxGroup = DevExpress.Dashboard.Designer.DashboardToolboxGroup;
    export class ToolboxViewModel {
        private _defaultMenuItemData;
        private _menuItems;
        private _toolboxGroups;
        private _toolbarGroups;
        private _layoutDragController;
        constructor(menuVisible: boolean, _defaultMenuItemData: any, _menuItems: ko.ObservableArray<DevExpress.Dashboard.Designer.DashboardMenuItem>, _toolboxGroups: ko.ObservableArray<DevExpress.Dashboard.Designer.DashboardToolboxGroup>, _toolbarGroups: ko.ObservableArray<DevExpress.Dashboard.Designer.DashboardToolbarGroup>, _layoutDragController: ko.Subscribable<DevExpress.Dashboard.Internal.LayoutDragController>);
        initDragEvents(itemType: any): DevExpress.Dashboard.Internal.ElementAccessorKoComponentArgs;
        processKeyEvent(keyEventType: DevExpress.Dashboard.KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
        showDesignerPanel(): void;
        hideDesignerPanel(): void;
        toolbarHeight: ko.Observable<number>;
        designerPanelLeft: ko.Observable<number>;
        menuItemsSorted: ko.Computed<Array<DevExpress.Dashboard.Designer.DashboardMenuItem>>;
        toolboxGroupsSorted: ko.Computed<Array<DevExpress.Dashboard.Designer.DashboardToolboxGroup>>;
        toolbarGroupsSorted: ko.Computed<Array<DevExpress.Dashboard.Designer.DashboardToolbarGroup>>;
        settingsForm: ko.Observable<any>;
        settingsFormVisible: ko.Computed<boolean>;
        toggleMenu: () => void;
        closeMenu: () => void;
        showMenu: () => void;
        menuItemClick: (menuItem: DevExpress.Dashboard.Designer.DashboardMenuItem) => void;
        menuVisible: ko.Observable<boolean>;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxList = DevExpress.ui.dxList;
    import dxTreeView = DevExpress.ui.dxTreeView;
    import dxTreeViewOptions = DevExpress.ui.dxTreeView.Properties;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import CalcFieldEditor = DevExpress.Dashboard.Internal.Designer.CalcFieldEditor;
    import ConfirmDialogViewModel = DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
    import ISlidableListsNavigable = DevExpress.Dashboard.Internal.Designer.ISlidableListsNavigable;
    export class FieldChooserItem {
        data: DevExpress.Dashboard.Internal.Model.IDataField;
        static getName(data: DevExpress.Dashboard.Internal.Model.IDataField): string;
        constructor(data: DevExpress.Dashboard.Internal.Model.IDataField);
        get displayName(): string;
        get name(): string;
        get isHierarchy(): boolean;
        get isLeaf(): boolean;
        get isGroup(): boolean;
        get type(): string;
        get normalizedType(): string;
        get isCalcField(): boolean;
        get isCorruptedCalcField(): boolean;
        get isOlap(): boolean;
        get isOlapDimension(): boolean;
        get isOlapDimensionHierarchy(): boolean;
        get isOlapMeasure(): boolean;
        get isAggregate(): boolean;
        get isList(): boolean;
        get disabled(): boolean;
        get typeTooltip(): string;
    }
    export class TreeViewFieldChooserItem extends FieldChooserItem {
        data: DevExpress.Dashboard.Internal.Model.IDataField;
        id: string;
        parentId: string;
        constructor(data: DevExpress.Dashboard.Internal.Model.IDataField, id: string, parentId: string);
        selected: boolean;
    }
    export interface SearchResultItem {
        path: string;
        item: FieldChooserItem;
    }
    export class FieldChooserList extends DisposableObject {
        private owner;
        path: string;
        pathParts: string[];
        private _selectedField;
        private _scrollAfterInitialize;
        constructor(owner: SliderController, path: string, pathParts: string[], _selectedField: ko.Observable<DevExpress.Dashboard.Internal.Model.IDataField>);
        ancestors: string[];
        itemClick: (args: {
            itemData: FieldChooserItem;
            component: DevExpress.ui.dxList;
        }) => void;
        reload(): void;
        scrollToSelectedItem(): void;
        onInitialized: (e: any) => void;
        onContentReady: () => void;
        component: DevExpress.ui.dxList;
        items: ko.Observable<FieldChooserItem[]>;
        index: ko.Observable<number>;
        ready: ko.Observable<boolean>;
        selectedItemName: ko.Observable<string[]>;
        loading: ko.Observable<boolean>;
    }
    export class SliderController extends DisposableObject implements ISlidableListsNavigable {
        static TRANSITION_TIME: number;
        constructor(params: {
            startPath: ko.Observable<string>;
            dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
            filter: (dataField: DevExpress.Dashboard.Internal.Model.IDataField) => boolean;
            selectedField: ko.Observable<DevExpress.Dashboard.Internal.Model.IDataField>;
        });
        rootPath: ko.Observable<string>;
        selectedField: ko.Observable<DevExpress.Dashboard.Internal.Model.IDataField>;
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        filter: (dataField: DevExpress.Dashboard.Internal.Model.IDataField) => boolean;
        lists: ko.ObservableArray<FieldChooserList>;
        isSliding: boolean;
        slide(list: FieldChooserList, item: FieldChooserItem): void;
        backClick: (pathItem: string, ancestors: string[]) => void;
    }
    export class FieldChooserController extends SliderController {
        calcFieldEditor: DevExpress.Dashboard.Internal.Designer.CalcFieldEditor;
        get dataSourceName(): string;
        get canAddCalculatedField(): boolean;
        addCalcField: () => void;
        editCalcField: () => void;
        removeCalcField: () => void;
        _inappropriateCalcFieldConfirmation: DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
        onCalcFieldSaveHandler: (calcField: DevExpress.Dashboard.Model.CalculatedField) => JQuery.PromiseBase<void, never, never, never, never, never, never, never, never, never, never, never>;
        getCurrentCalcField: () => DevExpress.Dashboard.Model.CalculatedField;
        isCalcFieldSelected: ko.PureComputed<boolean>;
        private _navigateToSelection;
        constructor(params: {
            startPath: ko.Observable<string>;
            dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
            filter: (dataField: DevExpress.Dashboard.Internal.Model.IDataField) => boolean;
            selectedField: ko.Observable<DevExpress.Dashboard.Internal.Model.IDataField>;
        });
        isSearchMode: ko.Observable<boolean>;
        searchString: ko.Observable<string>;
        searchResults: ko.ObservableArray<SearchResultItem>;
        hasSearchResults: ko.Observable<boolean>;
        searchButtonClick: (_: any, ev: JQueryEventObject) => void;
        selectViaSearchResults: (data: {
            itemData: SearchResultItem;
        }) => void;
        selectedSearchResult: ko.Computed<SearchResultItem>;
        isListMode: ko.Observable<boolean>;
        setListMode: () => void;
        setTreeMode: () => void;
        hasGroups: ko.Computed<boolean>;
        treeViewInstanceResolver: JQuery.Deferred<DevExpress.ui.dxTreeView<any>, any, any>;
        get dataSourceTreeOptions(): DevExpress.ui.dxTreeView.Properties;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import SliderController = DevExpress.Dashboard.Internal.Designer.SliderController;
    export class DataSourceChooserController extends SliderController {
        constructor(params: {
            dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
            dataSource: ko.Observable<string>;
            dataMember: ko.Observable<string>;
            active: ko.Observable<boolean>;
        });
    }
}
declare module DevExpress.Dashboard.Designer {
}
declare module DevExpress.Dashboard.Designer {
    import CancellationToken = DevExpress.Dashboard.Internal.CancellationToken;
    import IExtension = DevExpress.Dashboard.IExtension;
    import KeyEventType = DevExpress.Dashboard.KeyEventType;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import SequenceAction = DevExpress.Dashboard.SequenceAction;
    import WorkingModeSwitchingOptions = DevExpress.Dashboard.WorkingModeSwitchingOptions;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import ToolboxViewModel = DevExpress.Dashboard.Internal.Designer.ToolboxViewModel;
    import DashboardMenuItem = DevExpress.Dashboard.Designer.DashboardMenuItem;
    import DashboardToolbarGroup = DevExpress.Dashboard.Designer.DashboardToolbarGroup;
    import DashboardToolbarItem = DevExpress.Dashboard.Designer.DashboardToolbarItem;
    import DashboardToolboxGroup = DevExpress.Dashboard.Designer.DashboardToolboxGroup;
    import DashboardToolboxItem = DevExpress.Dashboard.Designer.DashboardToolboxItem;
    export class ToolboxExtension extends DisposableObject implements IExtension {
        private dashboardControl;
        name: string;
        template: DevExpress.Dashboard.KnockoutTemplate;
        designerToViewerAction: DevExpress.Dashboard.SequenceAction;
        viewerToDesignerAction: DevExpress.Dashboard.SequenceAction;
        _viewModel: DevExpress.Dashboard.Internal.Designer.ToolboxViewModel;
        private _switchToViewerToolbar;
        get menuVisible(): ko.Observable<boolean>;
        menuItems: ko.ObservableArray<DevExpress.Dashboard.Designer.DashboardMenuItem>;
        addMenuItem: (menuItem: DevExpress.Dashboard.Designer.DashboardMenuItem) => void;
        removeMenuItem: (menuItemId: string) => void;
        selectMenuItem: (menuItem: DevExpress.Dashboard.Designer.DashboardMenuItem) => void;
        toolboxGroups: ko.ObservableArray<DevExpress.Dashboard.Designer.DashboardToolboxGroup>;
        addToolboxItem: (groupName: string, toolboxItem: DevExpress.Dashboard.Designer.DashboardToolboxItem) => void;
        removeToolboxItem: (groupName: string, toolboxItemName: string) => void;
        toolbarGroups: ko.ObservableArray<DevExpress.Dashboard.Designer.DashboardToolbarGroup>;
        addToolbarItem: (groupName: string, toolbarItem: DevExpress.Dashboard.Designer.DashboardToolbarItem) => void;
        removeToolbarItem: (groupName: string, toolbarItemName: string) => void;
        openMenu(): void;
        closeMenu(): void;
        showPanelAsync: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions) => JQueryPromise<{}>;
        _showPanelAsync: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions, cancellationToken: DevExpress.Dashboard.Internal.CancellationToken) => JQueryPromise<DevExpress.Dashboard.WorkingModeSwitchingOptions>;
        hidePanelAsync: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions) => JQueryPromise<{}>;
        _hidePanelAsync: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions, cancellationToken: DevExpress.Dashboard.Internal.CancellationToken) => JQueryPromise<DevExpress.Dashboard.WorkingModeSwitchingOptions>;
        processKeyEvent(keyEventType: DevExpress.Dashboard.KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        _layoutItemPlaceholderService: (layoutItem: DevExpress.Dashboard.Internal.LayoutItem) => DevExpress.Dashboard.KnockoutTemplate;
        private _registerCustomItemToolbox;
        private _createDefaultGroups;
        private _registerToolboxItem;
        private _unregisterToolboxItem;
        private _findToolboxGroup;
        private _findMenuItem;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DataSourceBrowserViewModel = DevExpress.Dashboard.Internal.Designer.DataSourceBrowserViewModel;
    export class DataSourceBrowserExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _menuItem;
        private _subscription;
        private _perDashboardSubscription;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        _disposePerDashboardSubcriptions(): void;
        _updateExtensionModel(dashboard: DevExpress.Dashboard.Model.Dashboard): void;
        start(): void;
        stop(): void;
        _dataSourceBrowserViewModel: ko.Observable<DevExpress.Dashboard.Internal.Designer.DataSourceBrowserViewModel>;
    }
}
declare module DevExpress.Dashboard.Designer {
    import KeyEventType = DevExpress.Dashboard.KeyEventType;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IDashboardItemMenu = DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu;
    export class DashboardItemMenuExtension extends DisposableObject {
        private dashboardControl;
        name: string;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        _itemContextMenu: ko.Observable<DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu>;
        start(): void;
        stop(): void;
        processKeyEvent(keyEventType: DevExpress.Dashboard.KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
        menuItemClick(menuItemId: string): void;
        private _updateExtension;
    }
}
declare module DevExpress.Dashboard.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import CustomizeSectionsEventArgs = DevExpress.Dashboard.Designer.CustomizeSectionsEventArgs;
    import DashboardItemMenu = DevExpress.Dashboard.Internal.Designer.DashboardItemMenu;
    /**
     * @docid dxDashboardControlOptions.extensions.itemOptionsPanel
     * @type object
     * @public
     */
    export interface OptionsPanelExtensionOptions {
        /**
         * @docid dxDashboardControlOptions.extensions.itemOptionsPanel.onCustomizeSections
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onCustomizeSections?: (args: DevExpress.Dashboard.Designer.CustomizeSectionsEventArgs) => void;
    }
    export type OptionsPanelExtensionEvents = {
        customizeSections: DevExpress.Dashboard.Designer.CustomizeSectionsEventArgs;
    };
    export class OptionsPanelExtension implements ISupportOptionExtension<OptionsPanelExtensionOptions> {
        private dashboardControl;
        name: string;
        private _subscriptions;
        private _perMenuSubscriptions;
        private _customizeTabsHandlers;
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<OptionsPanelExtensionOptions, OptionsPanelExtensionEvents>;
        on: DevExpress.Dashboard.Internal.EventSubscriber<OptionsPanelExtensionEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<OptionsPanelExtensionEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: OptionsPanelExtensionOptions);
        _contextMenuSubscriber(itemContextMenu: DevExpress.Dashboard.Internal.Designer.DashboardItemMenu): void;
        start(): void;
        stop(): void;
        _updateContextMenu(menu: DevExpress.Dashboard.Internal.Designer.DashboardItemMenu, item: DevExpress.Dashboard.Model.DashboardItem, dashboard: DevExpress.Dashboard.Model.Dashboard, dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser): void;
        _subscribeTabsChanged(handler: (tabs: any, dashboardItem: DevExpress.Dashboard.Model.DashboardItem) => void): DevExpress.Dashboard.Model.IDisposable;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import ChartItemBase = DevExpress.Dashboard.Model.ChartItemBase;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import ColorPickerModel = DevExpress.Dashboard.Internal.Designer.ColorPickerModel;
    import ColorSchemeModel = DevExpress.Dashboard.Internal.Designer.ColorSchemeModel;
    import EntryEditorViewModel = DevExpress.Dashboard.Internal.Designer.EntryEditorViewModel;
    export class DashboardColorSchemeEditorExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _menuItem;
        private _subscriptions;
        private selected;
        private _propertiesPanelExtension;
        private dataSourceBrowserExtension;
        static _isColoringSupported(item: DevExpress.Dashboard.Model.DashboardItem): boolean;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        _updateExtensionModel(): void;
        start(): void;
        stop(): void;
        _getColorSchemeWrapper(model: DevExpress.Dashboard.Model.ChartItemBase): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
        _getColoringWrapper(model: DevExpress.Dashboard.Model.DataDashboardItem): DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
        _colorSchemeModel: ko.Observable<DevExpress.Dashboard.Internal.Designer.ColorSchemeModel>;
        _colorPalette: ko.ObservableArray<DevExpress.Dashboard.Model.Color>;
        _entryEditorModel: DevExpress.Dashboard.Internal.Designer.EntryEditorViewModel;
        _colorPickerModel: ko.Computed<DevExpress.Dashboard.Internal.Designer.ColorPickerModel>;
        _selectedEntry: ko.Observable<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        _createNewEntry: () => void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    export class DashboardCurrencyEditorExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _menuItem;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    export class AvailableFontFamiliesExtension extends DisposableObject implements IExtension {
        private dashboardControl;
        name: string;
        fontFamilies: ko.ObservableArray<string>;
        _disposables: Array<DevExpress.Dashboard.Model.DisposableType>;
        private _isDataLoadingStarted;
        private _rootSubscription;
        private _isDesignModeSubscription;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        private _dispose;
        private _isAppearanceItem;
        private _loadAvailableFontFamilies;
    }
}
declare module DevExpress.Dashboard.Designer {
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    import CustomizeDataItemContainerSectionsEventArgs = DevExpress.Dashboard.Designer.CustomizeDataItemContainerSectionsEventArgs;
    /**
     * @docid dxDashboardControlOptions.extensions.itemBindingPanel
     * @type object
     * @public
     */
    export interface BindingPanelExtensionOptions {
        /**
         * @docid dxDashboardControlOptions.extensions.itemBindingPanel.onCustomizeDataItemContainerSections
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onCustomizeDataItemContainerSections?: (args: DevExpress.Dashboard.Designer.CustomizeDataItemContainerSectionsEventArgs) => void;
    }
    export type BindingPanelExtensionEvents = {
        customizeDataItemContainerSections: DevExpress.Dashboard.Designer.CustomizeDataItemContainerSectionsEventArgs;
    };
    export class BindingPanelExtension implements ISupportOptionExtension<BindingPanelExtensionOptions> {
        private dashboardControl;
        name: string;
        private _subscriptions;
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<BindingPanelExtensionOptions, BindingPanelExtensionEvents>;
        on: DevExpress.Dashboard.Internal.EventSubscriber<BindingPanelExtensionEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<BindingPanelExtensionEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: BindingPanelExtensionOptions);
        private _contextMenuSubscriber;
        private _updateEmptyItemTemplate;
        private _updateDashboardItemMenu;
        start(): void;
        stop(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardItemMenu = DevExpress.Dashboard.Internal.Designer.DashboardItemMenu;
    export class ConversionPanelExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _subscriptions;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        _contextMenuSubscriber(itemContextMenu: DevExpress.Dashboard.Internal.Designer.DashboardItemMenu): void;
        start(): void;
        stop(): void;
        _updateContextMenu(itemContextMenu: DevExpress.Dashboard.Internal.Designer.DashboardItemMenu, dashboardItem: DevExpress.Dashboard.Model.DashboardItem, dashboard: DevExpress.Dashboard.Model.Dashboard, serviceClient: DevExpress.Dashboard.Internal.IDataServiceClient): void;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxPopupOptions = DevExpress.ui.dxPopup.Properties;
    import dxToolbarItem = DevExpress.ui.dxToolbarItem;
    export let toolbarAnimationTime: number;
    export class ToolbarKoViewModel {
        private _getContainer;
        private _toolbarInitialized;
        private _visible;
        private _popupDisposables;
        left: ko.Observable<number>;
        toolbarItems: ko.ObservableArray<DevExpress.ui.dxToolbarItem>;
        get height(): number;
        koToolbarOptions: any;
        constructor(getContainer: () => HTMLElement, toolbarInitialized: () => void);
        getKoPopupOptions(): DevExpress.ui.dxPopup.Properties;
        private _getKoToolbarOptions;
        setToolbarItems(items: DevExpress.ui.dxToolbarItem[]): void;
        showPanel(): void;
        hidePanel(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import SequenceAction = DevExpress.Dashboard.SequenceAction;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DefaultDesignerToolbarItem = DevExpress.Dashboard.Internal.Designer.DefaultDesignerToolbarItem;
    import DesignerToolbarItem = DevExpress.Dashboard.Designer.DesignerToolbarItem;
    /**
     * @docid dxDashboardControlOptions.extensions.designerToolbar
     * @type object
     * @public
     */
    export interface DesignerToolbarExtensionOptions {
        /**
        * @docid dxDashboardControlOptions.extensions.designerToolbar.onPreparing
        * @extends Action
        * @type function(args)
        * @type_function_param1 args:object
        * @action
        * @public
        */
        onPreparing?: (args: DesignerToolbarArgs) => void;
        items?: Array<DevExpress.Dashboard.Designer.DesignerToolbarItem | string>;
    }
    export interface DesignerToolbarArgs {
        component: DevExpress.Dashboard.DashboardControl;
        dashboard: DevExpress.Dashboard.Model.Dashboard;
        items: Array<DevExpress.Dashboard.Designer.DesignerToolbarItem | string>;
    }
    export type DesignerToolbarExtensionEvents = {
        preparing: DesignerToolbarArgs;
    };
    export class DesignerToolbarExtension extends DisposableObject implements ISupportOptionExtension<DesignerToolbarExtensionOptions> {
        private _viewModel;
        private _dashboardControl;
        private _defaultItems;
        private _predefinedItems;
        name: string;
        template: DevExpress.Dashboard.KnockoutTemplate;
        designerToViewerAction: DevExpress.Dashboard.SequenceAction;
        viewerToDesignerAction: DevExpress.Dashboard.SequenceAction;
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<DesignerToolbarExtensionOptions, DesignerToolbarExtensionEvents>;
        on: DevExpress.Dashboard.Internal.EventSubscriber<DesignerToolbarExtensionEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<DesignerToolbarExtensionEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: DesignerToolbarExtensionOptions);
        private _extensionChangeSubscription;
        start(): void;
        stop(): void;
        private _unsubscribe;
        private _showPanelAsync;
        private _hidePanelAsync;
        _registerDefaultItems(defaultItems: DevExpress.Dashboard.Internal.Designer.DefaultDesignerToolbarItem[]): void;
        _unregisterDefaultItems(defaultItems: DevExpress.Dashboard.Internal.Designer.DefaultDesignerToolbarItem[]): void;
        _registerPredefinedItems(predefinedItems: DevExpress.Dashboard.Designer.DesignerToolbarItem[]): void;
        _unregisterPredefinedItems(predefinedItems: DevExpress.Dashboard.Designer.DesignerToolbarItem[]): void;
        _update(): void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import KeyEventType = DevExpress.Dashboard.KeyEventType;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    export class UndoRedoExtension extends DisposableObject {
        private dashboardControl;
        name: string;
        static readonly _toolbarItemsIndex = 0;
        private _undoEngine;
        private _predefinedToolbarItems;
        private _defaultToolbarItems;
        private _toolboxToolbarGroup;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        reset(): void;
        processKeyEvent(keyEventType: DevExpress.Dashboard.KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
        private _controlOptionChangedHandler;
        start(): void;
        private _createToolbarItem;
        private _addToolbarItems;
        private _removeToolbarItems;
        undo(): void;
        redo(): void;
        undoEnabled(): boolean;
        redoEnabled(): boolean;
        stop(): void;
        private _onControlOptionChanged;
        private _beforeWindowUnloadHandler;
        private _setShowConfirmationDialog;
        private _onBeforeWindowUnload;
        isChanged: ko.Computed<boolean>;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import SequenceAction = DevExpress.Dashboard.SequenceAction;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ConfirmDialogViewModel = DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
    export class SaveDashboardExtension implements IExtension {
        private dashboardControl;
        private _menuItem;
        name: string;
        _confirmDialogViewModel: DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
        private _customTemplate;
        private _isDashboardDirty;
        canSaveDashboard: ko.Computed<boolean>;
        designerToViewerAction: DevExpress.Dashboard.SequenceAction;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        private get _toolboxExtension();
        private get _undoEngineExtension();
        performSaveDashboard(dashboardId: string, dashboardJson: string): JQueryPromise<any>;
        ensureDashboardSaved(action: () => void): void;
        _ensureDashboardSaved(): JQueryPromise<{}>;
        saveDashboard(): JQueryPromise<any>;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    export class CreateDashboardExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _newDashboardMenuItem;
        private _viewModel;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        showCreateNewDashboard: () => void;
        performCreateDashboard(dashboardName: string, dashboardJson: string): JQueryPromise<void>;
        private _createNewDashboard;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IDetailsPropertiesComposer = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposer;
    export class ItemFilterPropertiesComposer implements IDetailsPropertiesComposer<any> {
        dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser;
        constructor(dataSourceBrowser: DevExpress.Dashboard.Internal.DataSourceBrowser);
        composeTabs(item: DevExpress.Dashboard.Model.DataDashboardItem): Array<DevExpress.Dashboard.Internal.Designer.AccordionTab>;
        private _fillFilterTab;
        private _fillSimpleFilterTab;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import IDashboardItemMenu = DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu;
    export class FilterPanelExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _subscriptions;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        _contextMenuSubscriber(itemContextMenu: DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu): void;
        _updateContextMenu(menu: DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu, item: DevExpress.Dashboard.Model.DashboardItem): void;
        start(): void;
        stop(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import IDashboardItemMenu = DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu;
    export class InteractivityPanelExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _subscriptions;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        _contextMenuSubscriber(itemContextMenu: DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu): void;
        _updateContextMenu(menu: DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu, item: DevExpress.Dashboard.Model.DashboardItem): void;
        start(): void;
        stop(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    export class LayoutOptionEditorExtension extends DisposableObject implements IExtension {
        name: string;
        private _dashboardControl;
        static readonly _toolbarItemsIndex = 100;
        private _predefinedToolbarItems;
        private _defaultToolbarItems;
        private _refreshItems;
        private _disposeItems;
        private _extensionsChangeSubscription;
        private _dashboardSubscription;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        private _addToolbarItems;
        private _removeToolbarItems;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    export class OpenDashboardExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _menuItem;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        loadDashboard(dashboardId: string): JQueryPromise<any>;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    export class DashboardTitleEditorExtension extends DisposableObject implements IExtension {
        private dashboardControl;
        name: string;
        private _menuItem;
        private _titlePreviewViewModel;
        private _titleSettingsViewModel;
        private _perDashboardSubscriptions;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        dispose(): void;
        private _disposePerDashboardSubscriptions;
        private _updateTitleToolbar;
        private _createTitleSettings;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ParameterListEditorViewModel = DevExpress.Dashboard.Internal.Designer.ParameterListEditorViewModel;
    export class DashboardParameterEditorExtension implements IExtension {
        private dashboardControl;
        name: string;
        private _menuItem;
        _viewModel: DevExpress.Dashboard.Internal.Designer.ParameterListEditorViewModel;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        stop(): void;
        dashboard: ko.Computed<DevExpress.Dashboard.Model.Dashboard>;
    }
}
declare module DevExpress.Dashboard.Designer {
}
declare module DevExpress.Dashboard.Designer {
}
declare module DevExpress.Dashboard.Model {
    import SectionOptions = DevExpress.Dashboard.Designer.SectionOptions;
    import CustomPropertyMetadata = DevExpress.Dashboard.Model.CustomPropertyMetadata;
    import ICustomItemBinding = DevExpress.Dashboard.Model.ICustomItemBinding;
    import ICustomItemProperty = DevExpress.Dashboard.Model.ICustomItemProperty;
    export interface ICustomItemMetaData {
        bindings?: Array<DevExpress.Dashboard.Model.ICustomItemBinding>;
        properties?: Array<DevExpress.Dashboard.Model.ICustomItemProperty>;
        optionsPanelSections?: Array<DevExpress.Dashboard.Designer.SectionOptions>;
        customProperties?: Array<DevExpress.Dashboard.Model.CustomPropertyMetadata>;
        interactivity?: {
            filter?: boolean;
            drillDown?: boolean;
        };
        index?: number;
        groupName?: string;
        icon: string;
        title: string;
    }
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    export class SliceTable extends SerializableModel {
        private _dataItemProvider;
        constructor(_dataItemProvider: DevExpress.Dashboard.Internal.Model.IDataItemProvider, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        push(bindings: Array<DevExpress.Dashboard.Model.DataItemLink>, dataItemType: string): void;
        dimensions: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        measures: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        name: ko.Observable<string>;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import SectionOptions = DevExpress.Dashboard.Designer.SectionOptions;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import CustomPropertyMetadata = DevExpress.Dashboard.Model.CustomPropertyMetadata;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemColoringOptions = DevExpress.Dashboard.Model.DashboardItemColoringOptions;
    import ICustomItemBinding = DevExpress.Dashboard.Model.ICustomItemBinding;
    import ICustomItemBindingValue = DevExpress.Dashboard.Model.ICustomItemBindingValue;
    import ICustomDataRow = DevExpress.Dashboard.Model.ICustomDataRow;
    import ICustomItemMetaData = DevExpress.Dashboard.Model.ICustomItemMetaData;
    import ICustomItemProperty = DevExpress.Dashboard.Model.ICustomItemProperty;
    import SliceTable = DevExpress.Dashboard.Model.SliceTable;
    export class CustomItem extends DataDashboardItem {
        private _meta;
        static ItemType: string;
        static getPropertyInfo(p: DevExpress.Dashboard.Model.ICustomItemProperty): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
        static _getBindingLinkName(propertyName: string): string;
        private static _getSerializationsInfo;
        private static _hasInteractivityTargets;
        private static _hasColoringDimensions;
        private static _hasColoringMeasures;
        private static _isFilterAllowed;
        private static _isDrillDownAllowed;
        private static _getInfo;
        colorScheme: ko.ObservableArray<DevExpress.Dashboard.Model.ColorSchemeEntry>;
        coloringOptions: DevExpress.Dashboard.Model.DashboardItemColoringOptions;
        customItemType: ko.Observable<string>;
        sliceTables: ko.ObservableArray<DevExpress.Dashboard.Model.SliceTable>;
        interactivityOptions: any;
        interactivityTargets: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        coloringDimensions: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        coloringMeasures: ko.ObservableArray<DevExpress.Dashboard.Model.DataItemLink>;
        customMetadata: {};
        constructor(_meta: DevExpress.Dashboard.Model.ICustomItemMetaData, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        _clearBindings(): void;
        getBindingValue(propertyName: string, index?: number): Array<DevExpress.Dashboard.Model.ICustomItemBindingValue>;
        iterateData(action: (item: DevExpress.Dashboard.Model.ICustomDataRow) => any, sliceTableName?: string): void;
        protected _getDefaultItemType(): string;
        private _getSliceTable;
        _getAllSelectionValues(activeDimensions: Array<string>): any[];
        private getSlice;
        private _getStorage;
        private _getValidIds;
        private _getColor;
        private _getColorMeasureId;
        private _getMeasureValue;
        private _getMeasureDisplayText;
        private _getDimensionUniqueValue;
        private _getDimensionValue;
        private _getDimensionDisplayText;
        private _format;
        private _getServerText;
        private _getSpecialValue;
        private _getValueBySliceKey;
        _isExcludingAllFilter: ko.Computed<boolean>;
        get customBindings(): Array<DevExpress.Dashboard.Model.ICustomItemBinding>;
        get legacyCustomProperties(): Array<DevExpress.Dashboard.Model.ICustomItemProperty>;
        get customInteractivity(): any;
        get _optionsPanelSections(): Array<DevExpress.Dashboard.Designer.SectionOptions>;
        protected _getMasterFilterMode(): string;
        protected _getDrillDownEnabled(): boolean;
        protected _getIgnoreMasterFilter(): boolean;
        protected _getInteractivityDimensionLinks(): DevExpress.Dashboard.Model.DataItemLink[];
        protected _getIsVisualInteractivitySupported(): boolean;
        isDrillDownAllowed(): boolean;
        isFilterAllowed(): boolean;
        _isInteractivityAllowed(): boolean;
        protected _getCanColorByMeasures(): boolean;
        protected _getCanColorByDimensions(): boolean;
        _getColorizableDataItemsInfo(): Array<{
            items: Array<DevExpress.Dashboard.Model.DataItemLink>;
            prefixId: string;
        }>;
        _getDefaultCalculationWindowDefinition(): DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        static _getCustomPropertiesSerializationInfo(customItemType: string, dynamicCustomPropertiesMetadata: Array<DevExpress.Dashboard.Model.CustomPropertyMetadata>): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    }
}
declare module DevExpress.Dashboard {
    import DxElement = DevExpress.core.DxElement;
    import CustomPropertyValueType = DevExpress.Dashboard.Model.CustomPropertyValueType;
    import ICustomItemBindingValue = DevExpress.Dashboard.Model.ICustomItemBindingValue;
    import CustomItem = DevExpress.Dashboard.Model.CustomItem;
    import ICustomDataRow = DevExpress.Dashboard.Model.ICustomDataRow;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    export class CustomItemViewer extends baseItem {
        private model;
        constructor(model: DevExpress.Dashboard.Model.CustomItem, container: DevExpress.core.DxElement, options: any);
        contentWidth(): number;
        contentHeight(): number;
        setSize(width: number, height: number): void;
        protected _renderContent(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        renderContent(element: DevExpress.core.DxElement, changeExisting: boolean, afterRenderCallback?: any): void;
        dispose(): void;
        clearSelection(): void;
        setSelection(values: Array<Array<any>>): void;
        allowExportSingleItem(): boolean;
        getExportInfo(): CustomItemExportInfo;
        getMasterFilterMode(): string;
        getBindingValue(propertyName: string, index?: number): Array<DevExpress.Dashboard.Model.ICustomItemBindingValue>;
        getPropertyValue(propertyName: string): DevExpress.Dashboard.Model.CustomPropertyValueType;
        subscribe(propertyName: string, callback: (newValue: any) => void): any;
        iterateData: (action: (item: DevExpress.Dashboard.Model.ICustomDataRow) => void) => void;
        isSelected(row: DevExpress.Dashboard.Model.ICustomDataRow): boolean;
        canMasterFilter: (row?: DevExpress.Dashboard.Model.ICustomDataRow) => boolean;
        canDrillDown: (row?: DevExpress.Dashboard.Model.ICustomDataRow) => boolean;
        setMasterFilter: (row: DevExpress.Dashboard.Model.ICustomDataRow) => boolean;
        drillDown: (row: DevExpress.Dashboard.Model.ICustomDataRow) => boolean;
        getInfo(): any;
        initializeData(newOptions: any): void;
        protected _initializeData(newOptions: any): void;
        private _prepareRow;
        private _getUniqueValues;
        protected _isSupportDataAwareExport(): boolean;
    }
    export interface CustomItemExportInfo {
        image: string;
    }
    export class customViewerItem extends CustomItemViewer {
    }
}
declare module DevExpress.Dashboard {
    import DxElement = DevExpress.core.DxElement;
    import CustomItemViewer = DevExpress.Dashboard.CustomItemViewer;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import CustomItem = DevExpress.Dashboard.Model.CustomItem;
    import ICustomItemMetaData = DevExpress.Dashboard.Model.ICustomItemMetaData;
    export interface DashboardContainer {
        id: string;
        dashboard: DevExpress.Dashboard.Model.Dashboard;
    }
    export type ErrorInfo = JQueryXHR | string;
    export interface IExtension {
        name: string;
        start?(): void;
        stop?(): void;
        processKeyEvent?(keyEventType: KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
        designerToViewerAction?: SequenceAction;
        viewerToDesignerAction?: SequenceAction;
    }
    export interface ICustomItemExtension extends IExtension {
        metaData: DevExpress.Dashboard.Model.ICustomItemMetaData;
        createViewerItem: (item: DevExpress.Dashboard.Model.CustomItem, element: DevExpress.core.DxElement, content: any) => DevExpress.Dashboard.CustomItemViewer;
    }
    export type KeyEventType = "keyup" | "keydown";
    export interface KnockoutTemplate {
        name: string;
        data?: any;
    }
    export interface WorkingModeSwitchingOptions {
        surfaceLeft?: number;
        surfaceTop?: number;
    }
    export interface SequenceAction {
        orderNo: number;
        action: (options: WorkingModeSwitchingOptions) => JQueryPromise<any>;
    }
    export interface IRemoteService<TResponse = any> {
        getFromServer: (url: string, data?: Object, queryOptions?: Object, abortController?: AbortController) => TResponse;
        postToServer: (url: string, data?: Object, abortController?: AbortController) => TResponse;
        performPostback: (url: string, args: Object, abortController?: AbortController) => JQueryPromise<any>;
    }
    export interface AjaxRemoteServiceOptions {
        /**
         * @docid dxDashboardControlOptions.ajaxRemoteService.beforeSend
         * @type function
         * @type_function_param1 jqXHR:object
         * @type_function_param2 settings:object
         * @public
         */
        beforeSend?: (jqXHR: JQueryXHR, settings: JQueryAjaxSettings) => any;
        /**
         * @docid dxDashboardControlOptions.ajaxRemoteService.complete
         * @type function
         * @type_function_param1 jqXHR:object
         * @type_function_param2 textStatus:string
         * @public
         */
        complete?: (jqXHR: JQueryXHR, textStatus: string) => any;
        /**
         * @docid dxDashboardControlOptions.ajaxRemoteService.headers
         * @type object
         * @public
         */
        headers?: {
            [key: string]: any;
        };
    }
    export interface FetchRemoteServiceOptions {
        /**
         * @docid dxDashboardControlOptions.fetchRemoteService.headers
         * @type object
         * @public
         */
        headers?: {
            [key: string]: any;
        };
        /**
         * @docid dxDashboardControlOptions.fetchRemoteService.beforeSend
         * @type function
         * @type_function_param1 settings:object
         * @public
         */
        beforeSend?: (settings: RequestInit) => void;
    }
    export interface DashboardInfo {
        id: string;
        name: string;
    }
}
declare module DevExpress.Dashboard.Internal {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ISizeController = DevExpress.Dashboard.Internal.ISizeController;
    export function createItemSizeUpdater(item: DevExpress.Dashboard.Internal.Viewer.baseItem, sizeController: DevExpress.Dashboard.Internal.ISizeController): DevExpress.Dashboard.Model.IDisposable;
    export function createElementSizeUpdater(element: HTMLElement, sizeController: DevExpress.Dashboard.Internal.ISizeController): {
        dispose: () => JQueryCallback;
    };
    export function setElementSize(element: HTMLElement, sizeController: DevExpress.Dashboard.Internal.ISizeController): void;
}
declare module DevExpress.Dashboard.Internal {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import ISizeController = DevExpress.Dashboard.Internal.ISizeController;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
    export let DashboardItemHeaderHeight: number;
    export interface IDashboardItemBindings {
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
        dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext;
        localContext: DevExpress.Dashboard.Internal.IDashboardItemContext;
        sizeController: DevExpress.Dashboard.Internal.ISizeController;
    }
    export class DashboardUIItemStateController extends DisposableObject {
        private _element;
        private _dashboardItem;
        private _sizeController;
        private _bindingContext;
        private _renderDashboardItem;
        private _additionalClasses;
        private _perUiStateSubscriptions;
        constructor(_element: HTMLElement, _dashboardItem: DevExpress.Dashboard.Model.DashboardItem, _sizeController: DevExpress.Dashboard.Internal.ISizeController, _bindingContext: ko.BindingContext, _renderDashboardItem: () => DevExpress.Dashboard.Model.DisposableType, _additionalClasses?: string[]);
        render(): void;
        _renderDashboardItemState: () => void;
        dispose(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    export class GroupViewModel extends DisposableObject {
        defaultPadding: number;
        constructor(params: {
            layoutItem: ko.Subscribable<DevExpress.Dashboard.Internal.LayoutItem> | DevExpress.Dashboard.Internal.LayoutItem;
        });
        padding: ko.Observable<number>;
        headerHeight: ko.Observable<number>;
        layoutItem: ko.Computed<DevExpress.Dashboard.Internal.LayoutItem>;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import SingleTabItemSizeController = DevExpress.Dashboard.Internal.SingleTabItemSizeController;
    import DashboardItemContext = DevExpress.Dashboard.Internal.DashboardItemContext;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    export interface PageBinding {
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
        pageDashboardItem: DevExpress.Dashboard.Model.DashboardTabPage;
        id: string;
        sizeController: DevExpress.Dashboard.Internal.SingleTabItemSizeController;
        context: any;
        localContext: DevExpress.Dashboard.Internal.DashboardItemContext;
        ignoreBorder: ko.Observable<boolean>;
    }
    export class DashboardTabsViewModel extends DisposableObject {
        layoutItem: DevExpress.Dashboard.Internal.LayoutItem;
        headerHeight: ko.Observable<number>;
        private element;
        showMenu: ko.Observable<boolean>;
        tabPageBindings: ko.ObservableArray<PageBinding>;
        selectedItemKeys: ko.ObservableArray<string>;
        showAddButton: ko.Computed<any>;
        private _defaultButtonWidth;
        private _tabsInfoCache;
        private _toolbarCache;
        private headersViewModel;
        private get viewModel();
        private get showCaption();
        private get _containerSizeController();
        constructor(layoutItem: DevExpress.Dashboard.Internal.LayoutItem, headerHeight: ko.Observable<number>, element: HTMLElement);
        toggleMenu(bindings: any, args: any): void;
        createTabPage(): void;
        onSelectionChanged(e: any): void;
        private _syncTabPageBindings;
        private _initialize;
        private _createMenuToolbarItem;
        private _getSelectedKeys;
        private _createPageBinding;
        private _prepareLocalContext;
        private _onContainerRepaint;
        private _onToolbarUpdated;
        private _updateTabHeaders;
    }
}
declare module DevExpress.Dashboard.Internal {
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import GroupViewModel = DevExpress.Dashboard.Internal.GroupViewModel;
    export class TabContainerViewModel extends GroupViewModel {
        activeItems: ko.ObservableArray<DevExpress.Dashboard.Internal.LayoutItem>;
        private _activeItemsUpdateDebounced;
        constructor(params: {
            layoutItem: ko.Observable<DevExpress.Dashboard.Internal.LayoutItem> | DevExpress.Dashboard.Internal.LayoutItem;
        });
        private _updateActiveItems;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
    export interface IStandaloneItemBindings {
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
        dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext;
        localContext: DevExpress.Dashboard.Internal.IDashboardItemContext;
        repaintRequest: JQueryCallback;
    }
}
declare module DevExpress.Dashboard {
}
declare module DevExpress.Dashboard {
    import DxElement = DevExpress.core.DxElement;
    import dxDataGrid = DevExpress.ui.dxDataGrid;
    import dxPopup = DevExpress.ui.dxPopup;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import DashboardOptionChangedArgs = DevExpress.Dashboard.DashboardOptionChangedArgs;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DashboardControlActions = DevExpress.Dashboard.Internal.DashboardControlActions;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    export type InspectedType = "Aggregated" | "Raw";
    export interface DataInspectorDialogArgs {
        component: DevExpress.ui.dxPopup;
        element: DevExpress.core.DxElement;
    }
    export interface DataInspectorGridArgs {
        component: DevExpress.ui.dxDataGrid;
        element: DevExpress.core.DxElement;
    }
    /**
     * @docid dxDashboardControlOptions.extensions.dataInspector
     * @type object
     * @public
     */
    export interface DataInspectorExtensionOptions {
        /**
        * @docid dxDashboardControlOptions.extensions.dataInspector.allowInspectAggregatedData
        * @type boolean
        * @default false
        * @public
        */
        allowInspectAggregatedData?: boolean;
        /**
     * @docid dxDashboardControlOptions.extensions.dataInspector.allowInspectRawData
     * @type boolean
     * @default false
     * @public
     */
        allowInspectRawData?: boolean;
        /**
        * @docid dxDashboardControlOptions.extensions.dataInspector.onDialogShowing
        * @extends Action
        * @type function(args)
        * @type_function_param1 args:object
        * @action
        * @public
        */
        onDialogShowing?: (args: DataInspectorDialogArgs) => void;
        /**
        * @docid dxDashboardControlOptions.extensions.dataInspector.onDialogShown
        * @extends Action
        * @type function(args)
        * @type_function_param1 args:object
        * @action
        * @public
        */
        onDialogShown?: (args: DataInspectorDialogArgs) => void;
        /**
        * @docid dxDashboardControlOptions.extensions.dataInspector.onDialogHidden
        * @extends Action
        * @type function(args)
        * @type_function_param1 args:object
        * @action
        * @public
        */
        onDialogHidden?: (args: DataInspectorDialogArgs) => void;
        /**
        * @docid dxDashboardControlOptions.extensions.dataInspector.onGridInitialized
        * @extends Action
        * @type function(args)
        * @type_function_param1 args:object
        * @action
        * @public
        */
        onGridInitialized?: (args: DataInspectorGridArgs) => void;
        /**
        * @docid dxDashboardControlOptions.extensions.dataInspector.onGridContentReady
        * @extends Action
        * @type function(args)
        * @type_function_param1 args:object
        * @action
        * @public
        */
        onGridContentReady?: (args: DataInspectorGridArgs) => void;
    }
    export type DataInspectorExtensionEvents = {
        dialogShowing: DataInspectorDialogArgs;
        dialogShown: DataInspectorDialogArgs;
        dialogHidden: DataInspectorDialogArgs;
        gridInitialized: DataInspectorGridArgs;
        gridContentReady: DataInspectorGridArgs;
    };
    export class DataInspectorExtension extends DisposableObject implements ISupportOptionExtension<DataInspectorExtensionOptions> {
        private _dashboardControl;
        private readonly _viewModel;
        private readonly _customTemplate;
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<DataInspectorExtensionOptions, DataInspectorExtensionEvents>;
        private _defaultOptions;
        name: string;
        on: DevExpress.Dashboard.Internal.EventSubscriber<DataInspectorExtensionEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<DataInspectorExtensionEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: DataInspectorExtensionOptions);
        _optionChanged(args: DevExpress.Dashboard.DashboardOptionChangedArgs<DataInspectorExtensionOptions>): DevExpress.Dashboard.Internal.DashboardControlActions;
        _addContextToolbarItem: (toolbarOptions: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions, dashboardItem: DevExpress.Dashboard.Model.DashboardItem) => void;
        start(): void;
        stop(): void;
        showDataInspector(dashboardItemName: string, inspectedType?: InspectedType): void;
        currentInspectedType(): InspectedType;
        hideDataInspector(): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    export function getSortedAxes(itemData: DevExpress.Dashboard.Internal.Data.itemData, skipSparklineAxis?: boolean): DevExpress.Dashboard.Data.ItemDataAxisName[];
    export function getMeasureColumns(itemData: DevExpress.Dashboard.Internal.Data.itemData): DevExpress.Dashboard.Data.ItemDataMeasure[];
    export function getSortedColumns(itemData: DevExpress.Dashboard.Internal.Data.itemData): string[];
}
declare module DevExpress.Dashboard.Internal {
    import ItemDataDimension = DevExpress.Dashboard.Data.ItemDataDimension;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import GridDataSourceInfo = DevExpress.Dashboard.Internal.GridDataSourceInfo;
    export interface AggregatedDataSourceArgs {
        addSparklineTotal: boolean;
        sparklineMeasures: string[];
    }
    export function generateAggregatedSource(itemData: DevExpress.Dashboard.Internal.Data.itemData, args: AggregatedDataSourceArgs): DevExpress.Dashboard.Internal.GridDataSourceInfo;
    export function dataInspectorItemDataDimensionComparer(x: DevExpress.Dashboard.Data.ItemDataDimension, y: DevExpress.Dashboard.Data.ItemDataDimension, data: DevExpress.Dashboard.Internal.Data.itemData): boolean;
    export function dataInspectorItemDataMeasureComparer(x: DevExpress.Dashboard.Data.ItemDataMeasure, y: DevExpress.Dashboard.Data.ItemDataMeasure, data: DevExpress.Dashboard.Internal.Data.itemData, addSparklineTotal: boolean, sparklineMeasures: string[]): boolean;
}
declare module DevExpress.Dashboard.Internal {
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IUnderlyingDataProvider = DevExpress.Dashboard.Internal.Data.IUnderlyingDataProvider;
    import GridDataSourceInfo = DevExpress.Dashboard.Internal.GridDataSourceInfo;
    export function generateUnderlyingDataSource(underlyingDataProvider: DevExpress.Dashboard.Internal.Data.IUnderlyingDataProvider, dashbordItem: DevExpress.Dashboard.Model.DataDashboardItem): DevExpress.Dashboard.Internal.GridDataSourceInfo;
}
declare module DevExpress.Dashboard.Internal {
    import CustomStore = DevExpress.data.CustomStore;
    import dxDataGridColumn = DevExpress.ui.dxDataGridColumn;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IUnderlyingDataProvider = DevExpress.Dashboard.Internal.Data.IUnderlyingDataProvider;
    import DataInspectorDialogArgs = DevExpress.Dashboard.DataInspectorDialogArgs;
    import DataInspectorGridArgs = DevExpress.Dashboard.DataInspectorGridArgs;
    import InspectedType = DevExpress.Dashboard.InspectedType;
    import AggregatedDataSourceArgs = DevExpress.Dashboard.Internal.AggregatedDataSourceArgs;
    export interface GridDataSourceInfo {
        columns: DevExpress.ui.dxDataGridColumn[];
        data: DevExpress.data.CustomStore | Array<Object>;
        customizeColumns: (columns: Array<DevExpress.ui.dxDataGridColumn>) => void;
    }
    export class DataInspectorViewModelOptions {
        getContainer?: () => HTMLElement;
        onGridContentReady?: (e: DevExpress.Dashboard.DataInspectorGridArgs) => void;
        onGridInitialized?: (e: DevExpress.Dashboard.DataInspectorGridArgs) => void;
        onDialogShowing?: (args: DevExpress.Dashboard.DataInspectorDialogArgs) => void;
        onDialogShown?: (args: DevExpress.Dashboard.DataInspectorDialogArgs) => void;
        onDialogHidden?: (args: DevExpress.Dashboard.DataInspectorDialogArgs) => void;
    }
    export class DataInspectorViewModel {
        options: DataInspectorViewModelOptions;
        _dashboardItem: ko.Observable<DevExpress.Dashboard.Model.DataDashboardItem>;
        _rawDataSource: GridDataSourceInfo;
        _aggregatedDataSource: GridDataSourceInfo;
        readonly avaliableInspectedDataType: Array<{
            value: DevExpress.Dashboard.InspectedType;
            text: string;
        }>;
        allowSwitchInspectedDataType: ko.Observable<boolean>;
        inspectedDataType: ko.Observable<DevExpress.Dashboard.InspectedType>;
        title: ko.Computed<string>;
        visible: ko.Observable<boolean>;
        container: ko.Observable<HTMLElement>;
        underlyingDataProvider: DevExpress.Dashboard.Internal.Data.IUnderlyingDataProvider;
        gridDataSource: ko.Observable<GridDataSourceInfo>;
        gridOptions: ko.Computed<Object>;
        closeButtonStylingMode: string;
        closeButtonType: string;
        constructor(options: DataInspectorViewModelOptions);
        setUnderlyingDataProvider(underlyingDataProvider?: DevExpress.Dashboard.Internal.Data.IUnderlyingDataProvider): void;
        _bindGrid(): void;
        _clearDataSource(): void;
        _getInitialMode(allowInspectAggregatedData: boolean, allowInspectRawData: boolean, initialMode: DevExpress.Dashboard.InspectedType, prevMode: DevExpress.Dashboard.InspectedType): DevExpress.Dashboard.InspectedType;
        _getRawDataSource(dashbordItem: DevExpress.Dashboard.Model.DataDashboardItem): GridDataSourceInfo;
        _getAggregatedDataSource(dashbordItem: DevExpress.Dashboard.Model.DataDashboardItem): GridDataSourceInfo;
        _getAggregatedDataSourceArgs(dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem): DevExpress.Dashboard.Internal.AggregatedDataSourceArgs;
        _getPopupOptions(): {
            container: ko.Observable<HTMLElement>;
            title: ko.Computed<string>;
            onShowing: (args: DevExpress.Dashboard.DataInspectorDialogArgs) => void;
            onShown: (args: DevExpress.Dashboard.DataInspectorDialogArgs) => void;
            onHidden: (args: DevExpress.Dashboard.DataInspectorDialogArgs) => void;
            visible: ko.Observable<boolean>;
            fullScreen: boolean;
            height: string;
            position: {
                my: string;
                at: string;
                of: (Window & typeof globalThis) | ko.Observable<HTMLElement>;
            };
            toolbarItems: {
                toolbar: string;
                location: string;
                widget: string;
                options: {
                    text: any;
                    onClick: () => any;
                    stylingMode: string;
                    type: string;
                };
            }[];
            wrapperAttr: {
                class: string;
            };
            showCloseButton: boolean;
        };
        get isMobile(): boolean;
        show(dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, allowInspectAggregatedData: boolean, allowInspectRawData: boolean, initialMode?: DevExpress.Dashboard.InspectedType): void;
    }
}
declare module DevExpress.Dashboard.Internal {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    import DashboardItemContext = DevExpress.Dashboard.Internal.DashboardItemContext;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    export class MobileLayoutItemViewModel {
        dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext;
        repaintRequest: JQueryCallback;
        dashboardItem: DevExpress.Dashboard.Model.DashboardItem;
        private _fullscreenItemModel;
        _cachedItemWidth: number;
        _swipeToActionCoef: number;
        itemOffsetInPixels: ko.Observable<number>;
        actionReadyCoef: ko.Computed<number>;
        isReadyForAction: ko.Computed<boolean>;
        maximizeIconOpacity: ko.Computed<number>;
        get canMaximizeItem(): boolean;
        _reset(): void;
        constructor(dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext, repaintRequest: JQueryCallback, dashboardItem: DevExpress.Dashboard.Model.DashboardItem, _fullscreenItemModel: DevExpress.Dashboard.Internal.FullscreenItemModel);
        _performShowFullscreenItem(): void;
        click: (data: any, args: any) => void;
        selectItem: (data: any, args: any) => void;
        unselectItem: (data: any, args: any) => void;
        swipestart: (data: any, args: any) => void;
        swipeupdate: (data: any, args: any) => void;
        swipeend: (data: any, args: any) => void;
        localContext: DevExpress.Dashboard.Internal.DashboardItemContext;
        _getStandaloneItemElement(element: HTMLElement): HTMLElement;
    }
    export function setCardAutoArrangementMode(item: DevExpress.Dashboard.Model.DashboardItem, options: any): void;
    export function customizeMobileViewerItems(viewerItem: DevExpress.Dashboard.Internal.Viewer.baseItem): void;
}
declare module DevExpress.Dashboard.Internal {
    import IMasterFilterItemsProvider = DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IStandaloneItemBindings = DevExpress.Dashboard.Internal.IStandaloneItemBindings;
    export class MasterFiltersEditorModel {
        addFilterButton(toolbarItems: Array<DevExpress.Dashboard.ViewerToolbarItem>, filterableItem: DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider): any;
        _target: ko.Observable<DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider>;
        _visible: ko.Observable<boolean>;
        visible: ko.Computed<boolean>;
        masterItems: ko.Computed<any>;
        show(target: DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider): void;
        hide(): void;
    }
    export interface IDisplayFilterValue {
        name: string;
        valuesString: string;
    }
    export class ItemMasterFilterInfo {
        private dashboardItem;
        click: () => void;
        static maxFilterValuesCount: 10;
        constructor(dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, click: () => void);
        name: ko.Computed<string>;
        filterValues: ko.Computed<Array<IDisplayFilterValue>>;
    }
    class ItemMasterFilterPopupViewModel {
        constructor(heightOffset: number, visible: ko.Subscribable<boolean>, repaintRequest: JQueryCallback);
        visible: ko.Subscribable<boolean>;
        width: string;
        height: string;
        onInitializing: (e: any) => void;
        onDisposing: (e: any) => void;
    }
    export class ItemMasterFiltersViewModel {
        private model;
        constructor(model: MasterFiltersEditorModel, dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext, repaintRequest: JQueryCallback);
        masterItems: ko.Computed<Array<ItemMasterFilterInfo>>;
        masterFilterItem: ko.Observable<DevExpress.Dashboard.Internal.IStandaloneItemBindings>;
        showMasterFilterItem: (dashboardItem: DevExpress.Dashboard.Model.DataDashboardItem, dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext, repaintRequest: JQueryCallback) => void;
        closeMasterFilterItemPopup: () => void;
        closeMasterFiltersPopup: () => void;
        maximizeFiltersPopup: ko.Observable<boolean>;
        masterFiltersPopup: ItemMasterFilterPopupViewModel;
        masterFilterMaximizedItemPopup: ItemMasterFilterPopupViewModel;
    }
    export {};
}
declare module DevExpress.Dashboard.Internal {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemFactory = DevExpress.Dashboard.Internal.Viewer.ViewerItemFactory;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    import MasterFiltersEditorModel = DevExpress.Dashboard.Internal.MasterFiltersEditorModel;
    export class MobileItemViewerFactory extends ViewerItemFactory {
        createItem(container: HTMLElement, options: any): DevExpress.Dashboard.Internal.Viewer.baseItem;
    }
    export class PopupResizeController {
        private _repaintRequest;
        private _resizeHandler;
        constructor(_repaintRequest: JQueryCallback);
        onInitialized: (e: any) => void;
        onDisposing: (e: any) => void;
    }
    export var createFullscreenItemViewModel: (fullscreenItemModel: DevExpress.Dashboard.Internal.FullscreenItemModel, masterFilters: DevExpress.Dashboard.Internal.MasterFiltersEditorModel, repaintRequest: JQueryCallback) => Object;
}
declare module DevExpress.Dashboard.Internal {
    import dxList = DevExpress.ui.dxList;
    import dxListOptions = DevExpress.ui.dxList.Properties;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import IExtension = DevExpress.Dashboard.IExtension;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    import DashboardLayoutController = DevExpress.Dashboard.Internal.DashboardLayoutController;
    import VisibleItemsProvider = DevExpress.Dashboard.Internal.VisibleItemsProvider;
    import ViewerApi = DevExpress.Dashboard.Internal.ViewerApi;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import DashboardTitleContext = DevExpress.Dashboard.Internal.DashboardTitleContext;
    import MasterFiltersEditorModel = DevExpress.Dashboard.Internal.MasterFiltersEditorModel;
    export class DashboardMobileLayoutController implements DashboardLayoutController {
        dashboard: DevExpress.Dashboard.Model.Dashboard;
        dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext;
        private _encodeHtml;
        fullscreenItemModel: DevExpress.Dashboard.Internal.FullscreenItemModel;
        masterFiltersEditorModel: DevExpress.Dashboard.Internal.MasterFiltersEditorModel;
        dashboardTitleContext: DevExpress.Dashboard.Internal.DashboardTitleContext;
        selectedDashboardItem: ko.Computed<any>;
        emptyItemTemplates: ko.ObservableArray<DevExpress.Dashboard.KnockoutTemplate>;
        selectedLayoutItem: ko.Computed<any>;
        get allowMaximizeItems(): boolean;
        set allowMaximizeItems(value: boolean);
        get fullscreenItemProvider(): DevExpress.Dashboard.Internal.FullscreenItemModel;
        visibleItemsProvider: DevExpress.Dashboard.Internal.VisibleItemsProvider;
        constructor(dashboard: DevExpress.Dashboard.Model.Dashboard, dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext, findExtension: (name: string) => DevExpress.Dashboard.IExtension, _encodeHtml: boolean, viewerApi: DevExpress.Dashboard.Internal.ViewerApi);
        private _getDashboardItemsInLayoutOrder;
        private _getGroupName;
        private _getGroupComponentName;
        private _getParentTabContainer;
        items: Array<DashboardMobileLayoutItem>;
    }
    export class DashboardMobileLayoutItem {
        dashboardItems: Array<DevExpress.Dashboard.Model.DashboardItem>;
        groupName: string;
        constructor(dashboardItems: Array<DevExpress.Dashboard.Model.DashboardItem>, groupName: string);
    }
    export interface FlatMobileLayoutItem {
        groupName: string;
        groupComponentName: string;
        itemComponentName: string;
    }
    export interface GroupedMobileLayoutItem {
        groupName: string;
        groupComponentName: string;
        itemComponentNames: Array<string>;
    }
    export function groupLayoutItems(flatItems: Array<FlatMobileLayoutItem>): Array<GroupedMobileLayoutItem>;
    export type MobileLayoutKoComponentArgs = {
        dashboard: DevExpress.Dashboard.Model.Dashboard;
        dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext;
        dashboardTitleContext: DevExpress.Dashboard.Internal.DashboardTitleContext;
        masterFiltersEditorModel: DevExpress.Dashboard.Internal.MasterFiltersEditorModel;
        fullscreenItemModel: DevExpress.Dashboard.Internal.FullscreenItemModel;
        items: DashboardMobileLayoutItem[];
    };
    export let ungroupedItemKey: string;
    export let groupWithoutCaptionItemKey: string;
    export let dashboardTitleKey: string;
    export var createLayoutViewModel: (element: Element, listSize: {
        width: number;
        height: number;
    }, dashboardContext: DevExpress.Dashboard.Internal.IDashboardContext, repaintRequest: JQueryCallback, items: DashboardMobileLayoutItem[], fullscreenItemModel: DevExpress.Dashboard.Internal.FullscreenItemModel, getWidgetCallback: (widget: DevExpress.ui.dxList) => void, titleViewModel: any, titleVisible: boolean) => DevExpress.ui.dxList.Properties;
}
declare module DevExpress.Dashboard {
}
declare module DevExpress.Dashboard {
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    export type MobileLayoutMode = "Always" | "Auto" | "Never";
    /**
     * @docid dxDashboardControlOptions.extensions.mobileLayout
     * @type object
     * @public
     */
    export interface MobileLayoutExtensionOptions {
        /**
       * @docid dxDashboardControlOptions.extensions.mobileLayout.mobileLayoutEnabled
       * @type string
       * @default 'Auto'
       * @public
       */
        mobileLayoutEnabled?: MobileLayoutMode;
    }
    export class MobileLayoutExtension implements ISupportOptionExtension<MobileLayoutExtensionOptions> {
        private dashboardControl;
        name: string;
        _disposables: DevExpress.Dashboard.Model.DisposableType[];
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<MobileLayoutExtensionOptions, any>;
        _mobileLayoutEnabledOption: ko.Observable<any>;
        mobileLayoutEnabled: ko.Computed<boolean>;
        private _canMobileLayoutBeEnabled;
        private _isMobileLayoutModeExpected;
        readonly _defaultOptions: MobileLayoutExtensionOptions;
        readonly _mobileLayoutTemplateName: string;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: MobileLayoutExtensionOptions);
        private _optionChanged;
        start(): void;
        _dashboardList: any[];
        stop(): void;
    }
}
declare module DevExpress.Dashboard {
    import CancellationToken = DevExpress.Dashboard.Internal.CancellationToken;
    import DashboardInfo = DevExpress.Dashboard.DashboardInfo;
    import IExtension = DevExpress.Dashboard.IExtension;
    import SequenceAction = DevExpress.Dashboard.SequenceAction;
    import WorkingModeSwitchingOptions = DevExpress.Dashboard.WorkingModeSwitchingOptions;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    export class DashboardPanelExtension implements IExtension {
        private dashboardControl;
        private options;
        name: string;
        private _customTemplate;
        private _iconBack;
        private _flexParent;
        private _dashboardsButton;
        private _dashboardTruncated;
        private _ellipsisText;
        private _itemTemplate;
        private _isMobile;
        private _disposables;
        panelWidth: number;
        visible: ko.Observable<boolean>;
        allowSwitchToDesigner: ko.Observable<boolean>;
        designerToViewerAction: DevExpress.Dashboard.SequenceAction;
        viewerToDesignerAction: DevExpress.Dashboard.SequenceAction;
        selectedItemKeys: ko.ObservableArray<string>;
        availableDashboards: ko.ObservableArray<DevExpress.Dashboard.DashboardInfo>;
        private _actualPanelWidth;
        private get _templateName();
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: DashboardPanelExtensionOptions);
        start(): void;
        stop(): void;
        updateDashboardsList(): void;
        private _validateSelection;
        private _hidePanel;
        showPanelAsync: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions) => JQueryPromise<{}>;
        _showPanelAsync: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions, cancellationToken: DevExpress.Dashboard.Internal.CancellationToken) => JQueryPromise<DevExpress.Dashboard.WorkingModeSwitchingOptions>;
        hidePanelAsync: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions) => JQueryPromise<{}>;
        _hidePanelAsync: (options: DevExpress.Dashboard.WorkingModeSwitchingOptions, cancellationToken: DevExpress.Dashboard.Internal.CancellationToken) => JQueryPromise<{}>;
        switchToViewer: () => void;
        switchToDesigner: () => void;
        private _getCustomTemplate;
    }
    export interface DashboardPanelExtensionOptions {
        dashboardThumbnail?: string;
    }
}
declare module DevExpress.Dashboard {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    export interface UrlStateExtensionOptions {
        includeDashboardIdToUrl?: boolean;
        includeDashboardStateToUrl?: boolean;
    }
    export class UrlStateExtension extends DisposableObject implements IExtension {
        private _dashboardControl;
        private _dashboardContaierSubscriptions;
        private _options;
        private _defaultOptions;
        name: string;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: UrlStateExtensionOptions);
        start(): void;
        stop(): void;
        private _processDashboardChanged;
        private _updateDashboardState;
        private _updateUrl;
        private _replaceValue;
        protected _getUrl(): string;
        protected _setUrl(url: string): void;
    }
}
declare module DevExpress.Dashboard {
}
declare module DevExpress.Dashboard {
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardExportFormat = DevExpress.Dashboard.DashboardExportFormat;
    import DashboardChartExportSizeMode = DevExpress.Dashboard.DashboardChartExportSizeMode;
    import DashboardExcelExportOptions = DevExpress.Dashboard.DashboardExcelExportOptions;
    import DashboardExcelFormat = DevExpress.Dashboard.DashboardExcelFormat;
    import DashboardExportImageFormat = DevExpress.Dashboard.DashboardExportImageFormat;
    import DashboardExportPageLayout = DevExpress.Dashboard.DashboardExportPageLayout;
    import DashboardExportPaperKind = DevExpress.Dashboard.DashboardExportPaperKind;
    import DashboardImageExportOptions = DevExpress.Dashboard.DashboardImageExportOptions;
    import DashboardMapSizeMode = DevExpress.Dashboard.DashboardMapSizeMode;
    import DashboardPdfExportOptions = DevExpress.Dashboard.DashboardPdfExportOptions;
    import DashboardRangeFilterExportSizeMode = DevExpress.Dashboard.DashboardRangeFilterExportSizeMode;
    import DashboardTreemapExportSizeMode = DevExpress.Dashboard.DashboardTreemapExportSizeMode;
    export type DashboardExportScaleMode = "None" | "UseScaleFactor" | "AutoFitToPageWidth" | "AutoFitWithinOnePage";
    export type DashboardFilterState = "Below" | "SeparatePage" | "None";
    export interface ASPxClientDashboardExportOptions {
        PaperKind?: DevExpress.Dashboard.DashboardExportPaperKind | string;
        PageLayout?: DevExpress.Dashboard.DashboardExportPageLayout;
        ScaleMode?: DashboardExportScaleMode;
        ScaleFactor?: number;
        AutoFitPageCount?: number;
        Title?: string;
        ShowTitle?: boolean;
        FilterState?: DashboardFilterState;
        ImageOptions?: ImageFormatOptions;
        ExcelOptions?: ExcelFormatOptions;
        GridOptions?: GridExportOptions;
        PivotOptions?: PivotExportOptions;
        PieOptions?: PieExportOptions;
        GaugeOptions?: GaugeExportOptions;
        CardOptions?: CardExportOptions;
        RangeFilterOptions?: RangeFilterExportOptions;
        ChartOptions?: ChartExportOptions;
        MapOptions?: MapExportOptions;
        TreemapOptions?: TreemapExportOptions;
    }
    export interface MapExportOptions {
        AutomaticPageLayout?: boolean;
        SizeMode?: DevExpress.Dashboard.DashboardMapSizeMode;
    }
    export interface GridExportOptions {
        FitToPageWidth?: boolean;
        PrintHeadersOnEveryPage?: boolean;
    }
    export interface PivotExportOptions {
        PrintHeadersOnEveryPage?: boolean;
    }
    export interface PieExportOptions {
        AutoArrangeContent?: boolean;
    }
    export interface GaugeExportOptions {
        AutoArrangeContent?: boolean;
    }
    export interface CardExportOptions {
        AutoArrangeContent?: boolean;
    }
    export interface RangeFilterExportOptions {
        AutomaticPageLayout?: boolean;
        SizeMode?: DevExpress.Dashboard.DashboardRangeFilterExportSizeMode;
    }
    export interface ChartExportOptions {
        AutomaticPageLayout?: boolean;
        SizeMode?: DevExpress.Dashboard.DashboardChartExportSizeMode;
    }
    export interface ExcelFormatOptions {
        Format?: DevExpress.Dashboard.DashboardExcelFormat;
        CsvValueSeparator?: string;
        FilterState?: "Below" | "SeparateSheet" | "None";
    }
    export interface ImageFormatOptions {
        Format?: DevExpress.Dashboard.DashboardExportImageFormat;
        Resolution?: number;
    }
    export interface TreemapExportOptions {
        SizeMode?: DevExpress.Dashboard.DashboardTreemapExportSizeMode;
        AutomaticPageLayout?: boolean;
    }
    export let dashboardExportPaperKind: {
        letter: string;
        legal: string;
        executive: string;
        a5: string;
        a4: string;
        a3: string;
    };
    export let dashboardExportPageLayout: {
        auto: string;
        portrait: string;
        landscape: string;
    };
    export let dashboardExportScaleMode: {
        none: string;
        useScaleFactor: string;
        autoFitToPageWidth: string;
        autoFitWithinOnePage: string;
    };
    export let dashboardExportDocumentScaleMode: {
        none: string;
        useScaleFactor: string;
        autoFitToPagesWidth: string;
    };
    export let exportFormats: {
        [name: string]: DevExpress.Dashboard.DashboardExportFormat;
    };
    export let dashboardExportFilterState: {
        none: string;
        after: string;
        afterAndSplitPage: string;
    };
    export let excelExportFilterState: {
        none: string;
        below: string;
        separateSheet: string;
    };
    export let dashboardExportImageFormat: {
        png: string;
        gif: string;
        jpg: string;
    };
    export let dashboardExportExcelFormat: {
        csv: string;
        xls: string;
        xlsx: string;
    };
    export let dashboardExportSizeMode: {
        none: string;
        stretch: string;
        zoom: string;
    };
    export let dashboardStateExportPosition: {
        below: string;
        separatePage: string;
    };
    export let dashboardStateExcelExportPosition: {
        below: string;
        separateSheet: string;
    };
    export interface IExportOptions {
        pdfExportOptions: DevExpress.Dashboard.DashboardPdfExportOptions;
        imageExportOptions: DevExpress.Dashboard.DashboardImageExportOptions;
        excelExportOptions: DevExpress.Dashboard.DashboardExcelExportOptions;
        fileName?: string;
    }
    export type ClientExportOptions = (IExportOptions | DevExpress.Dashboard.DashboardPdfExportOptions | DevExpress.Dashboard.DashboardImageExportOptions | DevExpress.Dashboard.DashboardExcelExportOptions | ASPxClientDashboardExportOptions) & {
        fileName?: string;
    };
    export class ExportOptions implements IExportOptions {
        static DefaultTitle: string;
        static DefaultFileName: string;
        pdfExportOptions: DevExpress.Dashboard.DashboardPdfExportOptions;
        imageExportOptions: DevExpress.Dashboard.DashboardImageExportOptions;
        excelExportOptions: DevExpress.Dashboard.DashboardExcelExportOptions;
        constructor();
        convertToExportOptions(clientOptions: ClientExportOptions): IExportOptions;
        convertToASPxClientDashboardExportOptions(): ASPxClientDashboardExportOptions;
        setExcelOptions(options: DevExpress.Dashboard.DashboardExcelExportOptions): void;
        setImageOptions(options: DevExpress.Dashboard.DashboardImageExportOptions): void;
        setPdfOptions(options: DevExpress.Dashboard.DashboardPdfExportOptions): void;
        setOptions(options: IExportOptions): void;
        _getPdfDashboardStatePosition(clientOptions: any, currentValue: any): any;
        _getExcelDashboardStatePosition(clientOptions: any, currentValue: any): any;
        _getImageFormat(clientOptions: any, currentValue: any): any;
        _getExcelFormat(clientOptions: any, currentValue: any): any;
        _getDefinedValue(oldOptions: any, oldProperty: any, newValue: any, currentValue: any): any;
        _getExportFilters(clientOptions: any, currentValue: any): any;
        _getDashboardAutomaticPageLayout(clientOptions: any, currentValue: any): any;
        _convertDocumentScaleModeToScaleMode(documentScaleMode: any, dashboardAutomaticPageLayout: any): string;
        _convertScaleModeToDocumentScaleMode(scaleMode: any): string;
        _getPdfFilterState(): DashboardFilterState;
        _getExcelFilterState(): "Below" | "SeparateSheet" | "None";
        _correctImageFormat(imageFormat: any): any;
    }
}
declare module DevExpress.Dashboard {
    import DxElement = DevExpress.core.DxElement;
    import dxPopup = DevExpress.ui.dxPopup;
    import ExportOptions = DevExpress.Dashboard.Internal.Viewer.ExportOptions;
    import IExportOptions = DevExpress.Dashboard.Internal.Viewer.IExportOptions;
    import DashboardExcelExportOptions = DevExpress.Dashboard.DashboardExcelExportOptions;
    import DashboardImageExportOptions = DevExpress.Dashboard.DashboardImageExportOptions;
    import DashboardPdfExportOptions = DevExpress.Dashboard.DashboardPdfExportOptions;
    import DashboardOptionChangedArgs = DevExpress.Dashboard.DashboardOptionChangedArgs;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DashboardControlActions = DevExpress.Dashboard.Internal.DashboardControlActions;
    import ISupportOptionExtension = DevExpress.Dashboard.Internal.ISupportOptionExtension;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
    import ExportDialogBinder = DevExpress.Dashboard.Internal.ExportDialogBinder;
    export interface DashboardExportDialogArgs {
        component: DevExpress.ui.dxPopup;
        element: DevExpress.core.DxElement;
    }
    /**
     * @docid dxDashboardControlOptions.extensions.dashboardExport
     * @type object
     * @public
     */
    export interface DashboardExportExtensionOptions {
        /**
        * @docid dxDashboardControlOptions.extensions.dashboardExport.allowExportDashboard
        * @type boolean
        * @default true
        * @public
        */
        allowExportDashboard?: boolean;
        /**
        * @docid dxDashboardControlOptions.extensions.dashboardExport.allowExportDashboardItems
        * @type boolean
        * @default true
        * @public
        */
        allowExportDashboardItems?: boolean;
        pdfExportOptions?: DevExpress.Dashboard.DashboardPdfExportOptions;
        imageExportOptions?: DevExpress.Dashboard.DashboardImageExportOptions;
        excelExportOptions?: DevExpress.Dashboard.DashboardExcelExportOptions;
        /**
         * @docid dxDashboardControlOptions.extensions.dashboardExport.onExportDialogShowing
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onExportDialogShowing?: (args: DashboardExportDialogArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.dashboardExport.onExportDialogShown
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onExportDialogShown?: (args: DashboardExportDialogArgs) => void;
        /**
         * @docid dxDashboardControlOptions.extensions.dashboardExport.onExportDialogHidden
         * @extends Action
         * @type function(args)
         * @type_function_param1 args:object
         * @action
         * @public
         */
        onExportDialogHidden?: (args: DashboardExportDialogArgs) => void;
    }
    export type DashboardExportExtensionEvents = {
        exportDialogShowing: DashboardExportDialogArgs;
        exportDialogShown: DashboardExportDialogArgs;
        exportDialogHidden: DashboardExportDialogArgs;
    };
    export type DashboardExportFormat = "PDF" | "Image" | "Excel";
    export class DashboardExportExtension implements ISupportOptionExtension<DashboardExportExtensionOptions> {
        private dashboardControl;
        private _dialogBinderSubscription;
        private _exportInfoContoller;
        get allowExportDashboard(): any;
        set allowExportDashboard(value: any);
        get allowExportDashboardItems(): any;
        set allowExportDashboardItems(value: any);
        name: string;
        _optionsManager: DevExpress.Dashboard.Internal.OptionsManager<DashboardExportExtensionOptions, DashboardExportExtensionEvents>;
        _dialogBinder: DevExpress.Dashboard.Internal.ExportDialogBinder;
        private _initializeExportButton;
        _initializePrimaryExportItem(localContext: DevExpress.Dashboard.Internal.IDashboardItemContext): void;
        _initializeSecondaryExportItem(localContext: DevExpress.Dashboard.Internal.IDashboardItemContext): void;
        on: DevExpress.Dashboard.Internal.EventSubscriber<DashboardExportExtensionEvents>;
        off: DevExpress.Dashboard.Internal.EventSubscriber<DashboardExportExtensionEvents>;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl, options?: DashboardExportExtensionOptions);
        _optionChanged(args: DevExpress.Dashboard.DashboardOptionChangedArgs<DashboardExportExtensionOptions>): DevExpress.Dashboard.Internal.DashboardControlActions;
        start(): void;
        stop(): void;
        showExportDashboardDialog(format: DashboardExportFormat): void;
        showExportDashboardItemDialog(itemComponentName: string, format: DashboardExportFormat): void;
        hideExportDialog(): void;
        getPdfExportOptions(): DevExpress.Dashboard.DashboardPdfExportOptions;
        getImageExportOptions(): DevExpress.Dashboard.DashboardImageExportOptions;
        getExcelExportOptions(): DevExpress.Dashboard.DashboardExcelExportOptions;
        setPdfExportOptions(options: DevExpress.Dashboard.DashboardPdfExportOptions): void;
        setImageExportOptions(options: DevExpress.Dashboard.DashboardImageExportOptions): void;
        setExcelExportOptions(options: DevExpress.Dashboard.DashboardExcelExportOptions): void;
        exportToPdf(options?: DevExpress.Dashboard.DashboardPdfExportOptions, fileName?: string): void;
        exportToImage(options?: DevExpress.Dashboard.DashboardImageExportOptions, fileName?: string): void;
        exportToExcel(options?: DevExpress.Dashboard.DashboardExcelExportOptions, fileName?: string): void;
        exportDashboardItemToPdf(itemName: string, options?: DevExpress.Dashboard.DashboardPdfExportOptions, fileName?: string): void;
        exportDashboardItemToImage(itemName: string, options?: DevExpress.Dashboard.DashboardImageExportOptions, fileName?: string): void;
        exportDashboardItemToExcel(itemName: string, options?: DevExpress.Dashboard.DashboardExcelExportOptions, fileName?: string): void;
        _getExportOptions(): DevExpress.Dashboard.Internal.Viewer.ExportOptions;
        _setExportOptions(exportOptions: DevExpress.Dashboard.Internal.Viewer.IExportOptions): void;
    }
}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardExportFormat = DevExpress.Dashboard.DashboardExportFormat;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    import itemDataTupleValues = DevExpress.Dashboard.Internal.Data.itemDataTupleValues;
    import ContentType = DevExpress.Dashboard.Internal.Data.ContentType;
    import IViewport = DevExpress.Dashboard.Internal.Model.IViewport;
    import ConstraintsEx = DevExpress.Dashboard.Internal.Viewer.ConstraintsEx;
    import ISize = DevExpress.Dashboard.Internal.Viewer.ISize;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import ItemCaptionToolbarViewOptions = DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions;
    import GridClientState = DevExpress.Dashboard.Internal.Viewer.GridClientState;
    import IItemLoadingElement = DevExpress.Dashboard.Internal.Viewer.IItemLoadingElement;
    import MapClientState = DevExpress.Dashboard.Internal.Viewer.MapClientState;
    export var createDefaultToolbar: (viewerItem: baseItem, container: HTMLElement, controlContainer: HTMLElement, popupContainer: HTMLElement, viewOptions: DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions) => DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    export function getControlContainer(element: HTMLElement): HTMLElement;
    export type ViewerItemVisualMode = "full" | "caption" | "content";
    export abstract class baseItem {
        private _lockCount;
        _isFixedHeight: boolean;
        customHoverEnabled: boolean;
        container: HTMLElement;
        controlContainer: HTMLElement;
        _boundaryContainer: HTMLElement;
        _clearMasterFilterHandler: any;
        _clearSelectionHandler: any;
        _toggleSelectionModeHandler: any;
        _drillUpHandler: any;
        _allowMultiselection: boolean;
        allowMultiselectionChanged: (allowed: any) => void;
        allowLimitDataCallback: () => void;
        dateToString: (date: Date) => string;
        selected: JQuery.Callbacks<Function>;
        clearMasterFilter: JQuery.Callbacks<Function>;
        drillUp: JQuery.Callbacks<Function>;
        contentElementSelection: JQuery.Callbacks<Function>;
        expandValue: JQuery.Callbacks<Function>;
        clientStateUpdate: JQuery.Callbacks<Function>;
        dataRequest: JQuery.Callbacks<Function>;
        itemClick: JQuery.Callbacks<Function>;
        itemHover: JQuery.Callbacks<Function>;
        itemSelectionChanged: JQuery.Callbacks<Function>;
        itemWidgetCreated: JQuery.Callbacks<Function>;
        itemWidgetUpdating: JQuery.Callbacks<Function>;
        itemWidgetUpdated: JQuery.Callbacks<Function>;
        itemWidgetOptionsPrepared: JQuery.Callbacks<Function>;
        itemCaptionToolbarUpdated: JQuery.Callbacks<Function>;
        constraintsUpdated: JQuery.Callbacks<Function>;
        interactivityController: any;
        customSelectionMode: any;
        customTargetAxes: DevExpress.Dashboard.Data.ItemDataAxisName[];
        customDefaultSelectedValues: any[];
        options: ViewerItemOptions;
        customSelectedTuples: DevExpress.Dashboard.Internal.Data.itemDataTupleValues[];
        contentRoot: HTMLElement;
        shieldingElement: HTMLElement;
        itemLoadingElement: DevExpress.Dashboard.Internal.Viewer.IItemLoadingElement;
        captionToolbar: DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        visualMode: ViewerItemVisualMode;
        protected _hasWidget: boolean;
        get hasWidget(): boolean;
        protected get _captionToolbarSeparatorRequired(): boolean;
        protected get _isBottomFloatingToolbarPosition(): boolean;
        protected get _allowPreview(): boolean;
        protected get _shouldApplySelectionOnInitialRender(): boolean;
        protected get dataController(): DevExpress.Dashboard.Internal.Data.dataControllerBase;
        protected set dataController(dataController: DevExpress.Dashboard.Internal.Data.dataControllerBase);
        constructor($container: HTMLElement, options: ViewerItemOptions);
        protected _initializeData(newOptions: ViewerItemOptions): void;
        initialDataRequest(): void;
        initialDataRequestUnsafe(): void;
        get allowMultiselection(): boolean;
        set allowMultiselection(value: boolean);
        forceUpdateInteractivity(): void;
        clearSelection(): void;
        protected _clearSelectionUnsafe(): void;
        protected _clearSelectionBase(): void;
        performClearSelection(): void;
        selectTuple(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected selectTupleUnsafe(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        setSelection(values: any): void;
        protected _setSelectionUnsafe(values: any): void;
        private setSelectionBase;
        protected _applySelection(): void;
        protected _applySelectionUnsafe(): void;
        protected _isEncodeHtml(): any;
        protected _isSupportDataAwareExport(): any;
        protected _isLocked(): boolean;
        protected _lock(): void;
        protected _unlock(): void;
        protected _getCustomSelectionMode(): any;
        protected _setCustomSelectionMode(value: any): void;
        protected _getCustomHoverEnabled(): boolean;
        protected _setCustomHoverEnabled(value: any): void;
        private _getCustomTargetAxes;
        private _setCustomTargetAxes;
        protected _getTargetAxes(): DevExpress.Dashboard.Data.ItemDataAxisName[];
        getSelectedTuples(): DevExpress.Dashboard.Internal.Data.itemDataTupleValues[];
        updateItem(options: any): void;
        forceUpdateItem(): void;
        private _changeTuple;
        private _onSelectionChanged;
        protected _mustSelectingFired(values: any): boolean;
        private _patchTroughDrillDownValues;
        private _deductDrillDownValues;
        private _getSelectionCallbackType;
        protected _selectTuples(tuplesToSelect: DevExpress.Dashboard.Internal.Data.itemDataTupleValues[], unaffectedTuples: DevExpress.Dashboard.Internal.Data.itemDataTupleValues[], isSelect: boolean): void;
        protected _selectTuplesCore(tuples: DevExpress.Dashboard.Internal.Data.itemDataTupleValues[], updateTupleDelegate: (tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues) => DevExpress.Dashboard.Internal.Data.itemDataTupleValues, state: any): void;
        protected _renderContent(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        protected renderContentUnsafe($element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
        renderPartialContent(): void;
        protected renderPartialContentUnsafe(): void;
        updateContentState(): void;
        protected updateContentStateUnsafe(): void;
        getInfo(): ViewerItemInfo;
        protected getInfoUnsafe(): ViewerItemInfo;
        private getInfoBase;
        getName(): string;
        getCaption(): any;
        hasCaption(options?: ViewerItemOptions): any;
        hasParentContainer(): boolean;
        protected _isPaneEmpty(): boolean;
        _isTransparentBackground(): boolean;
        render(container?: HTMLElement): void;
        dispose(): void;
        updateContent(newOptions: ViewerItemOptions): void;
        updateClientState(clientState: DevExpress.Dashboard.Internal.Viewer.MapClientState | DevExpress.Dashboard.Internal.Viewer.GridClientState): void;
        _removeShildElement(): void;
        showLoadingPanel(): void;
        hideLoadingPanel(): void;
        _toggleLoadingPanel(loading: boolean): void;
        width(width?: any): any;
        height(height?: any): any;
        setSize(width: number, height: number): void;
        getConstraints(includeBorders: any): DevExpress.Dashboard.Internal.Viewer.ConstraintsEx;
        getOffset(): DevExpress.Dashboard.Internal.Viewer.ISize;
        updateInteractivityOptions(): void;
        addContextCaptionToolbarOptions?: (options: DevExpress.Dashboard.DashboardItemCaptionToolbarOptions) => void;
        getCaptionToolbarOptions(): DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
        updateConstraints(): void;
        deferredToolbarRenderingPromise: (itemName: string, width: number, height: number) => JQueryPromise<any>;
        updateCaptionToolbar(): void;
        private _createCaptionToolbar;
        private _updateCaptionToolbarAndSize;
        createCaptionToolbar: (viewerItem: baseItem, container: HTMLElement, controlContainer: HTMLElement, parentContainerElement: HTMLElement, viewOptions: DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions) => DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
        forceCreateCaptionToolbar(): void;
        protected _itemHasOwnContent(): boolean;
        protected _updateClientStateUnsafe(clientState: DevExpress.Dashboard.Internal.Viewer.MapClientState | DevExpress.Dashboard.Internal.Viewer.GridClientState): void;
        protected _changeContent(updateExisting: boolean): void;
        protected _calcHeaderAndFooterHeight(): number;
        private _getReducedDataTooltip;
        private _getStaticToolbarItems;
        private _getReduceDataToolbarItem;
        private _getStateToolbarItems;
        private _getActionToolbarItems;
        private _getExportMenuModel;
        private _getParametersTitle;
        showExportDialog(exportFormat: any): void;
        protected _getSpecificActionToolbarItems(): Array<DevExpress.Dashboard.ViewerToolbarItem>;
        protected _getSpecificStatePanelItems(): Array<DevExpress.Dashboard.ViewerToolbarItem>;
        protected _getMinContentHeight(): number;
        private _generateInnerBorderClasses;
        protected _generateInnerBorderClassesUnsafe(element?: HTMLElement): string[];
        private _generateOuterBorderClasses;
        _isBorderRequired(): boolean;
        _resize(): void;
        protected _resizeUnsafe(): void;
        private _resizeBase;
        updateContentSize(): void;
        protected _updateContentSizeUnsafe(): void;
        private _updateContentSizeBase;
        private _allocatePreloader;
        protected _getButtonOffset(useToolbarOffset: any): {
            left: any;
            top: any;
        };
        protected _getAnimationOptions(): {
            enabled: boolean;
            duration: number;
        };
        private _getContainerPosition;
        protected _getContainerPositionUnsafe(): {
            left: any;
            top: any;
            width: any;
            height: any;
            offsetX: number;
            offsetY: number;
        };
        private _getContainerPositionBase;
        protected _getBoundaryContainer(): HTMLElement;
        protected _getSelectedValues(): any[][];
        private _onClearSelection;
        protected _getElementInteractionValue(element: any, viewModel: any): void;
        protected _setSelectedValues(values: any): void;
        protected _raiseItemClick(element: any): void;
        protected _clickAction(tuple: DevExpress.Dashboard.Internal.Data.itemDataTupleValues): void;
        protected _isMultiDataSupported(): boolean;
        protected _getDataPoint(element: any): DataPoint;
        protected _getWidget(): any;
        private _raiseItemWidgetCreated;
        private _raiseItemWidgetUpdating;
        private _raiseItemWidgetUpdated;
        protected _raiseItemWidgetOptionsPrepared(options: Object): void;
        protected _raiseItemHover(element: any, state?: any): void;
        private _onClearMasterFilter;
        private _onToggleSelectionMode;
        private _onDrillUp;
        private _onContentElementSelection;
        protected _onExpandValue(expandValueParams: any): void;
        protected _onClientStateUpdate(clientState: DevExpress.Dashboard.Internal.Viewer.MapClientState | DevExpress.Dashboard.Internal.Viewer.GridClientState): void;
        protected _onDataRequest(): void;
        private _hasDrillUpButton;
        private _hasClearMasterFilterButton;
        private _hasClearSelectionButton;
        protected _hasToggleSelectionModeButton(): boolean;
        private _isDrillUpEnabled;
        private _canPerformAction;
        protected _canPerformDrillDown(): boolean;
        protected _canPerformDrillUp(): boolean;
        protected _canSetMasterFilter(): boolean;
        protected _canSetMultipleMasterFilter(): boolean;
        protected isInteractivityActionEnabled(): boolean;
        protected _selectionMode(): "none" | "multiple";
        protected _getHtml(text: any): any;
        protected _getAxisNames(): DevExpress.Dashboard.Data.ItemDataAxisName[];
        private _getDrillDownAxisName;
        private _getDrillDownValues;
    }
    export let cssClassNamesBaseItem: {
        item: string;
        groupItem: string;
        groupItemChild: string;
        simpleBorder: string;
        overlayContent: string;
        cardWihtoutBackground: string;
    };
    export interface ViewerItemOptions {
        Name: string;
        Type?: string;
        ParentContainer?: any;
        ContentType?: DevExpress.Dashboard.Internal.Data.ContentType;
        SelectedValues?: any;
        ViewModel?: any;
        ActionModel?: any;
        CaptionViewModel?: any;
        ConditionalFormattingModel?: any;
        Parameters?: any;
        DrillDownValues?: any;
        DrillDownUniqueValues?: any;
        AxisNames?: any;
        DimensionIds?: any;
        multiData?: any;
        encodeHtml?: any;
        allowExport?: boolean;
        showExportDialog?: (format: DevExpress.Dashboard.DashboardExportFormat) => void;
        isDataReduced?: boolean;
        useNeutralFilterMode?: boolean;
        FullViewport?: DevExpress.Dashboard.Internal.Model.IViewport;
        LimitDataState?: any;
        controlContainer?: HTMLElement;
        parentContainer?: any;
        boundaryContainer?: HTMLElement;
        ItemData?: any;
        DataSource?: any;
        DataSourceMembers?: any;
        animate?: any;
        useNativeScrolling?: any;
        overflow?: any;
        PivotExpandViewState?: any;
        GridClientFilterState?: any;
        forceUpdateViewModel?: boolean;
    }
    export interface DataPoint {
        getSelectionValues?(axisName?: DevExpress.Dashboard.Data.ItemDataAxisName): Array<any>;
        getValues(axisName?: DevExpress.Dashboard.Data.ItemDataAxisName): Array<any>;
        getMeasureIds?(): Array<string>;
        getDeltaIds?(): Array<string>;
    }
    export interface ViewerItemInfo {
        name: string;
        headerHeight: number;
        position: JQuery.Coordinates;
        width: number;
        height: number;
        virtualSize: any;
        scroll: any;
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import CustomProperties = DevExpress.Dashboard.Model.CustomProperties;
    import ICustomPropertiesProvider = DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import IDashboardComponent = DevExpress.Dashboard.Internal.Model.IDashboardComponent;
    import Notification = DevExpress.Dashboard.Internal.Model.Notification;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import PaneContentHolder = DevExpress.Dashboard.Internal.Model.PaneContentHolder;
    export type UiStateType = "live" | "empty" | "error" | "loading";
    export abstract class DashboardItem extends TypedSerializableModel implements IDashboardComponent, ICustomPropertiesProvider {
        static _getCommonItemType(itemType: string): string;
        getUniqueNamePrefix(): string;
        name: ko.Observable<string>;
        componentName: ko.Observable<string>;
        showCaption: ko.Observable<boolean>;
        parentContainer: ko.Observable<string>;
        customProperties: DevExpress.Dashboard.Model.CustomProperties;
        _useNeutralFilterMode: ko.Observable<boolean>;
        _state: ko.Computed<DevExpress.Dashboard.Model.ItemState>;
        _actions: ko.Computed<Array<string>>;
        _uiState: ko.Subscribable<UiStateType>;
        _errorState: ko.Observable<DevExpress.Dashboard.Internal.Model.Notification>;
        _viewerItemCreated: ko.Observable<boolean>;
        _paneContentHolder: DevExpress.Dashboard.Internal.Model.PaneContentHolder;
        _allowMultiselection: ko.Observable<boolean>;
        private _serverContent;
        protected _dataQueryParams: ko.Computed<any>;
        get _caption(): string;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer, info?: DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray);
        _isInteractivityAllowed(): boolean;
        protected _getLayersCount(): number;
        protected _getLayerName(): string;
        protected _updateContentViewModel(content: any): void;
        protected _updateContentData(content: any): void;
        protected _updateDataQueryParams(params: any): void;
        protected _validateSelectionByData(selection: Array<Array<any>>): void;
        protected _extendContentState(content: any): void;
        _getDisplayFilterValues(limitCount?: number): Array<DevExpress.Dashboard.Internal.Model.DimensionFilterValues>;
        _getDisplayFilterValuesExternal(): void;
        _getServerContent(): any;
        _getFullServerContent(): DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
        _subcribeServerContent(handler: (content: any) => void): ko.Subscription;
        _getContentCategories(): DevExpress.Dashboard.Metadata.PropertyCategory[];
        _getDataQueryParams(): any;
        _subcribeDataQueryParams(handler: (content: any) => void): ko.Subscription;
        _getExportingSelection(): void;
        _setState(parameter: DevExpress.Dashboard.Model.ItemState): void;
        getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        protected abstract _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
    }
}
declare module DevExpress.Dashboard.Model {
    import ISerializableModel = DevExpress.Analytics.Utils.ISerializableModel;
    import IModelSerializer = DevExpress.Analytics.Utils.IModelSerializer;
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    export abstract class SerializableModel implements ISerializableModel {
        constructor(model?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Analytics.Utils.ISerializationInfoArray);
    }
    export abstract class TypedSerializableModel extends SerializableModel {
        itemType: ko.Observable<string>;
        _model: any;
        constructor(model?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Analytics.Utils.ISerializationInfoArray);
        protected abstract _getDefaultItemType(): string;
        protected _getUniqueNamePrefix(): string;
    }
    export let itemTypesMap: {
        [key: string]: {
            type: typeof DevExpress.Dashboard.Model.DashboardItem;
            customItemType?: typeof DevExpress.Dashboard.Model.DataDashboardItem;
            groupName: string;
            title: string;
            index: number;
        };
    };
}
declare module DevExpress.Dashboard.Model {
    import ISerializationInfoArray = DevExpress.Analytics.Utils.ISerializationInfoArray;
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import IDashboardComponent = DevExpress.Dashboard.Internal.Model.IDashboardComponent;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
    export interface IDataSourceConsumer {
        dataSource: ko.Observable<string>;
        dataMember: ko.Observable<string>;
    }
    export abstract class DataSource extends TypedSerializableModel implements IDashboardComponent {
        hasCalculatedFields: boolean;
        supportDataMembers: boolean;
        name: ko.Observable<string>;
        componentName: ko.Observable<string>;
        calculatedFields: ko.ObservableArray<DevExpress.Dashboard.Model.CalculatedField>;
        hasFilter: boolean;
        filter: ko.Observable<string>;
        abstract get _isFederationDataProvider(): boolean;
        constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        abstract getDisplayNamePrefix(): string;
        abstract getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
        getJson(): any;
        getUniqueNamePrefix(): string;
    }
}
declare module DevExpress.Dashboard.Internal.Model {
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import GroupItem = DevExpress.Dashboard.Model.GroupItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    export interface IDashboardItemsProvider {
        findItem(itemId: string): DevExpress.Dashboard.Model.DashboardItem;
        items: ko.ObservableArray<DevExpress.Dashboard.Model.DashboardItem>;
        groups: ko.ObservableArray<DevExpress.Dashboard.Model.GroupItem>;
        dataSources: ko.ObservableArray<DevExpress.Dashboard.Model.DataSource>;
        layout: ko.Observable<DevExpress.Dashboard.Model.DashboardLayoutNode>;
        _createDashboardLayoutItem(modelItemJson?: any): DevExpress.Dashboard.Model.DashboardLayoutNode;
        _createDashboardLayoutNode(dashboardItem: DevExpress.Dashboard.Model.DashboardItem): DevExpress.Dashboard.Model.DashboardLayoutNode;
        _getDisplayDashboardItem(tabPage: DevExpress.Dashboard.Model.DashboardTabPage): DevExpress.Dashboard.Model.DashboardItem;
        _allItems: ko.PureComputed<Array<DevExpress.Dashboard.Model.DashboardItem>>;
    }
    export interface IExternalFilter {
        dimensions: Array<any>;
        range: Array<any>;
        values: Array<any>;
        isExcludingAllFilter: boolean;
    }
    export interface IMasterFilterItemsProvider {
        _masterFilterItems: ko.Subscribable<Array<DevExpress.Dashboard.Model.DataDashboardItem>>;
    }
    export interface IColorSignaturesProvider {
        _colorableItems: ko.Subscribable<DevExpress.Dashboard.Model.DashboardItem[]>;
    }
    export interface Notification {
        title: string;
        detail?: string;
    }
    export interface IViewport {
        RightLongitude: number;
        LeftLongitude: number;
        BottomLatitude: number;
        TopLatitude: number;
        CenterPointLongitude: number;
        CenterPointLatitude: number;
    }
    export interface IViewportViewModel extends IViewport {
        CreateViewerPaddings: boolean;
    }
}
declare module DevExpress.Dashboard.Model {
}
declare module DevExpress.Dashboard.Model {
    import ModelSerializer = DevExpress.Analytics.Utils.ModelSerializer;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
    export class TreeViewItem extends FilterElementItemBase {
        autoExpand: ko.Observable<boolean>;
        constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
        protected _getInfoCore(): DevExpress.Dashboard.Metadata.IDashboardSerializationInfo[];
        protected _getDefaultItemType(): string;
        protected _allowAllValue(): boolean;
        protected _isMultiselectable(): boolean;
    }
}
declare module DevExpress.Dashboard.Model {
}
declare module DevExpress.Dashboard.Model {
}
declare module DevExpress.Dashboard.Internal.Data {
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataDelta = DevExpress.Dashboard.Data.ItemDataDelta;
    import ItemDataDimension = DevExpress.Dashboard.Data.ItemDataDimension;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    export let deltaValueNames: {
        actualValue: string;
        targetValue: string;
        absoluteVariation: string;
        percentVariation: string;
        percentOfTarget: string;
        mainValue: string;
        subValue1: string;
        subValue2: string;
        isGood: string;
        indicatorType: string;
    };
    export let deltaValueTypes: {
        actualValue: string;
        absoluteVariation: string;
        percentVariation: string;
        percentOfTarget: string;
        targetValue: string;
    };
    export class itemMetaData {
        _metaDataDto: any;
        _measuresInfo: MeasuresInfo;
        _colorMeasuresInfo: MeasuresInfo;
        _conditionalFormattingMeasuresInfo: MeasuresInfo;
        _deltaInfo: DeltasInfo;
        _axesInfo: AxesInfo;
        _dataSourceColumns: any;
        constructor(metaDataDto: any);
        initialize(): void;
        _createMeasureInfo(descriptors: any[]): MeasuresInfo;
        _createDeltaInfo(): DeltasInfo;
        _createAxesInfo(): AxesInfo;
        getAxes(): {
            [name: string]: itemDataDimension[];
        };
        getAxisNames(): DevExpress.Dashboard.Data.ItemDataAxisName[];
        getPivotAreaByAxisName(name: any): any;
        getColorMeasures(): itemDataMeasure[];
        getConditionalFormattingMeasures(): itemDataMeasure[];
        getDimensions(axisName?: DevExpress.Dashboard.Data.ItemDataAxisName): itemDataDimension[];
        getMeasures(): itemDataMeasure[];
        getDeltas(): DevExpress.Dashboard.Data.ItemDataDelta[];
        getMeasureById(id: string): itemDataMeasure;
        getDeltaById(id: any): DevExpress.Dashboard.Data.ItemDataDelta;
        getMeasureFormat(measureId: any): any;
        getMeasureExpression(measureId: any): any;
        getMeasureCalculation(measureId: any): any;
        getMeasureWindowDefinition(measureId: any): any;
        getDeltaValueIds(deltaId: any): {
            [deltaValueName: string]: number;
        };
        getDeltaFormats(deltaId: any): {
            [deltaValueName: string]: any;
        };
        getDeltaValueType(deltaId: any): void;
        getDimensionLevel(dimensionId: any): number;
        getDimensionFormat(dimensionId: any): any;
        getDataMembers(): any;
        getFinalDataType(dataItemId: string): DevExpress.Dashboard.Model.DataFieldType;
    }
    export interface DimensionDescriptorViewModel {
        ID: string;
        Name: string;
        DataMember: string;
        DateTimeGroupInterval: string;
        TextGroupInterval: string;
        Format: any;
        DataType: any;
        FinalDataType: any;
        Level: number;
    }
    export type DescriptorValueType = "String" | "Char" | "DateTime" | "Bool" | "Byte" | "SByte" | "Short" | "UShort" | "Integer" | "UInteger" | "Long" | "ULong" | "Float" | "Double" | "Decimal" | "Enum" | "Object" | "Unknown";
    export interface itemDataDimension extends ItemDataDimension {
        dataType: DescriptorValueType;
        finalDataType: DevExpress.Dashboard.Model.DataFieldType;
        getFormat: {
            (): DevExpress.Dashboard.Internal.Data.NumericFormatInfo | DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
        };
    }
    export interface itemDataMeasure extends ItemDataMeasure {
        dataType: DescriptorValueType;
        finalDataType: DevExpress.Dashboard.Model.DataFieldType;
        dataItemId: string;
    }
    interface AxesInfo {
        axes: {
            [name: string]: itemDataDimension[];
        };
        levelByDimensionId: {
            [dimensionId: string]: number;
        };
        formatByDimensionId: {
            [dimensionId: string]: any;
        };
        pivotAreaByAxisName: {};
    }
    interface MeasuresInfo {
        measures: itemDataMeasure[];
        formatByMeasureId: {};
        expressionByMeasureId: {};
        calculationByMeasureId: {};
        windowDefinitionByMeasureId: {};
    }
    interface DeltasInfo {
        deltas: DevExpress.Dashboard.Data.ItemDataDelta[];
        valueIdsByDeltaId: {
            [deltaId: string]: {
                [deltaValueName: string]: number;
            };
        };
        formatsByDeltaId: {
            [deltaId: string]: {
                [deltaValueName: string]: any;
            };
        };
    }
    export {};
}
declare module DevExpress.Dashboard.Internal.Data {
    import DataRowKey = DevExpress.Dashboard.Internal.Data.DataRowKey;
    import dataStorage = DevExpress.Dashboard.Internal.Data.dataStorage;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import itemDataDimension = DevExpress.Dashboard.Internal.Data.itemDataDimension;
    import itemDataMeasure = DevExpress.Dashboard.Internal.Data.itemDataMeasure;
    import itemMetaData = DevExpress.Dashboard.Internal.Data.itemMetaData;
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataDelta = DevExpress.Dashboard.Data.ItemDataDelta;
    import ItemDataDeltaValue = DevExpress.Dashboard.Data.ItemDataDeltaValue;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import ItemDataMeasureValue = DevExpress.Dashboard.Data.ItemDataMeasureValue;
    import itemDataAxis = DevExpress.Dashboard.Internal.Data.itemDataAxis;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import itemDataTuple = DevExpress.Dashboard.Internal.Data.itemDataTuple;
    export class itemData implements ItemData {
        _metaData: DevExpress.Dashboard.Internal.Data.itemMetaData;
        _storage: DevExpress.Dashboard.Internal.Data.dataStorage;
        _rootItems: {
            [axisName: string]: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        };
        constructor(metaData: DevExpress.Dashboard.Internal.Data.itemMetaData, storage: DevExpress.Dashboard.Internal.Data.dataStorage, rootItems: {
            [name: string]: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        });
        isEmpty(): boolean;
        getCurrentFilterValues(dimensionIds: Array<string>, axisName: DevExpress.Dashboard.Data.ItemDataAxisName, selectedValues: Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint> | Array<Array<DevExpress.Dashboard.Data.PrimitiveType>>): Array<DevExpress.Dashboard.Internal.Data.itemDataTuple>;
        getCurrentDrillDownValues(dimensionIds: Array<string>, axisName: DevExpress.Dashboard.Data.ItemDataAxisName): DevExpress.Dashboard.Internal.Data.itemDataTuple;
        getAvailableTuples(dimensionIds: Array<string>, axisName: DevExpress.Dashboard.Data.ItemDataAxisName): Array<DevExpress.Dashboard.Internal.Data.itemDataTuple>;
        getAllSelectionValues(dimensionIds: Array<string>): any;
        getMeasuresByIds(measureIds: Array<string>): Array<DevExpress.Dashboard.Data.ItemDataMeasure>;
        getAxisNames(): Array<DevExpress.Dashboard.Data.ItemDataAxisName>;
        getAxis(axisName?: DevExpress.Dashboard.Data.ItemDataAxisName): DevExpress.Dashboard.Internal.Data.itemDataAxis;
        getDimensions(axisName?: DevExpress.Dashboard.Data.ItemDataAxisName): Array<DevExpress.Dashboard.Internal.Data.itemDataDimension>;
        getColorMeasures(): Array<DevExpress.Dashboard.Data.ItemDataMeasure>;
        getMeasures(): Array<DevExpress.Dashboard.Internal.Data.itemDataMeasure>;
        getDeltas(): Array<DevExpress.Dashboard.Data.ItemDataDelta>;
        getMeasureById(id: string): DevExpress.Dashboard.Data.ItemDataMeasure;
        getDeltaById(id: string): DevExpress.Dashboard.Data.ItemDataDelta;
        getSlice(value: DevExpress.Dashboard.Internal.Data.itemDataTuple | DevExpress.Dashboard.Internal.Data.itemDataAxisPoint): itemData;
        getMeasureFormat(measureId: string): any;
        getMeasureExpression(measureId: string): any;
        getMeasureCalculation(measureId: string): any;
        getMeasureWindowDefinition(measureId: string): any;
        getDimensionFormat(dimensionId: string): any;
        getColorMeasureValue(colorMeasureId: string): any;
        getConditionalFormattingMeasureValue(cfMeasureId: string): any;
        getMeasureValue(measureId: string): DevExpress.Dashboard.Data.ItemDataMeasureValue;
        getPointsByDimensionId(dimensionId: string): Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>;
        _getKeys(points?: {
            [areaName: string]: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        }): DevExpress.Dashboard.Internal.Data.DataRowKey[];
        _getValue(measureId: any): any;
        _getMeasureValueByKeys(keys: any, mId: any, format: any): {
            getValue: () => any;
            getDisplayText: () => string;
        };
        _getDeltaValueByKeys(keys: any, deltaIds: any, formats: any): {
            getActualValue: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getTargetValue: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getAbsoluteVariation: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getPercentVariation: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getPercentOfTarget: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getIsGood: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getIndicatorType: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getDisplayValue: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getDisplaySubValue1: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
            getDisplaySubValue2: () => {
                getValue: () => any;
                getDisplayText: () => string;
            };
        };
        _createPointsCache(axisPoints: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint[]): {
            [areaName: string]: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        };
        getMeasureValueByAxisPoints(measureId: string, axisPoints: Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>): DevExpress.Dashboard.Data.ItemDataMeasureValue;
        getDeltaValue(deltaId: string): DevExpress.Dashboard.Data.ItemDataDeltaValue;
        getDeltaValueByAxisPoints(deltaId: string, axisPoints: Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>): DevExpress.Dashboard.Data.ItemDataDeltaValue;
        getDataMembers(): Array<string>;
        createTuple(values: Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint> | Array<{
            axisName: DevExpress.Dashboard.Data.ItemDataAxisName;
            value: Array<DevExpress.Dashboard.Data.PrimitiveType>;
        }>): DevExpress.Dashboard.Internal.Data.itemDataTuple;
        _getCellValue(keys: DevExpress.Dashboard.Internal.Data.DataRowKey[], valueId: any): any;
        _getCellDisplayText(keys: any, valueId: any, format: any): string;
        _getSliceByAxisPoint(axisPoint: any): itemData;
        _getSliceByTuple(tuple: any): itemData;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import dxSparklineOptions = DevExpress.viz.dxSparkline.Properties;
    import FormatRuleModelBase = DevExpress.Dashboard.Internal.Data.FormatRuleModelBase;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
    export let DATA_POSTFIX: string;
    export let DEFAULT_SUBTITLE_SEPARATOR: string;
    export class dataControllerBase {
        deltaIndicatorTypes: any;
        multiData: DevExpress.Dashboard.Internal.Data.itemData;
        viewModel: any;
        cfModel: any;
        drillDownState: any;
        useNeutralFilterMode: boolean;
        constructor(options: DevExpress.Dashboard.Internal.Data.DataControllerOptions);
        isMultiselectable(): boolean;
        update(selectedValues: any[][], encodeHtml: boolean): void;
        getTitle(axisPoint: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint, separator?: any, saveOrder?: any): any;
        _getMeasureValueByAxisPoints(axisPoints: Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>, cfMeasureId: any): any;
        _getSlice(axisPoints: any): DevExpress.Dashboard.Internal.Data.itemData;
        _getZeroPosition(zeroPositionMeasureId: any, columnAxisName: any, rowAxisName: any): any;
        protected _getStyleIndexes(rule: DevExpress.Dashboard.Internal.Data.FormatRuleModelBase, cellInfo: any, points: any): Array<number>;
        _getStyleSettingsInfoCore(cellInfo: any, rules: any, columnAxisName: any, rowAxisName: any): any;
        _generateSparklineOptions(data: any, options: any, format: (value: any) => string): DevExpress.viz.dxSparkline.Properties;
        _convertIndicatorType(type: any): any;
        protected _findAxisPoint(dataId: string, axisPoint: DevExpress.Dashboard.Internal.Data.itemDataAxisPoint): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemDataMeasureValue = DevExpress.Dashboard.Data.ItemDataMeasureValue;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
    export class geoPointMapDataControllerBase extends dataControllerBase {
        axisPoints: Array<DevExpress.Dashboard.Internal.Data.itemDataAxisPoint>;
        constructor(options: any);
        getPoint(index: any, valueIndex?: any): {
            lat: DevExpress.Dashboard.Data.PrimitiveType;
            lon: DevExpress.Dashboard.Data.PrimitiveType;
            latSel: DevExpress.Dashboard.Data.PrimitiveType;
            lonSel: DevExpress.Dashboard.Data.PrimitiveType;
            pointsCount: any;
            tooltipDimensions: any[];
            tooltipMeasures: any[];
        };
        getCount(): number;
        _prepare(): void;
        _getAxisPointDimensionDescriptorId(): any;
        _getMeasure(index: any, measureName: any, groupByDimensionId?: string): DevExpress.Dashboard.Data.ItemDataMeasureValue;
        _getMeasureValue(index: any, measureName: any): number;
        _getMeasureDisplayText(index: any, measureName: any, groupByDimensionId?: string): string;
        _getLatitude(index: any): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        _getLatitudeValue(index: any): DevExpress.Dashboard.Data.PrimitiveType;
        _getLatitudeUniqueValue(index: any): DevExpress.Dashboard.Data.PrimitiveType;
        _getLongitude(index: any): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
        _getLongitudeValue(index: any): DevExpress.Dashboard.Data.PrimitiveType;
        _getLongitudeUniqueValue(index: any): DevExpress.Dashboard.Data.PrimitiveType;
        _getPointsCount(index: any): number;
        _getTooltipDimensions(index: any): any[];
        _getTooltipMeasures(index: any): any[];
        _getAxisPoint(index: any): DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    import geoPointMapDataControllerBase = DevExpress.Dashboard.Internal.Data.geoPointMapDataControllerBase;
    export class bubbleMapDataController extends geoPointMapDataControllerBase {
        constructor(options: any);
        getPoint(index: any): any;
        formatColor(value: any): any;
        formatWeight(value: any): any;
    }
}
declare module DevExpress.Dashboard.Internal.Data {
    export let tagValuesProvider: {
        getTag: (listSource: any, tagDataMembers: any, rowIndex: any) => any;
        getTagByValues: (values: any) => any;
    };
}
declare module DevExpress.Dashboard.Data {
}
declare module DevExpress.Dashboard.Data {
}
declare module DevExpress.Dashboard.Data {
}
declare module DevExpress.Dashboard {
}
declare module DevExpress.Dashboard.Internal.Designer {
    export interface DocVariableInfo {
        id: string;
        displayName: string;
    }
    export interface RichEditorBindingOptions {
        initialDocument: string;
        onSaving: (document: string) => void;
        docVariables: DocVariableInfo[];
        dashboardItemWidth?: number;
        forceSave?: () => void;
        documentModified?: () => boolean;
    }
}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxPopup = DevExpress.ui.dxPopup;
    import ConfirmDialogViewModel = DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
    import DocVariableInfo = DevExpress.Dashboard.Internal.Designer.DocVariableInfo;
    export class ValueAccessor {
        getValue: () => any;
        setValue: (value: any) => void;
    }
    export class RichEditExtensionViewModel {
        private _isCloseConfirmed;
        popup: DevExpress.ui.dxPopup;
        richEditorOptions: ko.Observable<any>;
        show(options: ValueAccessor, docVariables: DevExpress.Dashboard.Internal.Designer.DocVariableInfo[], dashboardItemWidth: number): void;
        close: () => void;
        saveAndClose: () => void;
        onHidden: () => void;
        onHiding: (args: any) => void;
        onInitialized: (args: any) => void;
        confirmDialogViewModel: DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
    }
}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    export class TextBoxItemEditorExtension extends DisposableObject implements IExtension {
        private readonly _dashboardControl;
        private readonly _viewModel;
        private readonly _customTemplate;
        name: string;
        constructor(dashboardControl: DevExpress.Dashboard.DashboardControl);
        start(): void;
        private _extendTextBoxSerializationInfo;
        private _getDashboardItemWidth;
        stop(): void;
    }
}
declare module DevExpress.Dashboard.Designer {
}
declare module DevExpress.Dashboard.Internal {
}
